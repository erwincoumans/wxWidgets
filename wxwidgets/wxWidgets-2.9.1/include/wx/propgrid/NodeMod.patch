Index: advprops.h
===================================================================
--- advprops.h	(revision 102)
+++ advprops.h	(working copy)
@@ -1,543 +1,543 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/advprops.h
-// Purpose:     wxPropertyGrid Advanced Properties (font, colour, etc.)
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2004-09-25
-// RCS-ID:      $Id: advprops.h 60870 2009-06-02 01:51:46Z RD $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_ADVPROPS_H_
-#define _WX_PROPGRID_ADVPROPS_H_
-
-#if wxUSE_PROPGRID
-
-#include "wx/propgrid/props.h"
-
-// -----------------------------------------------------------------------
-
-
-//
-// Additional Value Type Handlers
-//
-#ifndef SWIG
-bool WXDLLIMPEXP_PROPGRID
-operator==(const wxArrayInt& array1, const wxArrayInt& array2);
-#endif
-
-
-//
-// Additional Property Editors
-//
-#ifndef SWIG
-#if wxUSE_SPINBTN
-WX_PG_DECLARE_EDITOR_WITH_DECL(SpinCtrl,WXDLLIMPEXP_PROPGRID)
-#endif
-
-#if wxUSE_DATEPICKCTRL
-WX_PG_DECLARE_EDITOR_WITH_DECL(DatePickerCtrl,WXDLLIMPEXP_PROPGRID)
-#endif
-#endif
-
-// -----------------------------------------------------------------------
-
-
-// Web colour is currently unsupported
-#define wxPG_COLOUR_WEB_BASE        0x10000
-//#define wxPG_TO_WEB_COLOUR(A)   ((wxUint32)(A+wxPG_COLOUR_WEB_BASE))
-
-
-#define wxPG_COLOUR_CUSTOM      0xFFFFFF
-#define wxPG_COLOUR_UNSPECIFIED (wxPG_COLOUR_CUSTOM+1)
-
-/** @class wxColourPropertyValue
-
-    Because text, background and other colours tend to differ between
-    platforms, wxSystemColourProperty must be able to select between system
-    colour and, when necessary, to pick a custom one. wxSystemColourProperty
-    value makes this possible.
-*/
-class WXDLLIMPEXP_PROPGRID wxColourPropertyValue : public wxObject
-{
-public:
-    /** An integer value relating to the colour, and which exact
-        meaning depends on the property with which it is used.
-
-        For wxSystemColourProperty:
-
-        Any of wxSYS_COLOUR_XXX, or any web-colour ( use wxPG_TO_WEB_COLOUR
-        macro - (currently unsupported) ), or wxPG_COLOUR_CUSTOM.
-
-        For custom colour properties without values array specified:
-
-        index or wxPG_COLOUR_CUSTOM
-
-        For custom colour properties <b>with</b> values array specified:
-
-        m_arrValues[index] or wxPG_COLOUR_CUSTOM
-    */
-    wxUint32    m_type;
-
-    /** Resulting colour. Should be correct regardless of type. */
-    wxColour    m_colour;
-
-    wxColourPropertyValue()
-        : wxObject()
-    {
-        m_type = 0;
-    }
-
-    virtual ~wxColourPropertyValue()
-    {
-    }
-
-    wxColourPropertyValue( const wxColourPropertyValue& v )
-        : wxObject()
-    {
-        m_type = v.m_type;
-        m_colour = v.m_colour;
-    }
-
-    void Init( wxUint32 type, const wxColour& colour )
-    {
-        m_type = type;
-        m_colour = colour;
-    }
-
-    wxColourPropertyValue( const wxColour& colour )
-        : wxObject()
-    {
-        m_type = wxPG_COLOUR_CUSTOM;
-        m_colour = colour;
-    }
-
-    wxColourPropertyValue( wxUint32 type )
-        : wxObject()
-    {
-        m_type = type;
-    }
-
-    wxColourPropertyValue( wxUint32 type, const wxColour& colour )
-        : wxObject()
-    {
-        Init( type, colour );
-    }
-
-#ifndef SWIG
-    void operator=(const wxColourPropertyValue& cpv)
-    {
-        if (this != &cpv)
-            Init( cpv.m_type, cpv.m_colour );
-    }
-
-private:
-    DECLARE_DYNAMIC_CLASS(wxColourPropertyValue)
-#endif
-};
-
-
-#ifndef SWIG
-bool WXDLLIMPEXP_PROPGRID
-operator==(const wxColourPropertyValue&, const wxColourPropertyValue&);
-
-DECLARE_VARIANT_OBJECT_EXPORTED(wxColourPropertyValue, WXDLLIMPEXP_PROPGRID)
-
-#endif
-
-#ifndef SWIG
-    #define wxPG_EMPTY_CPV          (*(NULL))
-    #define wxPG_NORMAL_FONT        (*wxNORMAL_FONT)
-#else
-    #define wxPG_EMPTY_CPV          wxCPV_wxPG_EMPTY
-    #define wxPG_NORMAL_FONT        wxFONT_wxPG_NORMAL_FONT
-#endif
-
-
-// -----------------------------------------------------------------------
-// Declare part of custom colour property macro pairs.
-
-#if wxUSE_IMAGE
-    #include "wx/image.h"
-#endif
-
-// -----------------------------------------------------------------------
-
-// Exclude class from wxPython bindings
-#ifndef SWIG
-
-/** @class wxFontProperty
-    @ingroup classes
-    Property representing wxFont.
-*/
-class WXDLLIMPEXP_PROPGRID wxFontProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxFontProperty)
-public:
-
-    wxFontProperty(const wxString& label = wxPG_LABEL,
-                   const wxString& name = wxPG_LABEL,
-                   const wxFont& value = wxFont());
-    virtual ~wxFontProperty();
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxWindow* primary, wxEvent& event );
-    virtual void ChildChanged( wxVariant& thisValue,
-                               int childIndex, wxVariant& childValue ) const;
-    virtual void RefreshChildren();
-
-protected:
-};
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-
-/** If set, then match from list is searched for a custom colour. */
-#define wxPG_PROP_TRANSLATE_CUSTOM      wxPG_PROP_CLASS_SPECIFIC_1
-
-
-/** @class wxSystemColourProperty
-    @ingroup classes
-    Has dropdown list of wxWidgets system colours. Value used is
-    of wxColourPropertyValue type.
-*/
-class WXDLLIMPEXP_PROPGRID wxSystemColourProperty : public wxEnumProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxSystemColourProperty)
-public:
-
-    wxSystemColourProperty( const wxString& label = wxPG_LABEL,
-                            const wxString& name = wxPG_LABEL,
-                            const wxColourPropertyValue&
-                                value = wxColourPropertyValue() );
-    virtual ~wxSystemColourProperty();
-
-    virtual void OnSetValue();
-    virtual bool IntToValue(wxVariant& variant,
-                            int number,
-                            int argFlags = 0) const;
-
-    /**
-        Override in derived class to customize how colours are printed as
-        strings.
-    */
-    virtual wxString ColourToString( const wxColour& col, int index ) const;
-
-    /** Returns index of entry that triggers colour picker dialog
-        (default is last).
-    */
-    virtual int GetCustomColourIndex() const;
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxWindow* primary, wxEvent& event );
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-    virtual wxSize OnMeasureImage( int item ) const;
-    virtual void OnCustomPaint( wxDC& dc,
-                                const wxRect& rect, wxPGPaintData& paintdata );
-
-    // Helper function to show the colour dialog
-    bool QueryColourFromUser( wxVariant& variant ) const;
-
-    /** Default is to use wxSystemSettings::GetColour(index). Override to use
-        custom colour tables etc.
-    */
-    virtual wxColour GetColour( int index ) const;
-
-    wxColourPropertyValue GetVal( const wxVariant* pVariant = NULL ) const;
-
-protected:
-
-    // Special constructors to be used by derived classes.
-    wxSystemColourProperty( const wxString& label, const wxString& name,
-        const wxChar** labels, const long* values, wxPGChoices* choicesCache,
-        const wxColourPropertyValue& value );
-    wxSystemColourProperty( const wxString& label, const wxString& name,
-        const wxChar** labels, const long* values, wxPGChoices* choicesCache,
-        const wxColour& value );
-
-    void Init( int type, const wxColour& colour );
-
-    // Utility functions for internal use
-    virtual wxVariant DoTranslateVal( wxColourPropertyValue& v ) const;
-    wxVariant TranslateVal( wxColourPropertyValue& v ) const
-    {
-        return DoTranslateVal( v );
-    }
-    wxVariant TranslateVal( int type, const wxColour& colour ) const
-    {
-        wxColourPropertyValue v(type, colour);
-        return DoTranslateVal( v );
-    }
-
-    // Translates colour to a int value, return wxNOT_FOUND if no match.
-    int ColToInd( const wxColour& colour ) const;
-};
-
-// -----------------------------------------------------------------------
-
-class WXDLLIMPEXP_PROPGRID wxColourProperty : public wxSystemColourProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxColourProperty)
-public:
-    wxColourProperty( const wxString& label = wxPG_LABEL,
-                      const wxString& name = wxPG_LABEL,
-                      const wxColour& value = *wxWHITE );
-    virtual ~wxColourProperty();
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual wxColour GetColour( int index ) const;
-
-protected:
-    virtual wxVariant DoTranslateVal( wxColourPropertyValue& v ) const;
-
-private:
-    void Init( wxColour colour );
-};
-
-// -----------------------------------------------------------------------
-
-// Exclude classes from wxPython bindings
-#ifndef SWIG
-
-/** @class wxCursorProperty
-    @ingroup classes
-    Property representing wxCursor.
-*/
-class WXDLLIMPEXP_PROPGRID wxCursorProperty : public wxEnumProperty
-{
-    DECLARE_DYNAMIC_CLASS(wxCursorProperty)
-
-    wxCursorProperty( const wxString& label= wxPG_LABEL,
-                      const wxString& name= wxPG_LABEL,
-                      int value = 0 );
-    virtual ~wxCursorProperty();
-
-    virtual wxSize OnMeasureImage( int item ) const;
-    virtual void OnCustomPaint( wxDC& dc,
-                                const wxRect& rect, wxPGPaintData& paintdata );
-};
-
-// -----------------------------------------------------------------------
-
-#if wxUSE_IMAGE
-
-WXDLLIMPEXP_PROPGRID const wxString& wxPGGetDefaultImageWildcard();
-
-/** @class wxImageFileProperty
-    @ingroup classes
-    Property representing image file(name).
-*/
-class WXDLLIMPEXP_PROPGRID wxImageFileProperty : public wxFileProperty
-{
-    DECLARE_DYNAMIC_CLASS(wxImageFileProperty)
-public:
-
-    wxImageFileProperty( const wxString& label= wxPG_LABEL,
-                         const wxString& name = wxPG_LABEL,
-                         const wxString& value = wxEmptyString);
-    virtual ~wxImageFileProperty();
-
-    virtual void OnSetValue();
-
-    virtual wxSize OnMeasureImage( int item ) const;
-    virtual void OnCustomPaint( wxDC& dc,
-                                const wxRect& rect, wxPGPaintData& paintdata );
-
-protected:
-    wxBitmap*   m_pBitmap; // final thumbnail area
-    wxImage*    m_pImage; // intermediate thumbnail area
-};
-
-#endif
-
-#if wxUSE_CHOICEDLG
-
-/** @class wxMultiChoiceProperty
-    @ingroup classes
-    Property that manages a value resulting from wxMultiChoiceDialog. Value is
-    array of strings. You can get value as array of choice values/indices by
-    calling wxMultiChoiceProperty::GetValueAsArrayInt().
-
-    <b>Supported special attributes:</b>
-    - "UserStringMode": If > 0, allow user to manually enter strings that are
-      not in the list of choices. If this value is 1, user strings are
-      preferably placed in front of valid choices. If value is 2, then those
-      strings will placed behind valid choices.
-*/
-class WXDLLIMPEXP_PROPGRID wxMultiChoiceProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxMultiChoiceProperty)
-public:
-
-    wxMultiChoiceProperty( const wxString& label,
-                           const wxString& name,
-                           const wxArrayString& strings,
-                           const wxArrayString& value );
-#ifndef SWIG
-    wxMultiChoiceProperty( const wxString& label,
-                           const wxString& name,
-                           const wxPGChoices& choices,
-                           const wxArrayString& value = wxArrayString() );
-
-    wxMultiChoiceProperty( const wxString& label = wxPG_LABEL,
-                           const wxString& name = wxPG_LABEL,
-                           const wxArrayString& value = wxArrayString() );
-#endif
-    virtual ~wxMultiChoiceProperty();
-
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue(wxVariant& variant,
-                               const wxString& text,
-                               int argFlags = 0) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxWindow* primary, wxEvent& event );
-
-    wxArrayInt GetValueAsArrayInt() const
-    {
-        return m_choices.GetValuesForStrings(m_value.GetArrayString());
-    }
-
-protected:
-
-    void GenerateValueAsString( wxVariant& value, wxString* target ) const;
-
-    // Returns translation of values into string indices.
-    wxArrayInt GetValueAsIndices() const;
-
-    wxArrayString       m_valueAsStrings;  // Value as array of strings
-
-    // Cache displayed text since generating it is relatively complicated.
-    wxString            m_display;
-};
-
-#endif // wxUSE_CHOICEDLG
-
-// -----------------------------------------------------------------------
-
-#if wxUSE_DATETIME
-
-/** @class wxDateProperty
-    @ingroup classes
-    Property representing wxDateTime.
-
-    <b>Supported special attributes:</b>
-    - "DateFormat": Determines displayed date format.
-    - "PickerStyle": Determines window style used with wxDatePickerCtrl.
-       Default is wxDP_DEFAULT | wxDP_SHOWCENTURY. Using wxDP_ALLOWNONE 
-       enables additional support for unspecified property value.
-*/
-class WXDLLIMPEXP_PROPGRID wxDateProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxDateProperty)
-public:
-
-    wxDateProperty( const wxString& label = wxPG_LABEL,
-                    const wxString& name = wxPG_LABEL,
-                    const wxDateTime& value = wxDateTime() );
-    virtual ~wxDateProperty();
-
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue(wxVariant& variant,
-                               const wxString& text,
-                               int argFlags = 0) const;
-
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-
-    void SetFormat( const wxString& format )
-    {
-        m_format = format;
-    }
-
-    const wxString& GetFormat() const
-    {
-        return m_format;
-    }
-
-    void SetDateValue( const wxDateTime& dt )
-    {
-        //m_valueDateTime = dt;
-        m_value = dt;
-    }
-
-    wxDateTime GetDateValue() const
-    {
-        //return m_valueDateTime;
-        return m_value;
-    }
-
-    long GetDatePickerStyle() const
-    {
-        return m_dpStyle;
-    }
-
-protected:
-    wxString        m_format;
-    long            m_dpStyle;  // DatePicker style
-
-    static wxString ms_defaultDateFormat;
-    static wxString DetermineDefaultDateFormat( bool showCentury );
-};
-
-#endif // wxUSE_DATETIME
-
-#endif // !SWIG
-
-// -----------------------------------------------------------------------
-
-#if wxUSE_SPINBTN
-
-//
-// Implement an editor control that allows using wxSpinCtrl (actually, a
-// combination of wxTextCtrl and wxSpinButton) to edit value of wxIntProperty
-// and wxFloatProperty (and similar).
-//
-// Note that new editor classes needs to be registered before use. This can be
-// accomplished using wxPGRegisterEditorClass macro, which is used for SpinCtrl
-// in wxPropertyGridInterface::RegisterAdditionalEditors (see below).
-// Registration can also be performed in a constructor of a property that is
-// likely to require the editor in question.
-//
-
-
-#include "wx/spinbutt.h"
-#include "wx/propgrid/editors.h"
-
-
-// NOTE: Regardless that this class inherits from a working editor, it has
-//   all necessary methods to work independently. wxTextCtrl stuff is only
-//   used for event handling here.
-class WXDLLIMPEXP_PROPGRID wxPGSpinCtrlEditor : public wxPGTextCtrlEditor
-{
-    DECLARE_DYNAMIC_CLASS(wxPGSpinCtrlEditor)
-public:
-    virtual ~wxPGSpinCtrlEditor();
-
-    wxString GetName() const;
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
-        wxWindow* wnd, wxEvent& event ) const;
-
-private:
-    mutable wxString m_tempString;
-};
-
-#endif // wxUSE_SPINBTN
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_ADVPROPS_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/advprops.h
+// Purpose:     wxPropertyGrid Advanced Properties (font, colour, etc.)
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2004-09-25
+// RCS-ID:      $Id: advprops.h 60870 2009-06-02 01:51:46Z RD $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_ADVPROPS_H_
+#define _WX_PROPGRID_ADVPROPS_H_
+
+#if wxUSE_PROPGRID
+
+#include "wx/propgrid/props.h"
+
+// -----------------------------------------------------------------------
+
+
+//
+// Additional Value Type Handlers
+//
+#ifndef SWIG
+bool WXDLLIMPEXP_PROPGRID
+operator==(const wxArrayInt& array1, const wxArrayInt& array2);
+#endif
+
+
+//
+// Additional Property Editors
+//
+#ifndef SWIG
+#if wxUSE_SPINBTN
+WX_PG_DECLARE_EDITOR_WITH_DECL(SpinCtrl,WXDLLIMPEXP_PROPGRID)
+#endif
+
+#if wxUSE_DATEPICKCTRL
+WX_PG_DECLARE_EDITOR_WITH_DECL(DatePickerCtrl,WXDLLIMPEXP_PROPGRID)
+#endif
+#endif
+
+// -----------------------------------------------------------------------
+
+
+// Web colour is currently unsupported
+#define wxPG_COLOUR_WEB_BASE        0x10000
+//#define wxPG_TO_WEB_COLOUR(A)   ((wxUint32)(A+wxPG_COLOUR_WEB_BASE))
+
+
+#define wxPG_COLOUR_CUSTOM      0xFFFFFF
+#define wxPG_COLOUR_UNSPECIFIED (wxPG_COLOUR_CUSTOM+1)
+
+/** @class wxColourPropertyValue
+
+    Because text, background and other colours tend to differ between
+    platforms, wxSystemColourProperty must be able to select between system
+    colour and, when necessary, to pick a custom one. wxSystemColourProperty
+    value makes this possible.
+*/
+class WXDLLIMPEXP_PROPGRID wxColourPropertyValue : public wxObject
+{
+public:
+    /** An integer value relating to the colour, and which exact
+        meaning depends on the property with which it is used.
+
+        For wxSystemColourProperty:
+
+        Any of wxSYS_COLOUR_XXX, or any web-colour ( use wxPG_TO_WEB_COLOUR
+        macro - (currently unsupported) ), or wxPG_COLOUR_CUSTOM.
+
+        For custom colour properties without values array specified:
+
+        index or wxPG_COLOUR_CUSTOM
+
+        For custom colour properties <b>with</b> values array specified:
+
+        m_arrValues[index] or wxPG_COLOUR_CUSTOM
+    */
+    wxUint32    m_type;
+
+    /** Resulting colour. Should be correct regardless of type. */
+    wxColour    m_colour;
+
+    wxColourPropertyValue()
+        : wxObject()
+    {
+        m_type = 0;
+    }
+
+    virtual ~wxColourPropertyValue()
+    {
+    }
+
+    wxColourPropertyValue( const wxColourPropertyValue& v )
+        : wxObject()
+    {
+        m_type = v.m_type;
+        m_colour = v.m_colour;
+    }
+
+    void Init( wxUint32 type, const wxColour& colour )
+    {
+        m_type = type;
+        m_colour = colour;
+    }
+
+    wxColourPropertyValue( const wxColour& colour )
+        : wxObject()
+    {
+        m_type = wxPG_COLOUR_CUSTOM;
+        m_colour = colour;
+    }
+
+    wxColourPropertyValue( wxUint32 type )
+        : wxObject()
+    {
+        m_type = type;
+    }
+
+    wxColourPropertyValue( wxUint32 type, const wxColour& colour )
+        : wxObject()
+    {
+        Init( type, colour );
+    }
+
+#ifndef SWIG
+    void operator=(const wxColourPropertyValue& cpv)
+    {
+        if (this != &cpv)
+            Init( cpv.m_type, cpv.m_colour );
+    }
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxColourPropertyValue)
+#endif
+};
+
+
+#ifndef SWIG
+bool WXDLLIMPEXP_PROPGRID
+operator==(const wxColourPropertyValue&, const wxColourPropertyValue&);
+
+DECLARE_VARIANT_OBJECT_EXPORTED(wxColourPropertyValue, WXDLLIMPEXP_PROPGRID)
+
+#endif
+
+#ifndef SWIG
+    #define wxPG_EMPTY_CPV          (*(NULL))
+    #define wxPG_NORMAL_FONT        (*wxNORMAL_FONT)
+#else
+    #define wxPG_EMPTY_CPV          wxCPV_wxPG_EMPTY
+    #define wxPG_NORMAL_FONT        wxFONT_wxPG_NORMAL_FONT
+#endif
+
+
+// -----------------------------------------------------------------------
+// Declare part of custom colour property macro pairs.
+
+#if wxUSE_IMAGE
+    #include "wx/image.h"
+#endif
+
+// -----------------------------------------------------------------------
+
+// Exclude class from wxPython bindings
+#ifndef SWIG
+
+/** @class wxFontProperty
+    @ingroup classes
+    Property representing wxFont.
+*/
+class WXDLLIMPEXP_PROPGRID wxFontProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxFontProperty)
+public:
+
+    wxFontProperty(const wxString& label = wxPG_LABEL,
+                   const wxString& name = wxPG_LABEL,
+                   const wxFont& value = wxFont());
+    virtual ~wxFontProperty();
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxWindow* primary, wxEvent& event );
+    virtual void ChildChanged( wxVariant& thisValue,
+                               int childIndex, wxVariant& childValue ) const;
+    virtual void RefreshChildren();
+
+protected:
+};
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+
+/** If set, then match from list is searched for a custom colour. */
+#define wxPG_PROP_TRANSLATE_CUSTOM      wxPG_PROP_CLASS_SPECIFIC_1
+
+
+/** @class wxSystemColourProperty
+    @ingroup classes
+    Has dropdown list of wxWidgets system colours. Value used is
+    of wxColourPropertyValue type.
+*/
+class WXDLLIMPEXP_PROPGRID wxSystemColourProperty : public wxEnumProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxSystemColourProperty)
+public:
+
+    wxSystemColourProperty( const wxString& label = wxPG_LABEL,
+                            const wxString& name = wxPG_LABEL,
+                            const wxColourPropertyValue&
+                                value = wxColourPropertyValue() );
+    virtual ~wxSystemColourProperty();
+
+    virtual void OnSetValue();
+    virtual bool IntToValue(wxVariant& variant,
+                            int number,
+                            int argFlags = 0) const;
+
+    /**
+        Override in derived class to customize how colours are printed as
+        strings.
+    */
+    virtual wxString ColourToString( const wxColour& col, int index ) const;
+
+    /** Returns index of entry that triggers colour picker dialog
+        (default is last).
+    */
+    virtual int GetCustomColourIndex() const;
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxWindow* primary, wxEvent& event );
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+    virtual wxSize OnMeasureImage( int item ) const;
+    virtual void OnCustomPaint( wxDC& dc,
+                                const wxRect& rect, wxPGPaintData& paintdata );
+
+    // Helper function to show the colour dialog
+    bool QueryColourFromUser( wxVariant& variant ) const;
+
+    /** Default is to use wxSystemSettings::GetColour(index). Override to use
+        custom colour tables etc.
+    */
+    virtual wxColour GetColour( int index ) const;
+
+    wxColourPropertyValue GetVal( const wxVariant* pVariant = NULL ) const;
+
+protected:
+
+    // Special constructors to be used by derived classes.
+    wxSystemColourProperty( const wxString& label, const wxString& name,
+        const wxChar** labels, const long* values, wxPGChoices* choicesCache,
+        const wxColourPropertyValue& value );
+    wxSystemColourProperty( const wxString& label, const wxString& name,
+        const wxChar** labels, const long* values, wxPGChoices* choicesCache,
+        const wxColour& value );
+
+    void Init( int type, const wxColour& colour );
+
+    // Utility functions for internal use
+    virtual wxVariant DoTranslateVal( wxColourPropertyValue& v ) const;
+    wxVariant TranslateVal( wxColourPropertyValue& v ) const
+    {
+        return DoTranslateVal( v );
+    }
+    wxVariant TranslateVal( int type, const wxColour& colour ) const
+    {
+        wxColourPropertyValue v(type, colour);
+        return DoTranslateVal( v );
+    }
+
+    // Translates colour to a int value, return wxNOT_FOUND if no match.
+    int ColToInd( const wxColour& colour ) const;
+};
+
+// -----------------------------------------------------------------------
+
+class WXDLLIMPEXP_PROPGRID wxColourProperty : public wxSystemColourProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxColourProperty)
+public:
+    wxColourProperty( const wxString& label = wxPG_LABEL,
+                      const wxString& name = wxPG_LABEL,
+                      const wxColour& value = *wxWHITE );
+    virtual ~wxColourProperty();
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual wxColour GetColour( int index ) const;
+
+protected:
+    virtual wxVariant DoTranslateVal( wxColourPropertyValue& v ) const;
+
+private:
+    void Init( wxColour colour );
+};
+
+// -----------------------------------------------------------------------
+
+// Exclude classes from wxPython bindings
+#ifndef SWIG
+
+/** @class wxCursorProperty
+    @ingroup classes
+    Property representing wxCursor.
+*/
+class WXDLLIMPEXP_PROPGRID wxCursorProperty : public wxEnumProperty
+{
+    DECLARE_DYNAMIC_CLASS(wxCursorProperty)
+
+    wxCursorProperty( const wxString& label= wxPG_LABEL,
+                      const wxString& name= wxPG_LABEL,
+                      int value = 0 );
+    virtual ~wxCursorProperty();
+
+    virtual wxSize OnMeasureImage( int item ) const;
+    virtual void OnCustomPaint( wxDC& dc,
+                                const wxRect& rect, wxPGPaintData& paintdata );
+};
+
+// -----------------------------------------------------------------------
+
+#if wxUSE_IMAGE
+
+WXDLLIMPEXP_PROPGRID const wxString& wxPGGetDefaultImageWildcard();
+
+/** @class wxImageFileProperty
+    @ingroup classes
+    Property representing image file(name).
+*/
+class WXDLLIMPEXP_PROPGRID wxImageFileProperty : public wxFileProperty
+{
+    DECLARE_DYNAMIC_CLASS(wxImageFileProperty)
+public:
+
+    wxImageFileProperty( const wxString& label= wxPG_LABEL,
+                         const wxString& name = wxPG_LABEL,
+                         const wxString& value = wxEmptyString);
+    virtual ~wxImageFileProperty();
+
+    virtual void OnSetValue();
+
+    virtual wxSize OnMeasureImage( int item ) const;
+    virtual void OnCustomPaint( wxDC& dc,
+                                const wxRect& rect, wxPGPaintData& paintdata );
+
+protected:
+    wxBitmap*   m_pBitmap; // final thumbnail area
+    wxImage*    m_pImage; // intermediate thumbnail area
+};
+
+#endif
+
+#if wxUSE_CHOICEDLG
+
+/** @class wxMultiChoiceProperty
+    @ingroup classes
+    Property that manages a value resulting from wxMultiChoiceDialog. Value is
+    array of strings. You can get value as array of choice values/indices by
+    calling wxMultiChoiceProperty::GetValueAsArrayInt().
+
+    <b>Supported special attributes:</b>
+    - "UserStringMode": If > 0, allow user to manually enter strings that are
+      not in the list of choices. If this value is 1, user strings are
+      preferably placed in front of valid choices. If value is 2, then those
+      strings will placed behind valid choices.
+*/
+class WXDLLIMPEXP_PROPGRID wxMultiChoiceProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxMultiChoiceProperty)
+public:
+
+    wxMultiChoiceProperty( const wxString& label,
+                           const wxString& name,
+                           const wxArrayString& strings,
+                           const wxArrayString& value );
+#ifndef SWIG
+    wxMultiChoiceProperty( const wxString& label,
+                           const wxString& name,
+                           const wxPGChoices& choices,
+                           const wxArrayString& value = wxArrayString() );
+
+    wxMultiChoiceProperty( const wxString& label = wxPG_LABEL,
+                           const wxString& name = wxPG_LABEL,
+                           const wxArrayString& value = wxArrayString() );
+#endif
+    virtual ~wxMultiChoiceProperty();
+
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue(wxVariant& variant,
+                               const wxString& text,
+                               int argFlags = 0) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxWindow* primary, wxEvent& event );
+
+    wxArrayInt GetValueAsArrayInt() const
+    {
+        return m_choices.GetValuesForStrings(m_value.GetArrayString());
+    }
+
+protected:
+
+    void GenerateValueAsString( wxVariant& value, wxString* target ) const;
+
+    // Returns translation of values into string indices.
+    wxArrayInt GetValueAsIndices() const;
+
+    wxArrayString       m_valueAsStrings;  // Value as array of strings
+
+    // Cache displayed text since generating it is relatively complicated.
+    wxString            m_display;
+};
+
+#endif // wxUSE_CHOICEDLG
+
+// -----------------------------------------------------------------------
+
+#if wxUSE_DATETIME
+
+/** @class wxDateProperty
+    @ingroup classes
+    Property representing wxDateTime.
+
+    <b>Supported special attributes:</b>
+    - "DateFormat": Determines displayed date format.
+    - "PickerStyle": Determines window style used with wxDatePickerCtrl.
+       Default is wxDP_DEFAULT | wxDP_SHOWCENTURY. Using wxDP_ALLOWNONE 
+       enables additional support for unspecified property value.
+*/
+class WXDLLIMPEXP_PROPGRID wxDateProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxDateProperty)
+public:
+
+    wxDateProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL,
+                    const wxDateTime& value = wxDateTime() );
+    virtual ~wxDateProperty();
+
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue(wxVariant& variant,
+                               const wxString& text,
+                               int argFlags = 0) const;
+
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+
+    void SetFormat( const wxString& format )
+    {
+        m_format = format;
+    }
+
+    const wxString& GetFormat() const
+    {
+        return m_format;
+    }
+
+    void SetDateValue( const wxDateTime& dt )
+    {
+        //m_valueDateTime = dt;
+        m_value = dt;
+    }
+
+    wxDateTime GetDateValue() const
+    {
+        //return m_valueDateTime;
+        return m_value;
+    }
+
+    long GetDatePickerStyle() const
+    {
+        return m_dpStyle;
+    }
+
+protected:
+    wxString        m_format;
+    long            m_dpStyle;  // DatePicker style
+
+    static wxString ms_defaultDateFormat;
+    static wxString DetermineDefaultDateFormat( bool showCentury );
+};
+
+#endif // wxUSE_DATETIME
+
+#endif // !SWIG
+
+// -----------------------------------------------------------------------
+
+#if wxUSE_SPINBTN
+
+//
+// Implement an editor control that allows using wxSpinCtrl (actually, a
+// combination of wxTextCtrl and wxSpinButton) to edit value of wxIntProperty
+// and wxFloatProperty (and similar).
+//
+// Note that new editor classes needs to be registered before use. This can be
+// accomplished using wxPGRegisterEditorClass macro, which is used for SpinCtrl
+// in wxPropertyGridInterface::RegisterAdditionalEditors (see below).
+// Registration can also be performed in a constructor of a property that is
+// likely to require the editor in question.
+//
+
+
+#include "wx/spinbutt.h"
+#include "wx/propgrid/editors.h"
+
+
+// NOTE: Regardless that this class inherits from a working editor, it has
+//   all necessary methods to work independently. wxTextCtrl stuff is only
+//   used for event handling here.
+class WXDLLIMPEXP_PROPGRID wxPGSpinCtrlEditor : public wxPGTextCtrlEditor
+{
+    DECLARE_DYNAMIC_CLASS(wxPGSpinCtrlEditor)
+public:
+    virtual ~wxPGSpinCtrlEditor();
+
+    wxString GetName() const;
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
+        wxWindow* wnd, wxEvent& event ) const;
+
+private:
+    mutable wxString m_tempString;
+};
+
+#endif // wxUSE_SPINBTN
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_ADVPROPS_H_
Index: editors.h
===================================================================
--- editors.h	(revision 102)
+++ editors.h	(working copy)
@@ -1,539 +1,539 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/editors.h
-// Purpose:     wxPropertyGrid editors
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2007-04-14
-// RCS-ID:      $Id: editors.h 61018 2009-06-12 14:01:51Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_EDITORS_H_
-#define _WX_PROPGRID_EDITORS_H_
-
-#if wxUSE_PROPGRID
-
-// -----------------------------------------------------------------------
-// wxPGWindowList contains list of editor windows returned by CreateControls.
-
-class wxPGWindowList
-{
-public:
-    wxPGWindowList()
-    {
-        m_primary = m_secondary = NULL;
-    }
-
-    void SetSecondary( wxWindow* secondary ) { m_secondary = secondary; }
-
-    wxWindow*   m_primary;
-    wxWindow*   m_secondary;
-
-#ifndef SWIG
-    wxPGWindowList( wxWindow* a )
-    {
-        m_primary = a;
-        m_secondary = NULL;
-    };
-    wxPGWindowList( wxWindow* a, wxWindow* b )
-    {
-        m_primary = a;
-        m_secondary = b;
-    };
-#endif
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxPGEditor
-
-    Base class for custom wxPropertyGrid editors.
-
-    @remarks
-    - Names of builtin property editors are: TextCtrl, Choice,
-      ComboBox, CheckBox, TextCtrlAndButton, and ChoiceAndButton. Additional
-      editors include SpinCtrl and DatePickerCtrl, but using them requires
-      calling wxPropertyGrid::RegisterAdditionalEditors() prior use.
-
-    - Pointer to builtin editor is available as wxPGEditor_EditorName
-      (eg. wxPGEditor_TextCtrl).
-
-    - To add new editor you need to register it first using static function
-      wxPropertyGrid::RegisterEditorClass(), with code like this:
-        @code
-            wxPGEditor *editorPointer = wxPropertyGrid::RegisterEditorClass(
-                                            new MyEditorClass(), "MyEditor");
-        @endcode
-      After that, wxPropertyGrid will take ownership of the given object, but
-      you should still store editorPointer somewhere, so you can pass it to
-      wxPGProperty::SetEditor(), or return it from
-      wxPGEditor::DoGetEditorClass().
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPGEditor : public wxObject
-{
-    DECLARE_ABSTRACT_CLASS(wxPGEditor)
-public:
-
-    /** Constructor. */
-    wxPGEditor()
-        : wxObject()
-    {
-        m_clientData = NULL;
-    }
-
-    /** Destructor. */
-    virtual ~wxPGEditor();
-
-    /**
-        Returns pointer to the name of the editor. For example,
-        wxPGEditor_TextCtrl has name "TextCtrl". If you dont' need to access
-        your custom editor by string name, then you do not need to implement
-        this function.
-    */
-    virtual wxString GetName() const;
-
-    /**
-        Instantiates editor controls.
-
-        @param propgrid
-            wxPropertyGrid to which the property belongs (use as parent for
-            control).
-        @param property
-            Property for which this method is called.
-        @param pos
-            Position, inside wxPropertyGrid, to create control(s) to.
-        @param size
-            Initial size for control(s).
-
-        @remarks
-        - Primary control shall use id wxPG_SUBID1, and secondary (button)
-          control shall use wxPG_SUBID2.
-        - Unlike in previous version of wxPropertyGrid, it is no longer
-          necessary to call wxEvtHandler::Connect() for interesting editor
-          events. Instead, all events from control are now automatically
-          forwarded to wxPGEditor::OnEvent() and wxPGProperty::OnEvent().
-    */
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const = 0;
-
-    /** Loads value from property to the control. */
-    virtual void UpdateControl( wxPGProperty* property,
-                                wxWindow* ctrl ) const = 0;
-
-    /**
-        Used to get the renderer to draw the value with when the control is
-        hidden.
-
-        Default implementation returns g_wxPGDefaultRenderer.
-    */
-    //virtual wxPGCellRenderer* GetCellRenderer() const;
-
-    /** Draws value for given property.
-    */
-    virtual void DrawValue( wxDC& dc,
-                            const wxRect& rect,
-                            wxPGProperty* property,
-                            const wxString& text ) const;
-
-    /** Handles events. Returns true if value in control was modified
-        (see wxPGProperty::OnEvent for more information).
-
-        @remarks wxPropertyGrid will automatically unfocus the editor when
-                wxEVT_COMMAND_TEXT_ENTER is received and when it results in
-                property value being modified. This happens regardless of
-                editor type (ie. behavior is same for any wxTextCtrl and
-                wxComboBox based editor).
-    */
-    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
-        wxWindow* wnd_primary, wxEvent& event ) const = 0;
-
-#if !defined(SWIG) || defined(CREATE_VCW)
-    /** Returns value from control, via parameter 'variant'.
-        Usually ends up calling property's StringToValue or IntToValue.
-        Returns true if value was different.
-    */
-    virtual bool GetValueFromControl( wxVariant& variant,
-                                      wxPGProperty* property,
-                                      wxWindow* ctrl ) const;
-#endif
-
-    /** Sets value in control to unspecified. */
-    virtual void SetValueToUnspecified( wxPGProperty* property,
-                                        wxWindow* ctrl ) const = 0;
-
-    /** Sets control's value specifically from string. */
-    virtual void SetControlStringValue( wxPGProperty* property,
-                                        wxWindow* ctrl,
-                                        const wxString& txt ) const;
-
-    /** Sets control's value specifically from int (applies to choice etc.). */
-    virtual void SetControlIntValue( wxPGProperty* property,
-                                     wxWindow* ctrl,
-                                     int value ) const;
-
-    /** Inserts item to existing control. Index -1 means appending.
-        Default implementation does nothing. Returns index of item added.
-    */
-    virtual int InsertItem( wxWindow* ctrl,
-                            const wxString& label,
-                            int index ) const;
-
-    /** Deletes item from existing control.
-        Default implementation does nothing.
-    */
-    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
-
-    /** Extra processing when control gains focus. For example, wxTextCtrl
-        based controls should select all text.
-    */
-    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
-
-    /** Returns true if control itself can contain the custom image. Default is
-        to return false.
-    */
-    virtual bool CanContainCustomImage() const;
-
-    //
-    // This member is public so scripting language bindings
-    // wrapper code can access it freely.
-    void*       m_clientData;
-};
-
-
-#define WX_PG_IMPLEMENT_INTERNAL_EDITOR_CLASS(EDITOR,CLASSNAME,BASECLASS) \
-IMPLEMENT_DYNAMIC_CLASS(CLASSNAME, BASECLASS) \
-wxString CLASSNAME::GetName() const \
-{ \
-    return wxS(#EDITOR); \
-} \
-wxPGEditor* wxPGEditor_##EDITOR = NULL;
-
-
-//
-// Following are the built-in editor classes.
-//
-
-class WXDLLIMPEXP_PROPGRID wxPGTextCtrlEditor : public wxPGEditor
-{
-    DECLARE_DYNAMIC_CLASS(wxPGTextCtrlEditor)
-public:
-    wxPGTextCtrlEditor() {}
-    virtual ~wxPGTextCtrlEditor();
-
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-    virtual void UpdateControl( wxPGProperty* property,
-                                wxWindow* ctrl ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxPGProperty* property,
-                          wxWindow* primaryCtrl,
-                          wxEvent& event ) const;
-    virtual bool GetValueFromControl( wxVariant& variant,
-                                      wxPGProperty* property,
-                                      wxWindow* ctrl ) const;
-    virtual void SetValueToUnspecified( wxPGProperty* property,
-                                        wxWindow* ctrl ) const;
-
-    virtual wxString GetName() const;
-
-    //virtual wxPGCellRenderer* GetCellRenderer() const;
-    virtual void SetControlStringValue( wxPGProperty* property,
-                                        wxWindow* ctrl,
-                                        const wxString& txt ) const;
-    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
-
-    // Provided so that, for example, ComboBox editor can use the same code
-    // (multiple inheritance would get way too messy).
-    static bool OnTextCtrlEvent( wxPropertyGrid* propgrid,
-                                 wxPGProperty* property,
-                                 wxWindow* ctrl,
-                                 wxEvent& event );
-
-    static bool GetTextCtrlValueFromControl( wxVariant& variant,
-                                             wxPGProperty* property,
-                                             wxWindow* ctrl );
-
-};
-
-
-class WXDLLIMPEXP_PROPGRID wxPGChoiceEditor : public wxPGEditor
-{
-    DECLARE_DYNAMIC_CLASS(wxPGChoiceEditor)
-public:
-    wxPGChoiceEditor() {}
-    virtual ~wxPGChoiceEditor();
-
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-    virtual void UpdateControl( wxPGProperty* property,
-                                wxWindow* ctrl ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxPGProperty* property,
-                          wxWindow* primaryCtrl,
-                          wxEvent& event ) const;
-    virtual bool GetValueFromControl( wxVariant& variant,
-                                      wxPGProperty* property,
-                                      wxWindow* ctrl ) const;
-    virtual void SetValueToUnspecified( wxPGProperty* property,
-                                        wxWindow* ctrl ) const;
-    virtual wxString GetName() const;
-
-    virtual void SetControlIntValue( wxPGProperty* property,
-                                     wxWindow* ctrl,
-                                     int value ) const;
-    virtual void SetControlStringValue( wxPGProperty* property,
-                                        wxWindow* ctrl,
-                                        const wxString& txt ) const;
-
-    virtual int InsertItem( wxWindow* ctrl,
-                            const wxString& label,
-                            int index ) const;
-    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
-    virtual bool CanContainCustomImage() const;
-
-    // CreateControls calls this with CB_READONLY in extraStyle
-    wxWindow* CreateControlsBase( wxPropertyGrid* propgrid,
-                                  wxPGProperty* property,
-                                  const wxPoint& pos,
-                                  const wxSize& sz,
-                                  long extraStyle ) const;
-
-};
-
-
-class WXDLLIMPEXP_PROPGRID wxPGComboBoxEditor : public wxPGChoiceEditor
-{
-    DECLARE_DYNAMIC_CLASS(wxPGComboBoxEditor)
-public:
-    wxPGComboBoxEditor() {}
-    virtual ~wxPGComboBoxEditor();
-
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-
-    virtual wxString GetName() const;
-
-    virtual void UpdateControl( wxPGProperty* property, wxWindow* ctrl ) const;
-
-    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
-        wxWindow* ctrl, wxEvent& event ) const;
-
-    virtual bool GetValueFromControl( wxVariant& variant,
-                                      wxPGProperty* property,
-                                      wxWindow* ctrl ) const;
-
-    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
-
-};
-
-
-// Exclude classes from being able to be derived from in wxPython bindings
-#ifndef SWIG
-
-class WXDLLIMPEXP_PROPGRID wxPGChoiceAndButtonEditor : public wxPGChoiceEditor
-{
-public:
-    wxPGChoiceAndButtonEditor() {}
-    virtual ~wxPGChoiceAndButtonEditor();
-    virtual wxString GetName() const;
-
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-
-    DECLARE_DYNAMIC_CLASS(wxPGChoiceAndButtonEditor)
-};
-
-class WXDLLIMPEXP_PROPGRID
-wxPGTextCtrlAndButtonEditor : public wxPGTextCtrlEditor
-{
-public:
-    wxPGTextCtrlAndButtonEditor() {}
-    virtual ~wxPGTextCtrlAndButtonEditor();
-    virtual wxString GetName() const;
-
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-
-    DECLARE_DYNAMIC_CLASS(wxPGTextCtrlAndButtonEditor)
-};
-
-#endif  // !SWIG
-
-
-#if wxPG_INCLUDE_CHECKBOX
-
-//
-// Use custom check box code instead of native control
-// for cleaner (ie. more integrated) look.
-//
-class WXDLLIMPEXP_PROPGRID wxPGCheckBoxEditor : public wxPGEditor
-{
-    DECLARE_DYNAMIC_CLASS(wxPGCheckBoxEditor)
-public:
-    wxPGCheckBoxEditor() {}
-    virtual ~wxPGCheckBoxEditor();
-
-    virtual wxString GetName() const;
-    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
-                                          wxPGProperty* property,
-                                          const wxPoint& pos,
-                                          const wxSize& size) const;
-    virtual void UpdateControl( wxPGProperty* property,
-                                wxWindow* ctrl ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxPGProperty* property,
-                          wxWindow* primaryCtrl,
-                          wxEvent& event ) const;
-    virtual bool GetValueFromControl( wxVariant& variant,
-                                      wxPGProperty* property,
-                                      wxWindow* ctrl ) const;
-    virtual void SetValueToUnspecified( wxPGProperty* property,
-                                        wxWindow* ctrl ) const;
-
-    virtual void DrawValue( wxDC& dc,
-                            const wxRect& rect,
-                            wxPGProperty* property,
-                            const wxString& text ) const;
-    //virtual wxPGCellRenderer* GetCellRenderer() const;
-
-    virtual void SetControlIntValue( wxPGProperty* property,
-                                     wxWindow* ctrl,
-                                     int value ) const;
-};
-
-#endif
-
-
-// -----------------------------------------------------------------------
-// Editor class registeration macro (mostly for internal use)
-
-#define wxPGRegisterEditorClass(EDITOR) \
-    if ( wxPGEditor_##EDITOR == NULL ) \
-    { \
-        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( \
-                new wxPG##EDITOR##Editor ); \
-    }
-
-// -----------------------------------------------------------------------
-
-/** @class wxPGEditorDialogAdapter
-
-    Derive a class from this to adapt an existing editor dialog or function to
-    be used when editor button of a property is pushed.
-
-    You only need to derive class and implement DoShowDialog() to create and
-    show the dialog, and finally submit the value returned by the dialog
-    via SetValue().
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPGEditorDialogAdapter : public wxObject
-{
-    DECLARE_ABSTRACT_CLASS(wxPGEditorDialogAdapter)
-public:
-    wxPGEditorDialogAdapter()
-        : wxObject()
-    {
-        m_clientData = NULL;
-    }
-
-    virtual ~wxPGEditorDialogAdapter() { }
-
-    bool ShowDialog( wxPropertyGrid* propGrid, wxPGProperty* property );
-
-    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
-                               wxPGProperty* property ) = 0;
-
-    void SetValue( wxVariant value )
-    {
-        m_value = value;
-    }
-
-    /**
-        This method is typically only used if deriving class from existing
-        adapter with value conversion purposes.
-    */
-    wxVariant& GetValue() { return m_value; }
-
-    //
-    // This member is public so scripting language bindings
-    // wrapper code can access it freely.
-    void*               m_clientData;
-
-private:
-    wxVariant           m_value;
-};
-
-// -----------------------------------------------------------------------
-
-
-/** @class wxPGMultiButton
-
-    This class can be used to have multiple buttons in a property editor.
-    You will need to create a new property editor class, override
-    CreateControls, and have it return wxPGMultiButton instance in
-    wxPGWindowList::SetSecondary().
-*/
-class WXDLLIMPEXP_PROPGRID wxPGMultiButton : public wxWindow
-{
-public:
-    wxPGMultiButton( wxPropertyGrid* pg, const wxSize& sz );
-    virtual ~wxPGMultiButton() {}
-
-    wxWindow* GetButton( unsigned int i ) { return (wxWindow*) m_buttons[i]; }
-    const wxWindow* GetButton( unsigned int i ) const
-        { return (const wxWindow*) m_buttons[i]; }
-
-    /** Utility function to be used in event handlers.
-    */
-    int GetButtonId( unsigned int i ) const { return GetButton(i)->GetId(); }
-
-    /** Returns number of buttons.
-    */
-    unsigned int GetCount() const { return (unsigned int) m_buttons.size(); }
-
-    void Add( const wxString& label, int id = -2 );
-#if wxUSE_BMPBUTTON
-    void Add( const wxBitmap& bitmap, int id = -2 );
-#endif
-
-    wxSize GetPrimarySize() const
-    {
-        return wxSize(m_fullEditorSize.x - m_buttonsWidth, m_fullEditorSize.y);
-    }
-
-    void Finalize( wxPropertyGrid* propGrid, const wxPoint& pos );
-
-protected:
-
-    void DoAddButton( wxWindow* button, const wxSize& sz );
-
-    int GenId( int id ) const;
-
-    wxArrayPtrVoid  m_buttons;
-    wxSize          m_fullEditorSize;
-    int             m_buttonsWidth;
-};
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_EDITORS_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/editors.h
+// Purpose:     wxPropertyGrid editors
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2007-04-14
+// RCS-ID:      $Id: editors.h 61018 2009-06-12 14:01:51Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_EDITORS_H_
+#define _WX_PROPGRID_EDITORS_H_
+
+#if wxUSE_PROPGRID
+
+// -----------------------------------------------------------------------
+// wxPGWindowList contains list of editor windows returned by CreateControls.
+
+class wxPGWindowList
+{
+public:
+    wxPGWindowList()
+    {
+        m_primary = m_secondary = NULL;
+    }
+
+    void SetSecondary( wxWindow* secondary ) { m_secondary = secondary; }
+
+    wxWindow*   m_primary;
+    wxWindow*   m_secondary;
+
+#ifndef SWIG
+    wxPGWindowList( wxWindow* a )
+    {
+        m_primary = a;
+        m_secondary = NULL;
+    };
+    wxPGWindowList( wxWindow* a, wxWindow* b )
+    {
+        m_primary = a;
+        m_secondary = b;
+    };
+#endif
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxPGEditor
+
+    Base class for custom wxPropertyGrid editors.
+
+    @remarks
+    - Names of builtin property editors are: TextCtrl, Choice,
+      ComboBox, CheckBox, TextCtrlAndButton, and ChoiceAndButton. Additional
+      editors include SpinCtrl and DatePickerCtrl, but using them requires
+      calling wxPropertyGrid::RegisterAdditionalEditors() prior use.
+
+    - Pointer to builtin editor is available as wxPGEditor_EditorName
+      (eg. wxPGEditor_TextCtrl).
+
+    - To add new editor you need to register it first using static function
+      wxPropertyGrid::RegisterEditorClass(), with code like this:
+        @code
+            wxPGEditor *editorPointer = wxPropertyGrid::RegisterEditorClass(
+                                            new MyEditorClass(), "MyEditor");
+        @endcode
+      After that, wxPropertyGrid will take ownership of the given object, but
+      you should still store editorPointer somewhere, so you can pass it to
+      wxPGProperty::SetEditor(), or return it from
+      wxPGEditor::DoGetEditorClass().
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPGEditor : public wxObject
+{
+    DECLARE_ABSTRACT_CLASS(wxPGEditor)
+public:
+
+    /** Constructor. */
+    wxPGEditor()
+        : wxObject()
+    {
+        m_clientData = NULL;
+    }
+
+    /** Destructor. */
+    virtual ~wxPGEditor();
+
+    /**
+        Returns pointer to the name of the editor. For example,
+        wxPGEditor_TextCtrl has name "TextCtrl". If you dont' need to access
+        your custom editor by string name, then you do not need to implement
+        this function.
+    */
+    virtual wxString GetName() const;
+
+    /**
+        Instantiates editor controls.
+
+        @param propgrid
+            wxPropertyGrid to which the property belongs (use as parent for
+            control).
+        @param property
+            Property for which this method is called.
+        @param pos
+            Position, inside wxPropertyGrid, to create control(s) to.
+        @param size
+            Initial size for control(s).
+
+        @remarks
+        - Primary control shall use id wxPG_SUBID1, and secondary (button)
+          control shall use wxPG_SUBID2.
+        - Unlike in previous version of wxPropertyGrid, it is no longer
+          necessary to call wxEvtHandler::Connect() for interesting editor
+          events. Instead, all events from control are now automatically
+          forwarded to wxPGEditor::OnEvent() and wxPGProperty::OnEvent().
+    */
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const = 0;
+
+    /** Loads value from property to the control. */
+    virtual void UpdateControl( wxPGProperty* property,
+                                wxWindow* ctrl ) const = 0;
+
+    /**
+        Used to get the renderer to draw the value with when the control is
+        hidden.
+
+        Default implementation returns g_wxPGDefaultRenderer.
+    */
+    //virtual wxPGCellRenderer* GetCellRenderer() const;
+
+    /** Draws value for given property.
+    */
+    virtual void DrawValue( wxDC& dc,
+                            const wxRect& rect,
+                            wxPGProperty* property,
+                            const wxString& text ) const;
+
+    /** Handles events. Returns true if value in control was modified
+        (see wxPGProperty::OnEvent for more information).
+
+        @remarks wxPropertyGrid will automatically unfocus the editor when
+                wxEVT_COMMAND_TEXT_ENTER is received and when it results in
+                property value being modified. This happens regardless of
+                editor type (ie. behavior is same for any wxTextCtrl and
+                wxComboBox based editor).
+    */
+    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
+        wxWindow* wnd_primary, wxEvent& event ) const = 0;
+
+#if !defined(SWIG) || defined(CREATE_VCW)
+    /** Returns value from control, via parameter 'variant'.
+        Usually ends up calling property's StringToValue or IntToValue.
+        Returns true if value was different.
+    */
+    virtual bool GetValueFromControl( wxVariant& variant,
+                                      wxPGProperty* property,
+                                      wxWindow* ctrl ) const;
+#endif
+
+    /** Sets value in control to unspecified. */
+    virtual void SetValueToUnspecified( wxPGProperty* property,
+                                        wxWindow* ctrl ) const = 0;
+
+    /** Sets control's value specifically from string. */
+    virtual void SetControlStringValue( wxPGProperty* property,
+                                        wxWindow* ctrl,
+                                        const wxString& txt ) const;
+
+    /** Sets control's value specifically from int (applies to choice etc.). */
+    virtual void SetControlIntValue( wxPGProperty* property,
+                                     wxWindow* ctrl,
+                                     int value ) const;
+
+    /** Inserts item to existing control. Index -1 means appending.
+        Default implementation does nothing. Returns index of item added.
+    */
+    virtual int InsertItem( wxWindow* ctrl,
+                            const wxString& label,
+                            int index ) const;
+
+    /** Deletes item from existing control.
+        Default implementation does nothing.
+    */
+    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
+
+    /** Extra processing when control gains focus. For example, wxTextCtrl
+        based controls should select all text.
+    */
+    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
+
+    /** Returns true if control itself can contain the custom image. Default is
+        to return false.
+    */
+    virtual bool CanContainCustomImage() const;
+
+    //
+    // This member is public so scripting language bindings
+    // wrapper code can access it freely.
+    void*       m_clientData;
+};
+
+
+#define WX_PG_IMPLEMENT_INTERNAL_EDITOR_CLASS(EDITOR,CLASSNAME,BASECLASS) \
+IMPLEMENT_DYNAMIC_CLASS(CLASSNAME, BASECLASS) \
+wxString CLASSNAME::GetName() const \
+{ \
+    return wxS(#EDITOR); \
+} \
+wxPGEditor* wxPGEditor_##EDITOR = NULL;
+
+
+//
+// Following are the built-in editor classes.
+//
+
+class WXDLLIMPEXP_PROPGRID wxPGTextCtrlEditor : public wxPGEditor
+{
+    DECLARE_DYNAMIC_CLASS(wxPGTextCtrlEditor)
+public:
+    wxPGTextCtrlEditor() {}
+    virtual ~wxPGTextCtrlEditor();
+
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+    virtual void UpdateControl( wxPGProperty* property,
+                                wxWindow* ctrl ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxPGProperty* property,
+                          wxWindow* primaryCtrl,
+                          wxEvent& event ) const;
+    virtual bool GetValueFromControl( wxVariant& variant,
+                                      wxPGProperty* property,
+                                      wxWindow* ctrl ) const;
+    virtual void SetValueToUnspecified( wxPGProperty* property,
+                                        wxWindow* ctrl ) const;
+
+    virtual wxString GetName() const;
+
+    //virtual wxPGCellRenderer* GetCellRenderer() const;
+    virtual void SetControlStringValue( wxPGProperty* property,
+                                        wxWindow* ctrl,
+                                        const wxString& txt ) const;
+    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
+
+    // Provided so that, for example, ComboBox editor can use the same code
+    // (multiple inheritance would get way too messy).
+    static bool OnTextCtrlEvent( wxPropertyGrid* propgrid,
+                                 wxPGProperty* property,
+                                 wxWindow* ctrl,
+                                 wxEvent& event );
+
+    static bool GetTextCtrlValueFromControl( wxVariant& variant,
+                                             wxPGProperty* property,
+                                             wxWindow* ctrl );
+
+};
+
+
+class WXDLLIMPEXP_PROPGRID wxPGChoiceEditor : public wxPGEditor
+{
+    DECLARE_DYNAMIC_CLASS(wxPGChoiceEditor)
+public:
+    wxPGChoiceEditor() {}
+    virtual ~wxPGChoiceEditor();
+
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+    virtual void UpdateControl( wxPGProperty* property,
+                                wxWindow* ctrl ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxPGProperty* property,
+                          wxWindow* primaryCtrl,
+                          wxEvent& event ) const;
+    virtual bool GetValueFromControl( wxVariant& variant,
+                                      wxPGProperty* property,
+                                      wxWindow* ctrl ) const;
+    virtual void SetValueToUnspecified( wxPGProperty* property,
+                                        wxWindow* ctrl ) const;
+    virtual wxString GetName() const;
+
+    virtual void SetControlIntValue( wxPGProperty* property,
+                                     wxWindow* ctrl,
+                                     int value ) const;
+    virtual void SetControlStringValue( wxPGProperty* property,
+                                        wxWindow* ctrl,
+                                        const wxString& txt ) const;
+
+    virtual int InsertItem( wxWindow* ctrl,
+                            const wxString& label,
+                            int index ) const;
+    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
+    virtual bool CanContainCustomImage() const;
+
+    // CreateControls calls this with CB_READONLY in extraStyle
+    wxWindow* CreateControlsBase( wxPropertyGrid* propgrid,
+                                  wxPGProperty* property,
+                                  const wxPoint& pos,
+                                  const wxSize& sz,
+                                  long extraStyle ) const;
+
+};
+
+
+class WXDLLIMPEXP_PROPGRID wxPGComboBoxEditor : public wxPGChoiceEditor
+{
+    DECLARE_DYNAMIC_CLASS(wxPGComboBoxEditor)
+public:
+    wxPGComboBoxEditor() {}
+    virtual ~wxPGComboBoxEditor();
+
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+
+    virtual wxString GetName() const;
+
+    virtual void UpdateControl( wxPGProperty* property, wxWindow* ctrl ) const;
+
+    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
+        wxWindow* ctrl, wxEvent& event ) const;
+
+    virtual bool GetValueFromControl( wxVariant& variant,
+                                      wxPGProperty* property,
+                                      wxWindow* ctrl ) const;
+
+    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
+
+};
+
+
+// Exclude classes from being able to be derived from in wxPython bindings
+#ifndef SWIG
+
+class WXDLLIMPEXP_PROPGRID wxPGChoiceAndButtonEditor : public wxPGChoiceEditor
+{
+public:
+    wxPGChoiceAndButtonEditor() {}
+    virtual ~wxPGChoiceAndButtonEditor();
+    virtual wxString GetName() const;
+
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+
+    DECLARE_DYNAMIC_CLASS(wxPGChoiceAndButtonEditor)
+};
+
+class WXDLLIMPEXP_PROPGRID
+wxPGTextCtrlAndButtonEditor : public wxPGTextCtrlEditor
+{
+public:
+    wxPGTextCtrlAndButtonEditor() {}
+    virtual ~wxPGTextCtrlAndButtonEditor();
+    virtual wxString GetName() const;
+
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+
+    DECLARE_DYNAMIC_CLASS(wxPGTextCtrlAndButtonEditor)
+};
+
+#endif  // !SWIG
+
+
+#if wxPG_INCLUDE_CHECKBOX
+
+//
+// Use custom check box code instead of native control
+// for cleaner (ie. more integrated) look.
+//
+class WXDLLIMPEXP_PROPGRID wxPGCheckBoxEditor : public wxPGEditor
+{
+    DECLARE_DYNAMIC_CLASS(wxPGCheckBoxEditor)
+public:
+    wxPGCheckBoxEditor() {}
+    virtual ~wxPGCheckBoxEditor();
+
+    virtual wxString GetName() const;
+    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
+                                          wxPGProperty* property,
+                                          const wxPoint& pos,
+                                          const wxSize& size) const;
+    virtual void UpdateControl( wxPGProperty* property,
+                                wxWindow* ctrl ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxPGProperty* property,
+                          wxWindow* primaryCtrl,
+                          wxEvent& event ) const;
+    virtual bool GetValueFromControl( wxVariant& variant,
+                                      wxPGProperty* property,
+                                      wxWindow* ctrl ) const;
+    virtual void SetValueToUnspecified( wxPGProperty* property,
+                                        wxWindow* ctrl ) const;
+
+    virtual void DrawValue( wxDC& dc,
+                            const wxRect& rect,
+                            wxPGProperty* property,
+                            const wxString& text ) const;
+    //virtual wxPGCellRenderer* GetCellRenderer() const;
+
+    virtual void SetControlIntValue( wxPGProperty* property,
+                                     wxWindow* ctrl,
+                                     int value ) const;
+};
+
+#endif
+
+
+// -----------------------------------------------------------------------
+// Editor class registeration macro (mostly for internal use)
+
+#define wxPGRegisterEditorClass(EDITOR) \
+    if ( wxPGEditor_##EDITOR == NULL ) \
+    { \
+        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( \
+                new wxPG##EDITOR##Editor ); \
+    }
+
+// -----------------------------------------------------------------------
+
+/** @class wxPGEditorDialogAdapter
+
+    Derive a class from this to adapt an existing editor dialog or function to
+    be used when editor button of a property is pushed.
+
+    You only need to derive class and implement DoShowDialog() to create and
+    show the dialog, and finally submit the value returned by the dialog
+    via SetValue().
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPGEditorDialogAdapter : public wxObject
+{
+    DECLARE_ABSTRACT_CLASS(wxPGEditorDialogAdapter)
+public:
+    wxPGEditorDialogAdapter()
+        : wxObject()
+    {
+        m_clientData = NULL;
+    }
+
+    virtual ~wxPGEditorDialogAdapter() { }
+
+    bool ShowDialog( wxPropertyGrid* propGrid, wxPGProperty* property );
+
+    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
+                               wxPGProperty* property ) = 0;
+
+    void SetValue( wxVariant value )
+    {
+        m_value = value;
+    }
+
+    /**
+        This method is typically only used if deriving class from existing
+        adapter with value conversion purposes.
+    */
+    wxVariant& GetValue() { return m_value; }
+
+    //
+    // This member is public so scripting language bindings
+    // wrapper code can access it freely.
+    void*               m_clientData;
+
+private:
+    wxVariant           m_value;
+};
+
+// -----------------------------------------------------------------------
+
+
+/** @class wxPGMultiButton
+
+    This class can be used to have multiple buttons in a property editor.
+    You will need to create a new property editor class, override
+    CreateControls, and have it return wxPGMultiButton instance in
+    wxPGWindowList::SetSecondary().
+*/
+class WXDLLIMPEXP_PROPGRID wxPGMultiButton : public wxWindow
+{
+public:
+    wxPGMultiButton( wxPropertyGrid* pg, const wxSize& sz );
+    virtual ~wxPGMultiButton() {}
+
+    wxWindow* GetButton( unsigned int i ) { return (wxWindow*) m_buttons[i]; }
+    const wxWindow* GetButton( unsigned int i ) const
+        { return (const wxWindow*) m_buttons[i]; }
+
+    /** Utility function to be used in event handlers.
+    */
+    int GetButtonId( unsigned int i ) const { return GetButton(i)->GetId(); }
+
+    /** Returns number of buttons.
+    */
+    unsigned int GetCount() const { return (unsigned int) m_buttons.size(); }
+
+    void Add( const wxString& label, int id = -2 );
+#if wxUSE_BMPBUTTON
+    void Add( const wxBitmap& bitmap, int id = -2 );
+#endif
+
+    wxSize GetPrimarySize() const
+    {
+        return wxSize(m_fullEditorSize.x - m_buttonsWidth, m_fullEditorSize.y);
+    }
+
+    void Finalize( wxPropertyGrid* propGrid, const wxPoint& pos );
+
+protected:
+
+    void DoAddButton( wxWindow* button, const wxSize& sz );
+
+    int GenId( int id ) const;
+
+    wxArrayPtrVoid  m_buttons;
+    wxSize          m_fullEditorSize;
+    int             m_buttonsWidth;
+};
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_EDITORS_H_
Index: manager.h
===================================================================
--- manager.h	(revision 102)
+++ manager.h	(working copy)
@@ -1,718 +1,718 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/manager.h
-// Purpose:     wxPropertyGridManager
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2005-01-14
-// RCS-ID:      $Id: manager.h 60793 2009-05-29 16:04:22Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_MANAGER_H_
-#define _WX_PROPGRID_MANAGER_H_
-
-#if wxUSE_PROPGRID
-
-#include "wx/propgrid/propgrid.h"
-
-#include "wx/dcclient.h"
-#include "wx/scrolwin.h"
-#include "wx/toolbar.h"
-#include "wx/stattext.h"
-#include "wx/button.h"
-#include "wx/textctrl.h"
-#include "wx/dialog.h"
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-extern WXDLLIMPEXP_DATA_PROPGRID(const char) wxPropertyGridManagerNameStr[];
-#endif
-
-/** @class wxPropertyGridPage
-
-    Holder of property grid page information. You can subclass this and
-    give instance in wxPropertyGridManager::AddPage. It inherits from
-    wxEvtHandler and can be used to process events specific to this
-    page (id of events will still be same as manager's). If you don't
-    want to use it to process all events of the page, you need to
-    return false in the derived wxPropertyGridPage::IsHandlingAllEvents.
-
-    Please note that wxPropertyGridPage lacks many non-const property
-    manipulation functions found in wxPropertyGridManager. Please use
-    parent manager (m_manager member variable) when needed.
-
-    Please note that most member functions are inherited and as such not
-    documented on this page. This means you will probably also want to read
-    wxPropertyGridInterface class reference.
-
-    @section propgridpage_event_handling Event Handling
-
-    wxPropertyGridPage receives events emitted by its wxPropertyGridManager, but
-    only those events that are specific to that page. If
-    wxPropertyGridPage::IsHandlingAllEvents returns false, then unhandled
-    events are sent to the manager's parent, as usual.
-
-    See @ref propgrid_event_handling "wxPropertyGrid Event Handling"
-    for more information.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPropertyGridPage : public wxEvtHandler,
-                                                public wxPropertyGridInterface,
-                                                public wxPropertyGridPageState
-{
-    friend class wxPropertyGridManager;
-#ifndef SWIG
-    DECLARE_CLASS(wxPropertyGridPage)
-#endif
-public:
-
-    wxPropertyGridPage();
-    virtual ~wxPropertyGridPage();
-
-    /** Deletes all properties on page.
-    */
-    virtual void Clear();
-
-    /**
-        Reduces column sizes to minimum possible that contents are still
-        visibly (naturally some margin space will be applied as well).
-
-        @return
-        Minimum size for the page to still display everything.
-
-        @remarks
-        This function only works properly if size of containing grid was
-        already fairly large.
-
-        Note that you can also get calculated column widths by calling
-        GetColumnWidth() immediately after this function returns.
-    */
-    wxSize FitColumns();
-
-    /** Returns page index in manager;
-    */
-    inline int GetIndex() const;
-
-    /** Returns x-coordinate position of splitter on a page.
-    */
-    int GetSplitterPosition( int col = 0 ) const
-        { return GetStatePtr()->DoGetSplitterPosition(col); }
-
-    /** Returns "root property". It does not have name, etc. and it is not
-        visible. It is only useful for accessing its children.
-    */
-    wxPGProperty* GetRoot() const { return GetStatePtr()->DoGetRoot(); }
-
-    /** Return pointer to contained property grid state.
-    */
-    wxPropertyGridPageState* GetStatePtr()
-    {
-        return this;
-    }
-
-    /** Return pointer to contained property grid state.
-    */
-    const wxPropertyGridPageState* GetStatePtr() const
-    {
-        return this;
-    }
-
-    /**
-        Returns id of the tool bar item that represents this page on
-        wxPropertyGridManager's wxToolBar.
-    */
-    int GetToolId() const
-    {
-        return m_id;
-    }
-
-    /** Do any member initialization in this method.
-        @remarks
-        - Called every time the page is added into a manager.
-        - You can add properties to the page here.
-    */
-    virtual void Init() {}
-
-    /** Return false here to indicate unhandled events should be
-        propagated to manager's parent, as normal.
-    */
-    virtual bool IsHandlingAllEvents() const { return true; }
-
-    /** Called every time page is about to be shown.
-        Useful, for instance, creating properties just-in-time.
-    */
-    virtual void OnShow();
-
-    virtual void RefreshProperty( wxPGProperty* p );
-
-    /** Sets splitter position on page.
-        @remarks
-        Splitter position cannot exceed grid size, and therefore setting it
-        during form creation may fail as initial grid size is often smaller
-        than desired splitter position, especially when sizers are being used.
-    */
-    void SetSplitterPosition( int splitterPos, int col = 0 );
-
-protected:
-
-    /** Propagate to other pages.
-    */
-    virtual void DoSetSplitterPosition( int pos,
-                                        int splitterColumn = 0,
-                                        bool allPages = false,
-                                        bool fromAutoCenter = false );
-
-    /** Page label (may be referred as name in some parts of documentation).
-        Can be set in constructor, or passed in
-        wxPropertyGridManager::AddPage(), but *not* in both.
-    */
-    wxString                m_label;
-
-#ifndef SWIG
-
-    //virtual bool ProcessEvent( wxEvent& event );
-
-    wxPropertyGridManager*  m_manager;
-
-    int                     m_id;  // toolbar index
-
-private:
-    bool                    m_isDefault; // is this base page object?
-
-private:
-    DECLARE_EVENT_TABLE()
-#endif
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxPropertyGridManager
-
-    wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid,
-    which can optionally have toolbar for mode and page selection, and help
-    text box.
-    Use window flags to select components to include.
-
-    @section propgridmanager_window_styles_ Window Styles
-
-    See @ref propgrid_window_styles.
-
-    @section propgridmanager_event_handling Event Handling
-
-    See @ref propgrid_event_handling "wxPropertyGrid Event Handling"
-    for more information.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID
-    wxPropertyGridManager : public wxPanel, public wxPropertyGridInterface
-{
-    DECLARE_CLASS(wxPropertyGridManager)
-    friend class wxPropertyGridPage;
-public:
-
-#ifndef SWIG
-    /**
-        Two step constructor.
-        Call Create when this constructor is called to build up the
-        wxPropertyGridManager.
-    */
-    wxPropertyGridManager();
-#endif
-
-    /** The default constructor. The styles to be used are styles valid for
-        the wxWindow.
-        @see @link wndflags Additional Window Styles@endlink
-    */
-    wxPropertyGridManager( wxWindow *parent, wxWindowID id = wxID_ANY,
-                           const wxPoint& pos = wxDefaultPosition,
-                           const wxSize& size = wxDefaultSize,
-                           long style = wxPGMAN_DEFAULT_STYLE,
-                           const wxString& name = wxPropertyGridManagerNameStr );
-
-    /** Destructor */
-    virtual ~wxPropertyGridManager();
-
-    /** Creates new property page. Note that the first page is not created
-        automatically.
-        @param label
-        A label for the page. This may be shown as a toolbar tooltip etc.
-        @param bmp
-        Bitmap image for toolbar. If wxNullBitmap is used, then a built-in
-        default image is used.
-        @param pageObj
-        wxPropertyGridPage instance. Manager will take ownership of this object.
-        NULL indicates that a default page instance should be created.
-
-        @return
-        Returns pointer to created page.
-
-        @remarks
-        If toolbar is used, it is highly recommended that the pages are
-        added when the toolbar is not turned off using window style flag
-        switching.
-    */
-    wxPropertyGridPage* AddPage( const wxString& label = wxEmptyString,
-                                 const wxBitmap& bmp = wxPG_NULL_BITMAP,
-                                 wxPropertyGridPage* pageObj = NULL )
-    {
-        return InsertPage(-1, label, bmp, pageObj);
-    }
-
-    /** Deletes all all properties and all pages.
-    */
-    virtual void Clear();
-
-    /** Deletes all properties on given page.
-    */
-    void ClearPage( int page );
-
-    /** Forces updating the value of property from the editor control.
-        Returns true if DoPropertyChanged was actually called.
-    */
-    bool CommitChangesFromEditor( wxUint32 flags = 0 )
-    {
-        return m_pPropGrid->CommitChangesFromEditor(flags);
-    }
-
-    /**
-        Two step creation.
-        Whenever the control is created without any parameters, use Create to
-        actually create it. Don't access the control's public methods before
-        this is called.
-        @see @link wndflags Additional Window Styles@endlink
-    */
-    bool Create( wxWindow *parent, wxWindowID id = wxID_ANY,
-                 const wxPoint& pos = wxDefaultPosition,
-                 const wxSize& size = wxDefaultSize,
-                 long style = wxPGMAN_DEFAULT_STYLE,
-                 const wxString& name = wxPropertyGridManagerNameStr );
-
-    /**
-        Enables or disables (shows/hides) categories according to parameter
-        enable.
-
-        WARNING: Not tested properly, use at your own risk.
-    */
-    bool EnableCategories( bool enable )
-    {
-        long fl = m_windowStyle | wxPG_HIDE_CATEGORIES;
-        if ( enable ) fl = m_windowStyle & ~(wxPG_HIDE_CATEGORIES);
-        SetWindowStyleFlag(fl);
-        return true;
-    }
-
-    /** Selects page, scrolls and/or expands items to ensure that the
-        given item is visible. Returns true if something was actually done.
-    */
-    bool EnsureVisible( wxPGPropArg id );
-
-    /** Returns number of columns on given page. By the default,
-        returns number of columns on current page. */
-    int GetColumnCount( int page = -1 ) const;
-
-    /** Returns height of the description text box. */
-    int GetDescBoxHeight() const;
-
-    /** Returns pointer to the contained wxPropertyGrid. This does not change
-        after wxPropertyGridManager has been created, so you can safely obtain
-        pointer once and use it for the entire lifetime of the instance.
-    */
-    wxPropertyGrid* GetGrid()
-    {
-        wxASSERT(m_pPropGrid);
-        return m_pPropGrid;
-    };
-
-    const wxPropertyGrid* GetGrid() const
-    {
-        wxASSERT(m_pPropGrid);
-        return (const wxPropertyGrid*)m_pPropGrid;
-    };
-
-    /** Returns iterator class instance.
-        @remarks
-        Calling this method in wxPropertyGridManager causes run-time assertion
-        failure. Please only iterate through individual pages or use
-        CreateVIterator().
-    */
-    wxPropertyGridIterator GetIterator( int flags = wxPG_ITERATE_DEFAULT,
-                                        wxPGProperty* firstProp = NULL )
-    {
-        wxFAIL_MSG( "Please only iterate through individual pages "
-                    "or use CreateVIterator()" );
-        return wxPropertyGridInterface::GetIterator( flags, firstProp );
-    }
-
-    wxPropertyGridConstIterator
-    GetIterator(int flags = wxPG_ITERATE_DEFAULT,
-                wxPGProperty* firstProp = NULL) const
-    {
-        wxFAIL_MSG( "Please only iterate through individual pages "
-                    " or use CreateVIterator()" );
-        return wxPropertyGridInterface::GetIterator( flags, firstProp );
-    }
-
-    /** Returns iterator class instance.
-        @remarks
-        Calling this method in wxPropertyGridManager causes run-time assertion
-        failure. Please only iterate through individual pages or use
-        CreateVIterator().
-    */
-    wxPropertyGridIterator GetIterator( int flags, int startPos )
-    {
-        wxFAIL_MSG( "Please only iterate through individual pages "
-                    "or use CreateVIterator()" );
-
-        return wxPropertyGridInterface::GetIterator( flags, startPos );
-    }
-
-    wxPropertyGridConstIterator GetIterator( int flags, int startPos ) const
-    {
-        wxFAIL_MSG( "Please only iterate through individual pages "
-                    "or use CreateVIterator()" );
-        return wxPropertyGridInterface::GetIterator( flags, startPos );
-    }
-
-    /** Similar to GetIterator, but instead returns wxPGVIterator instance,
-        which can be useful for forward-iterating through arbitrary property
-        containers.
-    */
-    virtual wxPGVIterator GetVIterator( int flags ) const;
-
-    /** Returns currently selected page.
-    */
-    wxPropertyGridPage* GetCurrentPage() const
-    {
-        return GetPage(m_selPage);
-    }
-
-    /** Returns page object for given page index.
-    */
-    wxPropertyGridPage* GetPage( unsigned int ind ) const
-    {
-        return m_arrPages[ind];
-    }
-
-    /** Returns page object for given page name.
-    */
-    wxPropertyGridPage* GetPage( const wxString& name ) const
-    {
-        return GetPage(GetPageByName(name));
-    }
-
-    /**
-        Returns index for a page name.
-
-        If no match is found, wxNOT_FOUND is returned.
-     */
-    int GetPageByName( const wxString& name ) const;
-
-    /** Returns index for a relevant propertygrid state.
-
-        If no match is found, wxNOT_FOUND is returned.
-    */
-    int GetPageByState( const wxPropertyGridPageState* pstate ) const;
-
-protected:
-    /** Returns wxPropertyGridPageState of given page, current page's for -1.
-    */
-    virtual wxPropertyGridPageState* GetPageState( int page ) const;
-
-public:
-    /** Returns number of managed pages. */
-    size_t GetPageCount() const;
-
-    /** Returns name of given page. */
-    const wxString& GetPageName( int index ) const;
-
-    /** Returns "root property" of the given page. It does not have name, etc.
-        and it is not visible. It is only useful for accessing its children.
-    */
-    wxPGProperty* GetPageRoot( int index ) const;
-
-    /** Returns index to currently selected page. */
-    int GetSelectedPage() const { return m_selPage; }
-
-    /** Alias for GetSelection(). */
-    wxPGProperty* GetSelectedProperty() const
-    {
-        return GetSelection();
-    }
-
-    /** Shortcut for GetGrid()->GetSelection(). */
-    wxPGProperty* GetSelection() const
-    {
-        return m_pPropGrid->GetSelection();
-    }
-
-    /** Returns a pointer to the toolbar currently associated with the
-        wxPropertyGridManager (if any). */
-    wxToolBar* GetToolBar() const { return m_pToolbar; }
-
-    /** Creates new property page. Note that the first page is not created
-        automatically.
-        @param index
-        Add to this position. -1 will add as the last item.
-        @param label
-        A label for the page. This may be shown as a toolbar tooltip etc.
-        @param bmp
-        Bitmap image for toolbar. If wxNullBitmap is used, then a built-in
-        default image is used.
-        @param pageObj
-        wxPropertyGridPage instance. Manager will take ownership of this object.
-        If NULL, default page object is constructed.
-
-        @return
-        Returns pointer to created page.
-    */
-    virtual wxPropertyGridPage* InsertPage( int index,
-                                            const wxString& label,
-                                            const wxBitmap& bmp = wxNullBitmap,
-                                            wxPropertyGridPage* pageObj = NULL );
-
-    /**
-        Returns true if any property on any page has been modified by the user.
-    */
-    bool IsAnyModified() const;
-
-    /**
-        Returns true if updating is frozen (ie Freeze() called but not yet
-        Thaw() ).
-     */
-    bool IsFrozen() const { return m_pPropGrid->m_frozen > 0; }
-
-    /**
-        Returns true if any property on given page has been modified by the
-        user.
-     */
-    bool IsPageModified( size_t index ) const;
-
-    virtual void Refresh( bool eraseBackground = true,
-                          const wxRect* rect = (const wxRect*) NULL );
-
-    /** Removes a page.
-        @return
-        Returns false if it was not possible to remove page in question.
-    */
-    virtual bool RemovePage( int page );
-
-    /** Select and displays a given page.
-
-        @param index
-            Index of page being seleced. Can be -1 to select nothing.
-    */
-    void SelectPage( int index );
-
-    /** Select and displays a given page (by label). */
-    void SelectPage( const wxString& label )
-    {
-        int index = GetPageByName(label);
-        wxCHECK_RET( index >= 0, wxT("No page with such name") );
-        SelectPage( index );
-    }
-
-    /** Select and displays a given page. */
-    void SelectPage( wxPropertyGridPage* ptr )
-    {
-        SelectPage( GetPageByState(ptr) );
-    }
-
-    /** Select a property. */
-    bool SelectProperty( wxPGPropArg id, bool focus = false )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return p->GetParentState()->DoSelectProperty(p, focus);
-    }
-
-    /** Sets number of columns on given page (default is current page).
-    */
-    void SetColumnCount( int colCount, int page = -1 );
-
-    /** Sets label and text in description box.
-    */
-    void SetDescription( const wxString& label, const wxString& content );
-
-    /** Sets y coordinate of the description box splitter. */
-    void SetDescBoxHeight( int ht, bool refresh = true );
-
-    /** Moves splitter as left as possible, while still allowing all
-        labels to be shown in full.
-        @param subProps
-        If false, will still allow sub-properties (ie. properties which
-        parent is not root or category) to be cropped.
-        @param allPages
-        If true, takes labels on all pages into account.
-    */
-    void SetSplitterLeft( bool subProps = false, bool allPages = true );
-
-    /** Sets splitter position on individual page. */
-    void SetPageSplitterPosition( int page, int pos, int column = 0 )
-    {
-        GetPage(page)->DoSetSplitterPosition( pos, column );
-    }
-
-    /** Sets splitter position for all pages.
-        @remarks
-        Splitter position cannot exceed grid size, and therefore setting it
-        during form creation may fail as initial grid size is often smaller
-        than desired splitter position, especially when sizers are being used.
-    */
-    void SetSplitterPosition( int pos, int column = 0 );
-
-protected:
-
-    //
-    // Subclassing helpers
-    //
-
-    /**
-        Creates property grid for the manager. Reimplement in derived class to
-        use subclassed wxPropertyGrid. However, if you you do this then you
-        must also use the two-step construction (ie. default constructor and
-        Create() instead of constructor with arguments) when creating the
-        manager.
-    */
-    virtual wxPropertyGrid* CreatePropertyGrid() const;
-
-public:
-    virtual void RefreshProperty( wxPGProperty* p );
-
-    //
-    // Overridden functions - no documentation required.
-    //
-
-    void SetId( wxWindowID winid );
-
-    virtual void Freeze();
-    virtual void Thaw();
-    virtual void SetExtraStyle ( long exStyle );
-    virtual bool SetFont ( const wxFont& font );
-    virtual void SetWindowStyleFlag ( long style );
-
-protected:
-    virtual wxSize DoGetBestSize() const;
-
-public:
-
-#ifndef SWIG
-
-    //
-    // Event handlers
-    //
-    void OnMouseMove( wxMouseEvent &event );
-    void OnMouseClick( wxMouseEvent &event );
-    void OnMouseUp( wxMouseEvent &event );
-    void OnMouseEntry( wxMouseEvent &event );
-
-    void OnPaint( wxPaintEvent &event );
-
-    void OnToolbarClick( wxCommandEvent &event );
-    void OnResize( wxSizeEvent& event );
-    void OnPropertyGridSelect( wxPropertyGridEvent& event );
-
-protected:
-
-    wxPropertyGrid* m_pPropGrid;
-
-    wxVector<wxPropertyGridPage*>   m_arrPages;
-
-#if wxUSE_TOOLBAR
-    wxToolBar*      m_pToolbar;
-#endif
-    wxStaticText*   m_pTxtHelpCaption;
-    wxStaticText*   m_pTxtHelpContent;
-
-    wxPropertyGridPage*     m_emptyPage;
-
-    long            m_iFlags;
-
-    // Selected page index.
-    int             m_selPage;
-
-    int             m_width;
-
-    int             m_height;
-
-    int             m_extraHeight;
-
-    int             m_splitterY;
-
-    int             m_splitterHeight;
-
-    int             m_nextTbInd;
-
-    int             m_dragOffset;
-
-    wxCursor        m_cursorSizeNS;
-
-    int             m_nextDescBoxSize;
-
-    wxWindowID      m_baseId;
-
-    unsigned char   m_dragStatus;
-
-    unsigned char   m_onSplitter;
-
-    virtual wxPGProperty* DoGetPropertyByName( const wxString& name ) const;
-
-    /** Select and displays a given page. */
-    virtual bool DoSelectPage( int index );
-
-    // Sets some members to defaults.
-    void Init1();
-
-    // Initializes some members.
-    void Init2( int style );
-
-/*#ifdef __WXMSW__
-    virtual WXDWORD MSWGetStyle(long flags, WXDWORD *exstyle) const;
-#endif*/
-
-    virtual bool ProcessEvent( wxEvent& event );
-
-    /** Recalculates new positions for components, according to the
-        given size.
-    */
-    void RecalculatePositions( int width, int height );
-
-    /** (Re)creates/destroys controls, according to the window style bits. */
-    void RecreateControls();
-
-    void UpdateDescriptionBox( int new_splittery, int new_width, int new_height );
-
-    void RepaintDescBoxDecorations( wxDC& dc,
-                                    int newSplitterY,
-                                    int newWidth,
-                                    int newHeight );
-
-    void SetDescribedProperty( wxPGProperty* p );
-
-    // Reimplement these to handle "descboxheight" state item
-    virtual bool SetEditableStateItem( const wxString& name, wxVariant value );
-    virtual wxVariant GetEditableStateItem( const wxString& name ) const;
-
-private:
-    DECLARE_EVENT_TABLE()
-#endif // #ifndef SWIG
-};
-
-// -----------------------------------------------------------------------
-
-inline int wxPropertyGridPage::GetIndex() const
-{
-    if ( !m_manager )
-        return wxNOT_FOUND;
-    return m_manager->GetPageByState(this);
-}
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_MANAGER_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/manager.h
+// Purpose:     wxPropertyGridManager
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2005-01-14
+// RCS-ID:      $Id: manager.h 60793 2009-05-29 16:04:22Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_MANAGER_H_
+#define _WX_PROPGRID_MANAGER_H_
+
+#if wxUSE_PROPGRID
+
+#include "wx/propgrid/propgrid.h"
+
+#include "wx/dcclient.h"
+#include "wx/scrolwin.h"
+#include "wx/toolbar.h"
+#include "wx/stattext.h"
+#include "wx/button.h"
+#include "wx/textctrl.h"
+#include "wx/dialog.h"
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+extern WXDLLIMPEXP_DATA_PROPGRID(const char) wxPropertyGridManagerNameStr[];
+#endif
+
+/** @class wxPropertyGridPage
+
+    Holder of property grid page information. You can subclass this and
+    give instance in wxPropertyGridManager::AddPage. It inherits from
+    wxEvtHandler and can be used to process events specific to this
+    page (id of events will still be same as manager's). If you don't
+    want to use it to process all events of the page, you need to
+    return false in the derived wxPropertyGridPage::IsHandlingAllEvents.
+
+    Please note that wxPropertyGridPage lacks many non-const property
+    manipulation functions found in wxPropertyGridManager. Please use
+    parent manager (m_manager member variable) when needed.
+
+    Please note that most member functions are inherited and as such not
+    documented on this page. This means you will probably also want to read
+    wxPropertyGridInterface class reference.
+
+    @section propgridpage_event_handling Event Handling
+
+    wxPropertyGridPage receives events emitted by its wxPropertyGridManager, but
+    only those events that are specific to that page. If
+    wxPropertyGridPage::IsHandlingAllEvents returns false, then unhandled
+    events are sent to the manager's parent, as usual.
+
+    See @ref propgrid_event_handling "wxPropertyGrid Event Handling"
+    for more information.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPropertyGridPage : public wxEvtHandler,
+                                                public wxPropertyGridInterface,
+                                                public wxPropertyGridPageState
+{
+    friend class wxPropertyGridManager;
+#ifndef SWIG
+    DECLARE_CLASS(wxPropertyGridPage)
+#endif
+public:
+
+    wxPropertyGridPage();
+    virtual ~wxPropertyGridPage();
+
+    /** Deletes all properties on page.
+    */
+    virtual void Clear();
+
+    /**
+        Reduces column sizes to minimum possible that contents are still
+        visibly (naturally some margin space will be applied as well).
+
+        @return
+        Minimum size for the page to still display everything.
+
+        @remarks
+        This function only works properly if size of containing grid was
+        already fairly large.
+
+        Note that you can also get calculated column widths by calling
+        GetColumnWidth() immediately after this function returns.
+    */
+    wxSize FitColumns();
+
+    /** Returns page index in manager;
+    */
+    inline int GetIndex() const;
+
+    /** Returns x-coordinate position of splitter on a page.
+    */
+    int GetSplitterPosition( int col = 0 ) const
+        { return GetStatePtr()->DoGetSplitterPosition(col); }
+
+    /** Returns "root property". It does not have name, etc. and it is not
+        visible. It is only useful for accessing its children.
+    */
+    wxPGProperty* GetRoot() const { return GetStatePtr()->DoGetRoot(); }
+
+    /** Return pointer to contained property grid state.
+    */
+    wxPropertyGridPageState* GetStatePtr()
+    {
+        return this;
+    }
+
+    /** Return pointer to contained property grid state.
+    */
+    const wxPropertyGridPageState* GetStatePtr() const
+    {
+        return this;
+    }
+
+    /**
+        Returns id of the tool bar item that represents this page on
+        wxPropertyGridManager's wxToolBar.
+    */
+    int GetToolId() const
+    {
+        return m_id;
+    }
+
+    /** Do any member initialization in this method.
+        @remarks
+        - Called every time the page is added into a manager.
+        - You can add properties to the page here.
+    */
+    virtual void Init() {}
+
+    /** Return false here to indicate unhandled events should be
+        propagated to manager's parent, as normal.
+    */
+    virtual bool IsHandlingAllEvents() const { return true; }
+
+    /** Called every time page is about to be shown.
+        Useful, for instance, creating properties just-in-time.
+    */
+    virtual void OnShow();
+
+    virtual void RefreshProperty( wxPGProperty* p );
+
+    /** Sets splitter position on page.
+        @remarks
+        Splitter position cannot exceed grid size, and therefore setting it
+        during form creation may fail as initial grid size is often smaller
+        than desired splitter position, especially when sizers are being used.
+    */
+    void SetSplitterPosition( int splitterPos, int col = 0 );
+
+protected:
+
+    /** Propagate to other pages.
+    */
+    virtual void DoSetSplitterPosition( int pos,
+                                        int splitterColumn = 0,
+                                        bool allPages = false,
+                                        bool fromAutoCenter = false );
+
+    /** Page label (may be referred as name in some parts of documentation).
+        Can be set in constructor, or passed in
+        wxPropertyGridManager::AddPage(), but *not* in both.
+    */
+    wxString                m_label;
+
+#ifndef SWIG
+
+    //virtual bool ProcessEvent( wxEvent& event );
+
+    wxPropertyGridManager*  m_manager;
+
+    int                     m_id;  // toolbar index
+
+private:
+    bool                    m_isDefault; // is this base page object?
+
+private:
+    DECLARE_EVENT_TABLE()
+#endif
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxPropertyGridManager
+
+    wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid,
+    which can optionally have toolbar for mode and page selection, and help
+    text box.
+    Use window flags to select components to include.
+
+    @section propgridmanager_window_styles_ Window Styles
+
+    See @ref propgrid_window_styles.
+
+    @section propgridmanager_event_handling Event Handling
+
+    See @ref propgrid_event_handling "wxPropertyGrid Event Handling"
+    for more information.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID
+    wxPropertyGridManager : public wxPanel, public wxPropertyGridInterface
+{
+    DECLARE_CLASS(wxPropertyGridManager)
+    friend class wxPropertyGridPage;
+public:
+
+#ifndef SWIG
+    /**
+        Two step constructor.
+        Call Create when this constructor is called to build up the
+        wxPropertyGridManager.
+    */
+    wxPropertyGridManager();
+#endif
+
+    /** The default constructor. The styles to be used are styles valid for
+        the wxWindow.
+        @see @link wndflags Additional Window Styles@endlink
+    */
+    wxPropertyGridManager( wxWindow *parent, wxWindowID id = wxID_ANY,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxPGMAN_DEFAULT_STYLE,
+                           const wxString& name = wxPropertyGridManagerNameStr );
+
+    /** Destructor */
+    virtual ~wxPropertyGridManager();
+
+    /** Creates new property page. Note that the first page is not created
+        automatically.
+        @param label
+        A label for the page. This may be shown as a toolbar tooltip etc.
+        @param bmp
+        Bitmap image for toolbar. If wxNullBitmap is used, then a built-in
+        default image is used.
+        @param pageObj
+        wxPropertyGridPage instance. Manager will take ownership of this object.
+        NULL indicates that a default page instance should be created.
+
+        @return
+        Returns pointer to created page.
+
+        @remarks
+        If toolbar is used, it is highly recommended that the pages are
+        added when the toolbar is not turned off using window style flag
+        switching.
+    */
+    wxPropertyGridPage* AddPage( const wxString& label = wxEmptyString,
+                                 const wxBitmap& bmp = wxPG_NULL_BITMAP,
+                                 wxPropertyGridPage* pageObj = NULL )
+    {
+        return InsertPage(-1, label, bmp, pageObj);
+    }
+
+    /** Deletes all all properties and all pages.
+    */
+    virtual void Clear();
+
+    /** Deletes all properties on given page.
+    */
+    void ClearPage( int page );
+
+    /** Forces updating the value of property from the editor control.
+        Returns true if DoPropertyChanged was actually called.
+    */
+    bool CommitChangesFromEditor( wxUint32 flags = 0 )
+    {
+        return m_pPropGrid->CommitChangesFromEditor(flags);
+    }
+
+    /**
+        Two step creation.
+        Whenever the control is created without any parameters, use Create to
+        actually create it. Don't access the control's public methods before
+        this is called.
+        @see @link wndflags Additional Window Styles@endlink
+    */
+    bool Create( wxWindow *parent, wxWindowID id = wxID_ANY,
+                 const wxPoint& pos = wxDefaultPosition,
+                 const wxSize& size = wxDefaultSize,
+                 long style = wxPGMAN_DEFAULT_STYLE,
+                 const wxString& name = wxPropertyGridManagerNameStr );
+
+    /**
+        Enables or disables (shows/hides) categories according to parameter
+        enable.
+
+        WARNING: Not tested properly, use at your own risk.
+    */
+    bool EnableCategories( bool enable )
+    {
+        long fl = m_windowStyle | wxPG_HIDE_CATEGORIES;
+        if ( enable ) fl = m_windowStyle & ~(wxPG_HIDE_CATEGORIES);
+        SetWindowStyleFlag(fl);
+        return true;
+    }
+
+    /** Selects page, scrolls and/or expands items to ensure that the
+        given item is visible. Returns true if something was actually done.
+    */
+    bool EnsureVisible( wxPGPropArg id );
+
+    /** Returns number of columns on given page. By the default,
+        returns number of columns on current page. */
+    int GetColumnCount( int page = -1 ) const;
+
+    /** Returns height of the description text box. */
+    int GetDescBoxHeight() const;
+
+    /** Returns pointer to the contained wxPropertyGrid. This does not change
+        after wxPropertyGridManager has been created, so you can safely obtain
+        pointer once and use it for the entire lifetime of the instance.
+    */
+    wxPropertyGrid* GetGrid()
+    {
+        wxASSERT(m_pPropGrid);
+        return m_pPropGrid;
+    };
+
+    const wxPropertyGrid* GetGrid() const
+    {
+        wxASSERT(m_pPropGrid);
+        return (const wxPropertyGrid*)m_pPropGrid;
+    };
+
+    /** Returns iterator class instance.
+        @remarks
+        Calling this method in wxPropertyGridManager causes run-time assertion
+        failure. Please only iterate through individual pages or use
+        CreateVIterator().
+    */
+    wxPropertyGridIterator GetIterator( int flags = wxPG_ITERATE_DEFAULT,
+                                        wxPGProperty* firstProp = NULL )
+    {
+        wxFAIL_MSG( "Please only iterate through individual pages "
+                    "or use CreateVIterator()" );
+        return wxPropertyGridInterface::GetIterator( flags, firstProp );
+    }
+
+    wxPropertyGridConstIterator
+    GetIterator(int flags = wxPG_ITERATE_DEFAULT,
+                wxPGProperty* firstProp = NULL) const
+    {
+        wxFAIL_MSG( "Please only iterate through individual pages "
+                    " or use CreateVIterator()" );
+        return wxPropertyGridInterface::GetIterator( flags, firstProp );
+    }
+
+    /** Returns iterator class instance.
+        @remarks
+        Calling this method in wxPropertyGridManager causes run-time assertion
+        failure. Please only iterate through individual pages or use
+        CreateVIterator().
+    */
+    wxPropertyGridIterator GetIterator( int flags, int startPos )
+    {
+        wxFAIL_MSG( "Please only iterate through individual pages "
+                    "or use CreateVIterator()" );
+
+        return wxPropertyGridInterface::GetIterator( flags, startPos );
+    }
+
+    wxPropertyGridConstIterator GetIterator( int flags, int startPos ) const
+    {
+        wxFAIL_MSG( "Please only iterate through individual pages "
+                    "or use CreateVIterator()" );
+        return wxPropertyGridInterface::GetIterator( flags, startPos );
+    }
+
+    /** Similar to GetIterator, but instead returns wxPGVIterator instance,
+        which can be useful for forward-iterating through arbitrary property
+        containers.
+    */
+    virtual wxPGVIterator GetVIterator( int flags ) const;
+
+    /** Returns currently selected page.
+    */
+    wxPropertyGridPage* GetCurrentPage() const
+    {
+        return GetPage(m_selPage);
+    }
+
+    /** Returns page object for given page index.
+    */
+    wxPropertyGridPage* GetPage( unsigned int ind ) const
+    {
+        return m_arrPages[ind];
+    }
+
+    /** Returns page object for given page name.
+    */
+    wxPropertyGridPage* GetPage( const wxString& name ) const
+    {
+        return GetPage(GetPageByName(name));
+    }
+
+    /**
+        Returns index for a page name.
+
+        If no match is found, wxNOT_FOUND is returned.
+     */
+    int GetPageByName( const wxString& name ) const;
+
+    /** Returns index for a relevant propertygrid state.
+
+        If no match is found, wxNOT_FOUND is returned.
+    */
+    int GetPageByState( const wxPropertyGridPageState* pstate ) const;
+
+protected:
+    /** Returns wxPropertyGridPageState of given page, current page's for -1.
+    */
+    virtual wxPropertyGridPageState* GetPageState( int page ) const;
+
+public:
+    /** Returns number of managed pages. */
+    size_t GetPageCount() const;
+
+    /** Returns name of given page. */
+    const wxString& GetPageName( int index ) const;
+
+    /** Returns "root property" of the given page. It does not have name, etc.
+        and it is not visible. It is only useful for accessing its children.
+    */
+    wxPGProperty* GetPageRoot( int index ) const;
+
+    /** Returns index to currently selected page. */
+    int GetSelectedPage() const { return m_selPage; }
+
+    /** Alias for GetSelection(). */
+    wxPGProperty* GetSelectedProperty() const
+    {
+        return GetSelection();
+    }
+
+    /** Shortcut for GetGrid()->GetSelection(). */
+    wxPGProperty* GetSelection() const
+    {
+        return m_pPropGrid->GetSelection();
+    }
+
+    /** Returns a pointer to the toolbar currently associated with the
+        wxPropertyGridManager (if any). */
+    wxToolBar* GetToolBar() const { return m_pToolbar; }
+
+    /** Creates new property page. Note that the first page is not created
+        automatically.
+        @param index
+        Add to this position. -1 will add as the last item.
+        @param label
+        A label for the page. This may be shown as a toolbar tooltip etc.
+        @param bmp
+        Bitmap image for toolbar. If wxNullBitmap is used, then a built-in
+        default image is used.
+        @param pageObj
+        wxPropertyGridPage instance. Manager will take ownership of this object.
+        If NULL, default page object is constructed.
+
+        @return
+        Returns pointer to created page.
+    */
+    virtual wxPropertyGridPage* InsertPage( int index,
+                                            const wxString& label,
+                                            const wxBitmap& bmp = wxNullBitmap,
+                                            wxPropertyGridPage* pageObj = NULL );
+
+    /**
+        Returns true if any property on any page has been modified by the user.
+    */
+    bool IsAnyModified() const;
+
+    /**
+        Returns true if updating is frozen (ie Freeze() called but not yet
+        Thaw() ).
+     */
+    bool IsFrozen() const { return m_pPropGrid->m_frozen > 0; }
+
+    /**
+        Returns true if any property on given page has been modified by the
+        user.
+     */
+    bool IsPageModified( size_t index ) const;
+
+    virtual void Refresh( bool eraseBackground = true,
+                          const wxRect* rect = (const wxRect*) NULL );
+
+    /** Removes a page.
+        @return
+        Returns false if it was not possible to remove page in question.
+    */
+    virtual bool RemovePage( int page );
+
+    /** Select and displays a given page.
+
+        @param index
+            Index of page being seleced. Can be -1 to select nothing.
+    */
+    void SelectPage( int index );
+
+    /** Select and displays a given page (by label). */
+    void SelectPage( const wxString& label )
+    {
+        int index = GetPageByName(label);
+        wxCHECK_RET( index >= 0, wxT("No page with such name") );
+        SelectPage( index );
+    }
+
+    /** Select and displays a given page. */
+    void SelectPage( wxPropertyGridPage* ptr )
+    {
+        SelectPage( GetPageByState(ptr) );
+    }
+
+    /** Select a property. */
+    bool SelectProperty( wxPGPropArg id, bool focus = false )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return p->GetParentState()->DoSelectProperty(p, focus);
+    }
+
+    /** Sets number of columns on given page (default is current page).
+    */
+    void SetColumnCount( int colCount, int page = -1 );
+
+    /** Sets label and text in description box.
+    */
+    void SetDescription( const wxString& label, const wxString& content );
+
+    /** Sets y coordinate of the description box splitter. */
+    void SetDescBoxHeight( int ht, bool refresh = true );
+
+    /** Moves splitter as left as possible, while still allowing all
+        labels to be shown in full.
+        @param subProps
+        If false, will still allow sub-properties (ie. properties which
+        parent is not root or category) to be cropped.
+        @param allPages
+        If true, takes labels on all pages into account.
+    */
+    void SetSplitterLeft( bool subProps = false, bool allPages = true );
+
+    /** Sets splitter position on individual page. */
+    void SetPageSplitterPosition( int page, int pos, int column = 0 )
+    {
+        GetPage(page)->DoSetSplitterPosition( pos, column );
+    }
+
+    /** Sets splitter position for all pages.
+        @remarks
+        Splitter position cannot exceed grid size, and therefore setting it
+        during form creation may fail as initial grid size is often smaller
+        than desired splitter position, especially when sizers are being used.
+    */
+    void SetSplitterPosition( int pos, int column = 0 );
+
+protected:
+
+    //
+    // Subclassing helpers
+    //
+
+    /**
+        Creates property grid for the manager. Reimplement in derived class to
+        use subclassed wxPropertyGrid. However, if you you do this then you
+        must also use the two-step construction (ie. default constructor and
+        Create() instead of constructor with arguments) when creating the
+        manager.
+    */
+    virtual wxPropertyGrid* CreatePropertyGrid() const;
+
+public:
+    virtual void RefreshProperty( wxPGProperty* p );
+
+    //
+    // Overridden functions - no documentation required.
+    //
+
+    void SetId( wxWindowID winid );
+
+    virtual void Freeze();
+    virtual void Thaw();
+    virtual void SetExtraStyle ( long exStyle );
+    virtual bool SetFont ( const wxFont& font );
+    virtual void SetWindowStyleFlag ( long style );
+
+protected:
+    virtual wxSize DoGetBestSize() const;
+
+public:
+
+#ifndef SWIG
+
+    //
+    // Event handlers
+    //
+    void OnMouseMove( wxMouseEvent &event );
+    void OnMouseClick( wxMouseEvent &event );
+    void OnMouseUp( wxMouseEvent &event );
+    void OnMouseEntry( wxMouseEvent &event );
+
+    void OnPaint( wxPaintEvent &event );
+
+    void OnToolbarClick( wxCommandEvent &event );
+    void OnResize( wxSizeEvent& event );
+    void OnPropertyGridSelect( wxPropertyGridEvent& event );
+
+protected:
+
+    wxPropertyGrid* m_pPropGrid;
+
+    wxVector<wxPropertyGridPage*>   m_arrPages;
+
+#if wxUSE_TOOLBAR
+    wxToolBar*      m_pToolbar;
+#endif
+    wxStaticText*   m_pTxtHelpCaption;
+    wxStaticText*   m_pTxtHelpContent;
+
+    wxPropertyGridPage*     m_emptyPage;
+
+    long            m_iFlags;
+
+    // Selected page index.
+    int             m_selPage;
+
+    int             m_width;
+
+    int             m_height;
+
+    int             m_extraHeight;
+
+    int             m_splitterY;
+
+    int             m_splitterHeight;
+
+    int             m_nextTbInd;
+
+    int             m_dragOffset;
+
+    wxCursor        m_cursorSizeNS;
+
+    int             m_nextDescBoxSize;
+
+    wxWindowID      m_baseId;
+
+    unsigned char   m_dragStatus;
+
+    unsigned char   m_onSplitter;
+
+    virtual wxPGProperty* DoGetPropertyByName( const wxString& name ) const;
+
+    /** Select and displays a given page. */
+    virtual bool DoSelectPage( int index );
+
+    // Sets some members to defaults.
+    void Init1();
+
+    // Initializes some members.
+    void Init2( int style );
+
+/*#ifdef __WXMSW__
+    virtual WXDWORD MSWGetStyle(long flags, WXDWORD *exstyle) const;
+#endif*/
+
+    virtual bool ProcessEvent( wxEvent& event );
+
+    /** Recalculates new positions for components, according to the
+        given size.
+    */
+    void RecalculatePositions( int width, int height );
+
+    /** (Re)creates/destroys controls, according to the window style bits. */
+    void RecreateControls();
+
+    void UpdateDescriptionBox( int new_splittery, int new_width, int new_height );
+
+    void RepaintDescBoxDecorations( wxDC& dc,
+                                    int newSplitterY,
+                                    int newWidth,
+                                    int newHeight );
+
+    void SetDescribedProperty( wxPGProperty* p );
+
+    // Reimplement these to handle "descboxheight" state item
+    virtual bool SetEditableStateItem( const wxString& name, wxVariant value );
+    virtual wxVariant GetEditableStateItem( const wxString& name ) const;
+
+private:
+    DECLARE_EVENT_TABLE()
+#endif // #ifndef SWIG
+};
+
+// -----------------------------------------------------------------------
+
+inline int wxPropertyGridPage::GetIndex() const
+{
+    if ( !m_manager )
+        return wxNOT_FOUND;
+    return m_manager->GetPageByState(this);
+}
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_MANAGER_H_
Index: property.h
===================================================================
--- property.h	(revision 102)
+++ property.h	(working copy)
@@ -1,2415 +1,2415 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/property.h
-// Purpose:     wxPGProperty and related support classes
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2008-08-23
-// RCS-ID:      $Id: property.h 60911 2009-06-06 15:24:51Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_PROPERTY_H_
-#define _WX_PROPGRID_PROPERTY_H_
-
-#if wxUSE_PROPGRID
-
-#include "wx/propgrid/propgriddefs.h"
-
-// -----------------------------------------------------------------------
-
-#define wxNullProperty  ((wxPGProperty*)NULL)
-
-
-/** @class wxPGPaintData
-
-    Contains information relayed to property's OnCustomPaint.
-*/
-struct wxPGPaintData
-{
-    /** wxPropertyGrid. */
-    const wxPropertyGrid*   m_parent;
-
-    /**
-        Normally -1, otherwise index to drop-down list item that has to be
-        drawn.
-     */
-    int                     m_choiceItem;
-
-    /** Set to drawn width in OnCustomPaint (optional). */
-    int                     m_drawnWidth;
-
-    /**
-        In a measure item call, set this to the height of item at m_choiceItem
-        index.
-     */
-    int                     m_drawnHeight;
-};
-
-
-#ifndef SWIG
-
-
-// space between vertical sides of a custom image
-#define wxPG_CUSTOM_IMAGE_SPACINGY      1
-
-// space between caption and selection rectangle,
-#define wxPG_CAPRECTXMARGIN             2
-
-// horizontally and vertically
-#define wxPG_CAPRECTYMARGIN             1
-
-
-/** @class wxPGCellRenderer
-
-    Base class for wxPropertyGrid cell renderers.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGCellRenderer
-{
-public:
-
-    wxPGCellRenderer( unsigned int refCount = 1 )
-        : m_refCount(refCount) { }
-    virtual ~wxPGCellRenderer() { }
-
-    // Render flags
-    enum
-    {
-        // We are painting selected item
-        Selected        = 0x00010000,
-
-        // We are painting item in choice popup
-        ChoicePopup     = 0x00020000,
-
-        // We are rendering wxOwnerDrawnComboBox control
-        // (or other owner drawn control, but that is only
-        // officially supported one ATM).
-        Control         = 0x00040000,
-
-        // We are painting a disable property
-        Disabled        = 0x00080000,
-
-        // We are painting selected, disabled, or similar
-        // item that dictates fore- and background colours,
-        // overriding any cell values.
-        DontUseCellFgCol    = 0x00100000,
-        DontUseCellBgCol    = 0x00200000,
-        DontUseCellColours  = DontUseCellFgCol |
-                              DontUseCellBgCol
-    };
-
-    virtual void Render( wxDC& dc,
-                         const wxRect& rect,
-                         const wxPropertyGrid* propertyGrid,
-                         wxPGProperty* property,
-                         int column,
-                         int item,
-                         int flags ) const = 0;
-
-    /** Returns size of the image in front of the editable area.
-        @remarks
-        If property is NULL, then this call is for a custom value. In that case
-        the item is index to wxPropertyGrid's custom values.
-    */
-    virtual wxSize GetImageSize( const wxPGProperty* property,
-                                 int column,
-                                 int item ) const;
-
-    /** Paints property category selection rectangle.
-    */
-    virtual void DrawCaptionSelectionRect( wxDC& dc,
-                                           int x, int y,
-                                           int w, int h ) const;
-
-    /** Utility to draw vertically centered text.
-    */
-    void DrawText( wxDC& dc,
-                   const wxRect& rect,
-                   int imageWidth,
-                   const wxString& text ) const;
-
-    /**
-        Utility to draw editor's value, or vertically aligned text if editor is
-        NULL.
-    */
-    void DrawEditorValue( wxDC& dc, const wxRect& rect,
-                          int xOffset, const wxString& text,
-                          wxPGProperty* property,
-                          const wxPGEditor* editor ) const;
-
-    /** Utility to render cell bitmap and set text colour plus bg brush colour.
-
-        Returns image width that, for instance, can be passed to DrawText.
-    */
-    int PreDrawCell( wxDC& dc,
-                     const wxRect& rect,
-                     const wxPGCell& cell,
-                     int flags ) const;
-
-    void IncRef()
-    {
-        m_refCount++;
-    }
-
-    void DecRef()
-    {
-        m_refCount--;
-        if ( !m_refCount )
-            delete this;
-    }
-protected:
-
-private:
-    unsigned int    m_refCount;
-};
-
-
-class WXDLLIMPEXP_PROPGRID wxPGCellData : public wxObjectRefData
-{
-    friend class wxPGCell;
-public:
-    wxPGCellData();
-
-    void SetText( const wxString& text )
-    {
-        m_text = text;
-        m_hasValidText = true;
-    }
-    void SetBitmap( const wxBitmap& bitmap ) { m_bitmap = bitmap; }
-    void SetFgCol( const wxColour& col ) { m_fgCol = col; }
-    void SetBgCol( const wxColour& col ) { m_bgCol = col; }
-
-protected:
-    virtual ~wxPGCellData() { }
-
-    wxString    m_text;
-    wxBitmap    m_bitmap;
-    wxColour    m_fgCol;
-    wxColour    m_bgCol;
-
-    // True if m_text is valid and specified
-    bool        m_hasValidText;
-};
-
-/** @class wxPGCell
-
-    Base class for simple wxPropertyGrid cell information.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGCell : public wxObject
-{
-public:
-    wxPGCell();
-    wxPGCell(const wxPGCell& other)
-        : wxObject(other)
-    {
-    }
-
-    wxPGCell( const wxString& text,
-              const wxBitmap& bitmap = wxNullBitmap,
-              const wxColour& fgCol = wxNullColour,
-              const wxColour& bgCol = wxNullColour );
-
-    virtual ~wxPGCell() { }
-
-    wxPGCellData* GetData()
-    {
-        return (wxPGCellData*) m_refData;
-    }
-
-    const wxPGCellData* GetData() const
-    {
-        return (const wxPGCellData*) m_refData;
-    }
-
-    bool HasText() const
-    {
-        return (m_refData && GetData()->m_hasValidText);
-    }
-
-    /**
-        Merges valid data from srcCell into this.
-    */
-    void MergeFrom( const wxPGCell& srcCell );
-
-    void SetText( const wxString& text );
-    void SetBitmap( const wxBitmap& bitmap );
-    void SetFgCol( const wxColour& col );
-    void SetBgCol( const wxColour& col );
-
-    const wxString& GetText() const { return GetData()->m_text; }
-    const wxBitmap& GetBitmap() const { return GetData()->m_bitmap; }
-    const wxColour& GetFgCol() const { return GetData()->m_fgCol; }
-    const wxColour& GetBgCol() const { return GetData()->m_bgCol; }
-
-    wxPGCell& operator=( const wxPGCell& other )
-    {
-        if ( this != &other )
-        {
-            Ref(other);
-        }
-        return *this;
-    }
-
-protected:
-    virtual wxObjectRefData *CreateRefData() const
-        { return new wxPGCellData(); }
-
-    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;
-};
-
-
-/** @class wxPGDefaultRenderer
-
-    Default cell renderer, that can handles the common
-    scenarios.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGDefaultRenderer : public wxPGCellRenderer
-{
-public:
-    virtual void Render( wxDC& dc,
-                         const wxRect& rect,
-                         const wxPropertyGrid* propertyGrid,
-                         wxPGProperty* property,
-                         int column,
-                         int item,
-                         int flags ) const;
-
-    virtual wxSize GetImageSize( const wxPGProperty* property,
-                                 int column,
-                                 int item ) const;
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxPGAttributeStorage
-
-    wxPGAttributeStorage is somewhat optimized storage for
-      key=variant pairs (ie. a map).
-*/
-class WXDLLIMPEXP_PROPGRID wxPGAttributeStorage
-{
-public:
-    wxPGAttributeStorage();
-    ~wxPGAttributeStorage();
-
-    void Set( const wxString& name, const wxVariant& value );
-    unsigned int GetCount() const { return (unsigned int) m_map.size(); }
-    wxVariant FindValue( const wxString& name ) const
-    {
-        wxPGHashMapS2P::const_iterator it = m_map.find(name);
-        if ( it != m_map.end() )
-        {
-            wxVariantData* data = (wxVariantData*) it->second;
-            data->IncRef();
-            return wxVariant(data, it->first);
-        }
-        return wxVariant();
-    }
-
-    typedef wxPGHashMapS2P::const_iterator const_iterator;
-    const_iterator StartIteration() const
-    {
-        return m_map.begin();
-    }
-    bool GetNext( const_iterator& it, wxVariant& variant ) const
-    {
-        if ( it == m_map.end() )
-            return false;
-
-        wxVariantData* data = (wxVariantData*) it->second;
-        data->IncRef();
-        variant.SetData(data);
-        variant.SetName(it->first);
-        ++it;
-        return true;
-    }
-
-protected:
-    wxPGHashMapS2P  m_map;
-};
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-/** @section propgrid_propflags wxPGProperty Flags
-    @{
-*/
-
-enum wxPG_PROPERTY_FLAGS
-{
-
-/** Indicates bold font.
-*/
-wxPG_PROP_MODIFIED                  = 0x0001,
-
-/** Disables ('greyed' text and editor does not activate) property.
-*/
-wxPG_PROP_DISABLED                  = 0x0002,
-
-/** Hider button will hide this property.
-*/
-wxPG_PROP_HIDDEN                    = 0x0004,
-
-/** This property has custom paint image just in front of its value.
-    If property only draws custom images into a popup list, then this
-    flag should not be set.
-*/
-wxPG_PROP_CUSTOMIMAGE               = 0x0008,
-
-/** Do not create text based editor for this property (but button-triggered
-    dialog and choice are ok).
-*/
-wxPG_PROP_NOEDITOR                  = 0x0010,
-
-/** Property is collapsed, ie. it's children are hidden.
-*/
-wxPG_PROP_COLLAPSED                 = 0x0020,
-
-/**
-    If property is selected, then indicates that validation failed for pending
-    value.
-
-    If property is not selected, then indicates that the the actual property
-    value has failed validation (NB: this behavior is not currently supported,
-    but may be used in future).
-*/
-wxPG_PROP_INVALID_VALUE             = 0x0040,
-
-// 0x0080,
-
-/** Switched via SetWasModified(). Temporary flag - only used when
-    setting/changing property value.
-*/
-wxPG_PROP_WAS_MODIFIED              = 0x0200,
-
-/**
-    If set, then child properties (if any) are private, and should be
-    "invisible" to the application.
-*/
-wxPG_PROP_AGGREGATE                 = 0x0400,
-
-/** If set, then child properties (if any) are copies and should not
-    be deleted in dtor.
-*/
-wxPG_PROP_CHILDREN_ARE_COPIES       = 0x0800,
-
-/**
-    Classifies this item as a non-category.
-
-    Used for faster item type identification.
-*/
-wxPG_PROP_PROPERTY                  = 0x1000,
-
-/**
-    Classifies this item as a category.
-
-    Used for faster item type identification.
-*/
-wxPG_PROP_CATEGORY                  = 0x2000,
-
-/** Classifies this item as a property that has children, but is not aggregate
-    (ie children are not private).
-*/
-wxPG_PROP_MISC_PARENT               = 0x4000,
-
-/** Property is read-only. Editor is still created.
-*/
-wxPG_PROP_READONLY                  = 0x8000,
-
-//
-// NB: FLAGS ABOVE 0x8000 CANNOT BE USED WITH PROPERTY ITERATORS
-//
-
-/** Property's value is composed from values of child properties.
-    @remarks
-    This flag cannot be used with property iterators.
-*/
-wxPG_PROP_COMPOSED_VALUE            = 0x00010000,
-
-/** Common value of property is selectable in editor.
-    @remarks
-    This flag cannot be used with property iterators.
-*/
-wxPG_PROP_USES_COMMON_VALUE         = 0x00020000,
-
-/** Property can be set to unspecified value via editor.
-    Currently, this applies to following properties:
-    - wxIntProperty, wxUIntProperty, wxFloatProperty, wxEditEnumProperty:
-      Clear the text field
-
-    @remarks
-    This flag cannot be used with property iterators.
-*/
-wxPG_PROP_AUTO_UNSPECIFIED          = 0x00040000,
-
-/** Indicates the bit useable by derived properties.
-*/
-wxPG_PROP_CLASS_SPECIFIC_1          = 0x00080000,
-
-/** Indicates the bit useable by derived properties.
-*/
-wxPG_PROP_CLASS_SPECIFIC_2          = 0x00100000
-
-};
-
-/** Topmost flag.
-*/
-#define wxPG_PROP_MAX               wxPG_PROP_AUTO_UNSPECIFIED
-
-/** Property with children must have one of these set, otherwise iterators
-    will not work correctly.
-    Code should automatically take care of this, however.
-*/
-#define wxPG_PROP_PARENTAL_FLAGS \
-    (wxPG_PROP_AGGREGATE|wxPG_PROP_CATEGORY|wxPG_PROP_MISC_PARENT)
-
-/** @}
-*/
-
-// Combination of flags that can be stored by GetFlagsAsString
-#define wxPG_STRING_STORED_FLAGS \
-    (wxPG_PROP_DISABLED|wxPG_PROP_HIDDEN|wxPG_PROP_NOEDITOR|wxPG_PROP_COLLAPSED)
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-/**
-    @section propgrid_property_attributes wxPropertyGrid Property Attribute
-    Identifiers.
-
-    wxPGProperty::SetAttribute() and
-    wxPropertyGridInterface::SetPropertyAttribute() accept one of these as
-    attribute name argument.
-
-    You can use strings instead of constants. However, some of these
-    constants are redefined to use cached strings which may reduce
-    your binary size by some amount.
-
-    @{
-*/
-
-/** Set default value for property.
-*/
-#define wxPG_ATTR_DEFAULT_VALUE           wxS("DefaultValue")
-
-/** Universal, int or double. Minimum value for numeric properties.
-*/
-#define wxPG_ATTR_MIN                     wxS("Min")
-
-/** Universal, int or double. Maximum value for numeric properties.
-*/
-#define wxPG_ATTR_MAX                     wxS("Max")
-
-/** Universal, string. When set, will be shown as text after the displayed
-    text value. Alternatively, if third column is enabled, text will be shown
-    there (for any type of property).
-*/
-#define wxPG_ATTR_UNITS                     wxS("Units")
-
-/** Universal, string. When set, will be shown in property's value cell
-    when displayed value string is empty, or value is unspecified.
-*/
-#define wxPG_ATTR_INLINE_HELP               wxS("InlineHelp")
-
-/** Universal, wxArrayString. Set to enable auto-completion in any
-    wxTextCtrl-based property editor.
-*/
-#define wxPG_ATTR_AUTOCOMPLETE              wxS("AutoComplete")
-
-/** wxBoolProperty specific, int, default 0. When 1 sets bool property to
-    use checkbox instead of choice.
-*/
-#define wxPG_BOOL_USE_CHECKBOX              wxS("UseCheckbox")
-
-/** wxBoolProperty specific, int, default 0. When 1 sets bool property value
-    to cycle on double click (instead of showing the popup listbox).
-*/
-#define wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING  wxS("UseDClickCycling")
-
-/**
-    wxFloatProperty (and similar) specific, int, default -1.
-
-    Sets the (max) precision used when floating point value is rendered as
-    text. The default -1 means infinite precision.
-*/
-#define wxPG_FLOAT_PRECISION                wxS("Precision")
-
-/**
-    The text will be echoed as asterisks (wxTE_PASSWORD will be passed to
-    textctrl etc).
-*/
-#define wxPG_STRING_PASSWORD                wxS("Password")
-
-/** Define base used by a wxUIntProperty. Valid constants are
-    wxPG_BASE_OCT, wxPG_BASE_DEC, wxPG_BASE_HEX and wxPG_BASE_HEXL
-    (lowercase characters).
-*/
-#define wxPG_UINT_BASE                      wxS("Base")
-
-/** Define prefix rendered to wxUIntProperty. Accepted constants
-    wxPG_PREFIX_NONE, wxPG_PREFIX_0x, and wxPG_PREFIX_DOLLAR_SIGN.
-    <b>Note:</b> Only wxPG_PREFIX_NONE works with Decimal and Octal
-    numbers.
-*/
-#define wxPG_UINT_PREFIX                    wxS("Prefix")
-
-/**
-    wxFileProperty/wxImageFileProperty specific, wxChar*, default is
-    detected/varies.
-    Sets the wildcard used in the triggered wxFileDialog. Format is the same.
-*/
-#define wxPG_FILE_WILDCARD                  wxS("Wildcard")
-
-/** wxFileProperty/wxImageFileProperty specific, int, default 1.
-    When 0, only the file name is shown (i.e. drive and directory are hidden).
-*/
-#define wxPG_FILE_SHOW_FULL_PATH            wxS("ShowFullPath")
-
-/** Specific to wxFileProperty and derived properties, wxString, default empty.
-    If set, then the filename is shown relative to the given path string.
-*/
-#define wxPG_FILE_SHOW_RELATIVE_PATH        wxS("ShowRelativePath")
-
-/**
-    Specific to wxFileProperty and derived properties, wxString, default is
-    empty.
-
-    Sets the initial path of where to look for files.
-*/
-#define wxPG_FILE_INITIAL_PATH              wxS("InitialPath")
-
-/** Specific to wxFileProperty and derivatives, wxString, default is empty.
-    Sets a specific title for the dir dialog.
-*/
-#define wxPG_FILE_DIALOG_TITLE              wxS("DialogTitle")
-
-/** Specific to wxDirProperty, wxString, default is empty.
-    Sets a specific message for the dir dialog.
-*/
-#define wxPG_DIR_DIALOG_MESSAGE             wxS("DialogMessage")
-
-/** Sets displayed date format for wxDateProperty.
-*/
-#define wxPG_DATE_FORMAT                    wxS("DateFormat")
-
-/** Sets wxDatePickerCtrl window style used with wxDateProperty. Default
-    is wxDP_DEFAULT | wxDP_SHOWCENTURY.
-*/
-#define wxPG_DATE_PICKER_STYLE              wxS("PickerStyle")
-
-/** SpinCtrl editor, int or double. How much number changes when button is
-    pressed (or up/down on keybard).
-*/
-#define wxPG_ATTR_SPINCTRL_STEP             wxS("Step")
-
-/** SpinCtrl editor, bool. If true, value wraps at Min/Max.
-*/
-#define wxPG_ATTR_SPINCTRL_WRAP             wxS("Wrap")
-
-/**
-    wxMultiChoiceProperty, int.
-    If 0, no user strings allowed. If 1, user strings appear before list
-    strings. If 2, user strings appear after list string.
-*/
-#define wxPG_ATTR_MULTICHOICE_USERSTRINGMODE    wxS("UserStringMode")
-
-/**
-    wxColourProperty and its kind, int, default 1.
-
-    Setting this attribute to 0 hides custom colour from property's list of
-    choices.
-*/
-#define wxPG_COLOUR_ALLOW_CUSTOM            wxS("AllowCustom")
-
-/** @}
-*/
-
-// Redefine attribute macros to use cached strings
-#undef wxPG_ATTR_MIN
-#define wxPG_ATTR_MIN                     wxPGGlobalVars->m_strMin
-#undef wxPG_ATTR_MAX
-#define wxPG_ATTR_MAX                     wxPGGlobalVars->m_strMax
-#undef wxPG_ATTR_UNITS
-#define wxPG_ATTR_UNITS                   wxPGGlobalVars->m_strUnits
-#undef wxPG_ATTR_INLINE_HELP
-#define wxPG_ATTR_INLINE_HELP             wxPGGlobalVars->m_strInlineHelp
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-/** @class wxPGChoiceEntry
-    Data of a single wxPGChoices choice.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGChoiceEntry : public wxPGCell
-{
-public:
-    wxPGChoiceEntry();
-    wxPGChoiceEntry(const wxPGChoiceEntry& other)
-        : wxPGCell(other)
-    {
-        m_value = other.m_value;
-    }
-    wxPGChoiceEntry( const wxString& label,
-                     int value = wxPG_INVALID_VALUE )
-        : wxPGCell(), m_value(value)
-    {
-        SetText(label);
-    }
-
-    virtual ~wxPGChoiceEntry() { }
-
-    void SetValue( int value ) { m_value = value; }
-    int GetValue() const { return m_value; }
-
-    wxPGChoiceEntry& operator=( const wxPGChoiceEntry& other )
-    {
-        if ( this != &other )
-        {
-            Ref(other);
-        }
-        m_value = other.m_value;
-        return *this;
-    }
-
-protected:
-    int m_value;
-};
-
-
-typedef void* wxPGChoicesId;
-
-class WXDLLIMPEXP_PROPGRID wxPGChoicesData
-{
-    friend class wxPGChoices;
-public:
-    // Constructor sets m_refCount to 1.
-    wxPGChoicesData();
-
-    void CopyDataFrom( wxPGChoicesData* data );
-
-    wxPGChoiceEntry& Insert( int index, const wxPGChoiceEntry& item );
-
-    // Delete all entries
-    void Clear();
-
-    unsigned int GetCount() const
-    {
-        return (unsigned int) m_items.size();
-    }
-
-    const wxPGChoiceEntry& Item( unsigned int i ) const
-    {
-        wxASSERT_MSG( i < GetCount(), "invalid index" );
-        return m_items[i];
-    }
-
-    wxPGChoiceEntry& Item( unsigned int i )
-    {
-        wxASSERT_MSG( i < GetCount(), "invalid index" );
-        return m_items[i];
-    }
-
-    void DecRef()
-    {
-        m_refCount--;
-        wxASSERT( m_refCount >= 0 );
-        if ( m_refCount == 0 )
-            delete this;
-    }
-
-private:
-    wxVector<wxPGChoiceEntry>   m_items;
-
-    // So that multiple properties can use the same set
-    int             m_refCount;
-
-    virtual ~wxPGChoicesData();
-};
-
-#define wxPGChoicesEmptyData    ((wxPGChoicesData*)NULL)
-
-#endif // SWIG
-
-/** @class wxPGChoices
-
-    Helper class for managing choices of wxPropertyGrid properties.
-    Each entry can have label, value, bitmap, text colour, and background
-    colour.
- 
-    wxPGChoices uses reference counting, similar to other wxWidgets classes.
-    This means that assignment operator and copy constructor only copy the
-    reference and not the actual data. Use Copy() member function to create a
-    real copy.
-
-    @remarks If you do not specify value for entry, index is used.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPGChoices
-{
-public:
-    typedef long ValArrItem;
-
-    /** Default constructor. */
-    wxPGChoices()
-    {
-        Init();
-    }
-
-    /**
-        Copy constructor, uses reference counting. To create a real copy,
-        use Copy() member function instead.
-    */
-    wxPGChoices( const wxPGChoices& a )
-    {
-        if ( a.m_data != wxPGChoicesEmptyData )
-        {
-            m_data = a.m_data;
-            m_data->m_refCount++;
-        }
-    }
-
-    /**
-        Constructor.
-
-        @param labels
-            Labels for choices
-
-        @param values
-            Values for choices. If NULL, indexes are used.
-    */
-    wxPGChoices( const wxChar** labels, const long* values = NULL )
-    {
-        Init();
-        Set(labels,values);
-    }
-
-    /**
-        Constructor.
-
-        @param labels
-            Labels for choices
-
-        @param values
-            Values for choices. If empty, indexes are used.
-    */
-    wxPGChoices( const wxArrayString& labels,
-                 const wxArrayInt& values = wxArrayInt() )
-    {
-        Init();
-        Set(labels,values);
-    }
-
-    /** Simple interface constructor. */
-    wxPGChoices( wxPGChoicesData* data )
-    {
-        wxASSERT(data);
-        m_data = data;
-        data->m_refCount++;
-    }
-
-    /** Destructor. */
-    ~wxPGChoices()
-    {
-        Free();
-    }
-
-    /**
-        Adds to current.
-
-        If did not have own copies, creates them now. If was empty, identical
-        to set except that creates copies.
-
-        @param labels
-            Labels for added choices.
-
-        @param values
-            Values for added choices. If empty, relevant entry indexes are used.
-    */
-    void Add( const wxChar** labels, const ValArrItem* values = NULL );
-
-    /** Version that works with wxArrayString and wxArrayInt. */
-    void Add( const wxArrayString& arr, const wxArrayInt& arrint = wxArrayInt() );
-
-    /**
-        Adds a single choice.
-
-        @param label
-            Label for added choice.
-
-        @param value
-            Value for added choice. If unspecified, index is used.
-    */
-    wxPGChoiceEntry& Add( const wxString& label,
-                          int value = wxPG_INVALID_VALUE );
-
-    /** Adds a single item, with bitmap. */
-    wxPGChoiceEntry& Add( const wxString& label,
-                          const wxBitmap& bitmap,
-                          int value = wxPG_INVALID_VALUE );
-
-    /** Adds a single item with full entry information. */
-    wxPGChoiceEntry& Add( const wxPGChoiceEntry& entry )
-    {
-        return Insert(entry, -1);
-    }
-
-    /** Adds single item. */
-    wxPGChoiceEntry& AddAsSorted( const wxString& label,
-                                  int value = wxPG_INVALID_VALUE );
-
-    /**
-        Assigns choices data, using reference counting. To create a real copy,
-        use Copy() member function instead.
-    */
-    void Assign( const wxPGChoices& a )
-    {
-        AssignData(a.m_data);
-    }
-
-    void AssignData( wxPGChoicesData* data );
-
-    /** Delete all choices. */
-    void Clear();
-
-    /**
-        Returns a real copy of the choices.
-    */
-    wxPGChoices Copy() const
-    {
-        wxPGChoices dst;
-        dst.EnsureData();
-        dst.m_data->CopyDataFrom(m_data);
-        return dst;
-    }
-
-    void EnsureData()
-    {
-        if ( m_data == wxPGChoicesEmptyData )
-            m_data = new wxPGChoicesData();
-    }
-
-    /** Gets a unsigned number identifying this list. */
-    wxPGChoicesId GetId() const { return (wxPGChoicesId) m_data; };
-
-    const wxString& GetLabel( unsigned int ind ) const
-    {
-        return Item(ind).GetText();
-    }
-
-    unsigned int GetCount () const
-    {
-        if ( !m_data )
-            return 0;
-
-        return m_data->GetCount();
-    }
-
-    int GetValue( unsigned int ind ) const { return Item(ind).GetValue(); }
-
-    /** Returns array of values matching the given strings. Unmatching strings
-        result in wxPG_INVALID_VALUE entry in array.
-    */
-    wxArrayInt GetValuesForStrings( const wxArrayString& strings ) const;
-
-    /** Returns array of indices matching given strings. Unmatching strings
-        are added to 'unmatched', if not NULL.
-    */
-    wxArrayInt GetIndicesForStrings( const wxArrayString& strings,
-                                     wxArrayString* unmatched = NULL ) const;
-
-    int Index( const wxString& str ) const;
-    int Index( int val ) const;
-
-    /** Inserts single item. */
-    wxPGChoiceEntry& Insert( const wxString& label,
-                             int index,
-                             int value = wxPG_INVALID_VALUE );
-
-    /** Inserts a single item with full entry information. */
-    wxPGChoiceEntry& Insert( const wxPGChoiceEntry& entry, int index );
-
-    /** Returns false if this is a constant empty set of choices,
-        which should not be modified.
-    */
-    bool IsOk() const
-    {
-        return ( m_data != wxPGChoicesEmptyData );
-    }
-
-    const wxPGChoiceEntry& Item( unsigned int i ) const
-    {
-        wxASSERT( IsOk() );
-        return m_data->Item(i);
-    }
-
-    wxPGChoiceEntry& Item( unsigned int i )
-    {
-        wxASSERT( IsOk() );
-        return m_data->Item(i);
-    }
-
-    /** Removes count items starting at position nIndex. */
-    void RemoveAt(size_t nIndex, size_t count = 1);
-
-#ifndef SWIG
-    /** Does not create copies for itself. */
-    void Set( const wxChar** labels, const long* values = NULL )
-    {
-        Free();
-        Add(labels,values);
-    }
-#endif // SWIG
-
-    /** Version that works with wxArrayString and wxArrayInt. */
-    void Set( const wxArrayString& labels,
-              const wxArrayInt& values = wxArrayInt() )
-    {
-        Free();
-        if ( &values )
-            Add(labels,values);
-        else
-            Add(labels);
-    }
-
-    // Creates exclusive copy of current choices
-    void AllocExclusive();
-
-    // Returns data, increases refcount.
-    wxPGChoicesData* GetData()
-    {
-        wxASSERT( m_data->m_refCount != 0xFFFFFFF );
-        m_data->m_refCount++;
-        return m_data;
-    }
-
-    // Returns plain data ptr - no refcounting stuff is done.
-    wxPGChoicesData* GetDataPtr() const { return m_data; }
-
-    // Changes ownership of data to you.
-    wxPGChoicesData* ExtractData()
-    {
-        wxPGChoicesData* data = m_data;
-        m_data = wxPGChoicesEmptyData;
-        return data;
-    }
-
-    wxArrayString GetLabels() const;
-
-#ifndef SWIG
-    void operator= (const wxPGChoices& a)
-    {
-        if (this != &a)
-            AssignData(a.m_data);
-    }
-
-    wxPGChoiceEntry& operator[](unsigned int i)
-    {
-        return Item(i);
-    }
-
-    const wxPGChoiceEntry& operator[](unsigned int i) const
-    {
-        return Item(i);
-    }
-
-protected:
-    wxPGChoicesData*    m_data;
-
-    void Init();
-    void Free();
-#endif  // !SWIG
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxPGProperty
-
-    wxPGProperty is base class for all wxPropertyGrid properties.
-
-    NB: Full class overview is now only present in
-        interface/wx/propgrid/property.h.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPGProperty : public wxObject
-{
-    friend class wxPropertyGrid;
-    friend class wxPropertyGridInterface;
-    friend class wxPropertyGridPageState;
-    friend class wxPropertyGridPopulator;
-    friend class wxStringProperty;  // Proper "<composed>" support requires this
-#ifndef SWIG
-    DECLARE_ABSTRACT_CLASS(wxPGProperty)
-#endif
-public:
-    typedef wxUint32 FlagType;
-
-    /** Basic constructor.
-    */
-    wxPGProperty();
-
-    /** Constructor.
-        Non-abstract property classes should have constructor of this style:
-
-        @code
-
-        // If T is a class, then it should be a constant reference
-        // (e.g. const T& ) instead.
-        MyProperty( const wxString& label, const wxString& name, T value )
-            : wxPGProperty()
-        {
-            // Generally recommended way to set the initial value
-            // (as it should work in pretty much 100% of cases).
-            wxVariant variant;
-            variant << value;
-            SetValue(variant);
-
-            // If has private child properties then create them here. Also
-            // set flag that indicates presence of private children. E.g.:
-            //
-            //     AddPrivateChild( new wxStringProperty("Subprop 1",
-            //                                           wxPG_LABEL,
-            //                                           value.GetSubProp1() ) );
-        }
-
-        @endcode
-    */
-    wxPGProperty( const wxString& label, const wxString& name );
-
-    /**
-        Virtual destructor.
-        It is customary for derived properties to implement this.
-    */
-    virtual ~wxPGProperty();
-
-    /** This virtual function is called after m_value has been set.
-
-        @remarks
-        - If m_value was set to Null variant (ie. unspecified value),
-          OnSetValue() will not be called.
-        - m_value may be of any variant type. Typically properties internally
-          support only one variant type, and as such OnSetValue() provides a
-          good opportunity to convert
-          supported values into internal type.
-        - Default implementation does nothing.
-    */
-    virtual void OnSetValue();
-
-    /** Override this to return something else than m_value as the value.
-    */
-    virtual wxVariant DoGetValue() const { return m_value; }
-
-#if !defined(SWIG) || defined(CREATE_VCW)
-    /** Implement this function in derived class to check the value.
-        Return true if it is ok. Returning false prevents property change events
-        from occurring.
-
-        @remarks
-        - Default implementation always returns true.
-    */
-    virtual bool ValidateValue( wxVariant& value,
-                                wxPGValidationInfo& validationInfo ) const;
-
-    /**
-        Converts text into wxVariant value appropriate for this property.
-
-        @param variant
-            On function entry this is the old value (should not be wxNullVariant
-            in normal cases). Translated value must be assigned back to it.
-
-        @param text
-            Text to be translated into variant.
-
-        @param argFlags
-            If wxPG_FULL_VALUE is set, returns complete, storable value instead
-            of displayable one (they may be different).
-            If wxPG_COMPOSITE_FRAGMENT is set, text is interpreted as a part of
-            composite property string value (as generated by ValueToString()
-            called with this same flag).
-
-        @return Returns @true if resulting wxVariant value was different.
-
-        @remarks Default implementation converts semicolon delimited tokens into
-                child values. Only works for properties with children.
-
-                You might want to take into account that m_value is Null variant
-                if property value is unspecified (which is usually only case if
-                you explicitly enabled that sort behavior).
-    */
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-
-    /**
-        Converts integer (possibly a choice selection) into wxVariant value
-        appropriate for this property.
-
-        @param variant
-            On function entry this is the old value (should not be wxNullVariant
-            in normal cases). Translated value must be assigned back to it.
-
-        @param number
-            Integer to be translated into variant.
-
-        @param argFlags
-            If wxPG_FULL_VALUE is set, returns complete, storable value instead
-            of displayable one.
-
-        @return Returns @true if resulting wxVariant value was different.
-
-        @remarks
-        - If property is not supposed to use choice or spinctrl or other editor
-          with int-based value, it is not necessary to implement this method.
-        - Default implementation simply assign given int to m_value.
-        - If property uses choice control, and displays a dialog on some choice
-          items, then it is preferred to display that dialog in IntToValue
-          instead of OnEvent.
-        - You might want to take into account that m_value is Null variant if
-          property value is unspecified (which is usually only case if you
-          explicitly enabled that sort behavior).
-    */
-    virtual bool IntToValue( wxVariant& value,
-                             int number,
-                             int argFlags = 0 ) const;
-#endif  // !defined(SWIG) || defined(CREATE_VCW)
-    /**
-        Converts property value into a text representation.
-
-        @param value
-            Value to be converted.
-
-        @param argFlags
-            If 0 (default value), then displayed string is returned.
-            If wxPG_FULL_VALUE is set, returns complete, storable string value
-            instead of displayable. If wxPG_EDITABLE_VALUE is set, returns
-            string value that must be editable in textctrl. If
-            wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to
-            display as a part of string property's composite text
-            representation.
-
-        @remarks Default implementation calls GenerateComposedValue().
-    */
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-
-    /** Converts string to a value, and if successful, calls SetValue() on it.
-        Default behavior is to do nothing.
-        @param text
-        String to get the value from.
-        @return
-        true if value was changed.
-    */
-    bool SetValueFromString( const wxString& text, int flags = wxPG_PROGRAMMATIC_VALUE );
-
-    /** Converts integer to a value, and if succesful, calls SetValue() on it.
-        Default behavior is to do nothing.
-        @param value
-            Int to get the value from.
-        @param flags
-            If has wxPG_FULL_VALUE, then the value given is a actual value and
-            not an index.
-        @return
-            True if value was changed.
-    */
-    bool SetValueFromInt( long value, int flags = 0 );
-
-    /**
-        Returns size of the custom painted image in front of property.
-
-        This method must be overridden to return non-default value if
-        OnCustomPaint is to be called.
-        @param item
-            Normally -1, but can be an index to the property's list of items.
-        @remarks
-        - Default behavior is to return wxSize(0,0), which means no image.
-        - Default image width or height is indicated with dimension -1.
-        - You can also return wxPG_DEFAULT_IMAGE_SIZE, i.e. wxSize(-1, -1).
-    */
-    virtual wxSize OnMeasureImage( int item = -1 ) const;
-
-    /**
-        Events received by editor widgets are processed here.
-
-        Note that editor class usually processes most events. Some, such as
-        button press events of TextCtrlAndButton class, can be handled here.
-        Also, if custom handling for regular events is desired, then that can
-        also be done (for example, wxSystemColourProperty custom handles
-        wxEVT_COMMAND_CHOICE_SELECTED to display colour picker dialog when
-        'custom' selection is made).
-
-        If the event causes value to be changed, SetValueInEvent()
-        should be called to set the new value.
-
-        @param event
-        Associated wxEvent.
-        @return
-        Should return true if any changes in value should be reported.
-        @remarks
-        If property uses choice control, and displays a dialog on some choice
-        items, then it is preferred to display that dialog in IntToValue
-        instead of OnEvent.
-    */
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxWindow* wnd_primary,
-                          wxEvent& event );
-
-    /**
-        Called after value of a child property has been altered.
-
-        Note that this function is usually called at the time that value of
-        this property, or given child property, is still pending for change.
-
-        Sample pseudo-code implementation:
-
-        @code
-        void MyProperty::ChildChanged( wxVariant& thisValue,
-                                       int childIndex,
-                                       wxVariant& childValue ) const
-        {
-            // Acquire reference to actual type of data stored in variant
-            // (TFromVariant only exists if wxPropertyGrid's wxVariant-macros
-            // were used to create the variant class).
-            T& data = TFromVariant(thisValue);
-
-            // Copy childValue into data.
-            switch ( childIndex )
-            {
-                case 0:
-                    data.SetSubProp1( childvalue.GetLong() );
-                    break;
-                case 1:
-                    data.SetSubProp2( childvalue.GetString() );
-                    break;
-                ...
-            }
-        }
-        @endcode
-
-        @param thisValue
-            Value of this property, that should be altered.
-        @param childIndex
-            Index of child changed (you can use Item(childIndex) to get).
-        @param childValue
-            Value of the child property.
-    */
-    virtual void ChildChanged( wxVariant& thisValue,
-                               int childIndex,
-                               wxVariant& childValue ) const;
-
-    /** Returns pointer to an instance of used editor.
-    */
-    virtual const wxPGEditor* DoGetEditorClass() const;
-
-    /** Returns pointer to the wxValidator that should be used
-        with the editor of this property (NULL for no validator).
-        Setting validator explicitly via SetPropertyValidator
-        will override this.
-
-        In most situations, code like this should work well
-        (macros are used to maintain one actual validator instance,
-        so on the second call the function exits within the first
-        macro):
-
-        @code
-
-        wxValidator* wxMyPropertyClass::DoGetValidator () const
-        {
-            WX_PG_DOGETVALIDATOR_ENTRY()
-
-            wxMyValidator* validator = new wxMyValidator(...);
-
-            ... prepare validator...
-
-            WX_PG_DOGETVALIDATOR_EXIT(validator)
-        }
-
-        @endcode
-
-        @remarks
-        You can get common filename validator by returning
-        wxFileProperty::GetClassValidator(). wxDirProperty,
-        for example, uses it.
-    */
-    virtual wxValidator* DoGetValidator () const;
-
-    /**
-        Override to paint an image in front of the property value text or
-        drop-down list item (but only if wxPGProperty::OnMeasureImage is
-        overridden as well).
-
-        If property's OnMeasureImage() returns size that has height != 0 but
-        less than row height ( < 0 has special meanings), wxPropertyGrid calls
-        this method to draw a custom image in a limited area in front of the
-        editor control or value text/graphics, and if control has drop-down
-        list, then the image is drawn there as well (even in the case
-        OnMeasureImage() returned higher height than row height).
-
-        NOTE: Following applies when OnMeasureImage() returns a "flexible"
-        height ( using wxPG_FLEXIBLE_SIZE(W,H) macro), which implies variable
-        height items: If rect.x is < 0, then this is a measure item call, which
-        means that dc is invalid and only thing that should be done is to set
-        paintdata.m_drawnHeight to the height of the image of item at index
-        paintdata.m_choiceItem. This call may be done even as often as once
-        every drop-down popup show.
-
-        @param dc
-            wxDC to paint on.
-        @param rect
-            Box reserved for custom graphics. Includes surrounding rectangle,
-            if any. If x is < 0, then this is a measure item call (see above).
-        @param paintdata
-            wxPGPaintData structure with much useful data.
-
-        @remarks
-            - You can actually exceed rect width, but if you do so then
-              paintdata.m_drawnWidth must be set to the full width drawn in
-              pixels.
-            - Due to technical reasons, rect's height will be default even if
-              custom height was reported during measure call.
-            - Brush is guaranteed to be default background colour. It has been
-              already used to clear the background of area being painted. It
-              can be modified.
-            - Pen is guaranteed to be 1-wide 'black' (or whatever is the proper
-              colour) pen for drawing framing rectangle. It can be changed as
-              well.
-
-        @see ValueToString()
-    */
-    virtual void OnCustomPaint( wxDC& dc,
-                                const wxRect& rect,
-                                wxPGPaintData& paintdata );
-
-    /**
-        Returns used wxPGCellRenderer instance for given property column
-        (label=0, value=1).
-
-        Default implementation returns editor's renderer for all columns.
-    */
-    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
-
-    /** Returns which choice is currently selected. Only applies to properties
-        which have choices.
-
-        Needs to reimplemented in derived class if property value does not
-        map directly to a choice. Integer as index, bool, and string usually do.
-    */
-    virtual int GetChoiceSelection() const;
-
-    /**
-        Refresh values of child properties.
-
-        Automatically called after value is set.
-    */
-    virtual void RefreshChildren();
-
-    /** Special handling for attributes of this property.
-
-        If returns false, then the attribute will be automatically stored in
-        m_attributes.
-
-        Default implementation simply returns false.
-    */
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-
-    /** Returns value of an attribute.
-
-        Override if custom handling of attributes is needed.
-
-        Default implementation simply return NULL variant.
-    */
-    virtual wxVariant DoGetAttribute( const wxString& name ) const;
-
-    /** Returns instance of a new wxPGEditorDialogAdapter instance, which is
-        used when user presses the (optional) button next to the editor control;
-
-        Default implementation returns NULL (ie. no action is generated when
-        button is pressed).
-    */
-    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
-
-    /**
-        Called whenever validation has failed with given pending value.
-
-        @remarks If you implement this in your custom property class, please
-                 remember to call the baser implementation as well, since they
-                 may use it to revert property into pre-change state.
-    */
-    virtual void OnValidationFailure( wxVariant& pendingValue );
-
-    /** Append a new choice to property's list of choices.
-    */
-    int AddChoice( const wxString& label, int value = wxPG_INVALID_VALUE )
-    {
-        return InsertChoice(label, wxNOT_FOUND, value);
-    }
-
-    /**
-        Returns true if children of this property are component values (for
-        instance, points size, face name, and is_underlined are component
-        values of a font).
-    */
-    bool AreChildrenComponents() const
-    {
-        if ( m_flags & (wxPG_PROP_COMPOSED_VALUE|wxPG_PROP_AGGREGATE) )
-            return true;
-
-        return false;
-    }
-
-    /**
-        Deletes children of the property.
-    */
-    void DeleteChildren();
-
-    /**
-        Removes entry from property's wxPGChoices and editor control (if it is
-        active).
-
-        If selected item is deleted, then the value is set to unspecified.
-    */
-    void DeleteChoice( int index );
-
-    /**
-        Call to enable or disable usage of common value (integer value that can
-        be selected for properties instead of their normal values) for this
-        property.
-
-        Common values are disabled by the default for all properties.
-    */
-    void EnableCommonValue( bool enable = true )
-    {
-        if ( enable ) SetFlag( wxPG_PROP_USES_COMMON_VALUE );
-        else ClearFlag( wxPG_PROP_USES_COMMON_VALUE );
-    }
-
-    /**
-        Composes text from values of child properties.
-    */
-    wxString GenerateComposedValue() const
-    {
-        wxString s;
-        DoGenerateComposedValue(s);
-        return s;
-    }
-
-    /** Returns property's label. */
-    const wxString& GetLabel() const { return m_label; }
-
-    /** Returns property's name with all (non-category, non-root) parents. */
-    wxString GetName() const;
-
-    /**
-        Returns property's base name (ie parent's name is not added in any
-        case)
-     */
-    const wxString& GetBaseName() const { return m_name; }
-
-    /** Returns read-only reference to property's list of choices.
-    */
-    const wxPGChoices& GetChoices() const
-    {
-        return m_choices;
-    }
-
-    /** Returns coordinate to the top y of the property. Note that the
-        position of scrollbars is not taken into account.
-    */
-    int GetY() const;
-
-    wxVariant GetValue() const
-    {
-        return DoGetValue();
-    }
-
-    /** Returns reference to the internal stored value. GetValue is preferred
-        way to get the actual value, since GetValueRef ignores DoGetValue,
-        which may override stored value.
-    */
-    wxVariant& GetValueRef()
-    {
-        return m_value;
-    }
-
-    const wxVariant& GetValueRef() const
-    {
-        return m_value;
-    }
-
-    // Helper function (for wxPython bindings and such) for settings protected
-    // m_value.
-    wxVariant GetValuePlain() const
-    {
-        return m_value;
-    }
-
-    /** Returns text representation of property's value.
-
-        @param argFlags
-            If 0 (default value), then displayed string is returned.
-            If wxPG_FULL_VALUE is set, returns complete, storable string value
-            instead of displayable. If wxPG_EDITABLE_VALUE is set, returns
-            string value that must be editable in textctrl. If
-            wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to
-            display as a part of string property's composite text
-            representation.
-
-        @remarks In older versions, this function used to be overridden to convert
-                 property's value into a string representation. This function is
-                 now handled by ValueToString(), and overriding this function now
-                 will result in run-time assertion failure.
-    */
-    virtual wxString GetValueAsString( int argFlags = 0 ) const;
-
-    /** Synonymous to GetValueAsString().
-
-        @deprecated Use GetValueAsString() instead.
-
-        @see GetValueAsString()
-    */
-    wxDEPRECATED( wxString GetValueString( int argFlags = 0 ) const );
-
-    /**
-        Returns wxPGCell of given column.
-    */
-    const wxPGCell& GetCell( unsigned int column ) const;
-
-    wxPGCell& GetCell( unsigned int column );
-
-    /** Return number of displayed common values for this property.
-    */
-    int GetDisplayedCommonValueCount() const;
-
-    wxString GetDisplayedString() const
-    {
-        return GetValueAsString(0);
-    }
-
-    /** Returns property grid where property lies. */
-    wxPropertyGrid* GetGrid() const;
-
-    /** Returns owner wxPropertyGrid, but only if one is currently on a page
-        displaying this property. */
-    wxPropertyGrid* GetGridIfDisplayed() const;
-
-    /** Returns highest level non-category, non-root parent. Useful when you
-        have nested wxCustomProperties/wxParentProperties.
-        @remarks
-        Thus, if immediate parent is root or category, this will return the
-        property itself.
-    */
-    wxPGProperty* GetMainParent() const;
-
-    /** Return parent of property */
-    wxPGProperty* GetParent() const { return m_parent; }
-
-    /** Returns true if property has editable wxTextCtrl when selected.
-
-        @remarks
-        Altough disabled properties do not displayed editor, they still
-        return True here as being disabled is considered a temporary
-        condition (unlike being read-only or having limited editing enabled).
-    */
-    bool IsTextEditable() const;
-
-    bool IsValueUnspecified() const
-    {
-        return m_value.IsNull();
-    }
-
-    FlagType HasFlag( FlagType flag ) const
-    {
-        return ( m_flags & flag );
-    }
-
-    /** Returns comma-delimited string of property attributes.
-    */
-    const wxPGAttributeStorage& GetAttributes() const
-    {
-        return m_attributes;
-    }
-
-    /** Returns m_attributes as list wxVariant.
-    */
-    wxVariant GetAttributesAsList() const;
-
-    FlagType GetFlags() const
-    {
-        return m_flags;
-    }
-
-    const wxPGEditor* GetEditorClass() const;
-
-    wxString GetValueType() const
-    {
-        return m_value.GetType();
-    }
-
-    /** Returns editor used for given column. NULL for no editor.
-    */
-    const wxPGEditor* GetColumnEditor( int column ) const
-    {
-        if ( column == 1 )
-            return GetEditorClass();
-
-        return NULL;
-    }
-
-    /** Returns common value selected for this property. -1 for none.
-    */
-    int GetCommonValue() const
-    {
-        return m_commonValue;
-    }
-
-    /** Returns true if property has even one visible child.
-    */
-    bool HasVisibleChildren() const;
-
-    /**
-        Use this member function to add independent (ie. regular) children to
-        a property.
-
-        @return Inserted childProperty.
-
-        @remarks wxPropertyGrid is not automatically refreshed by this
-                 function.
-
-        @see AddPrivateChild()
-    */
-    wxPGProperty* InsertChild( int index, wxPGProperty* childProperty );
-
-    /** Inserts a new choice to property's list of choices.
-    */
-    int InsertChoice( const wxString& label, int index, int value = wxPG_INVALID_VALUE );
-
-    /**
-        Returns true if this property is actually a wxPropertyCategory.
-    */
-    bool IsCategory() const { return HasFlag(wxPG_PROP_CATEGORY)?true:false; }
-
-    /** Returns true if this property is actually a wxRootProperty.
-    */
-    bool IsRoot() const { return (m_parent == NULL); }
-
-    /** Returns true if this is a sub-property. */
-    bool IsSubProperty() const
-    {
-        wxPGProperty* parent = (wxPGProperty*)m_parent;
-        if ( parent && !parent->IsCategory() )
-            return true;
-        return false;
-    }
-
-    /** Returns last visible sub-property, recursively.
-    */
-    const wxPGProperty* GetLastVisibleSubItem() const;
-
-    wxVariant GetDefaultValue() const;
-
-    int GetMaxLength() const
-    {
-        return (int) m_maxLen;
-    }
-
-    /**
-        Determines, recursively, if all children are not unspecified.
-
-        @param pendingList
-            Assumes members in this wxVariant list as pending
-            replacement values.
-    */
-    bool AreAllChildrenSpecified( wxVariant* pendingList = NULL ) const;
-
-    /** Updates composed values of parent non-category properties, recursively.
-        Returns topmost property updated.
-
-        @remarks
-        - Must not call SetValue() (as can be called in it).
-    */
-    wxPGProperty* UpdateParentValues();
-
-    /** Returns true if containing grid uses wxPG_EX_AUTO_UNSPECIFIED_VALUES.
-    */
-    bool UsesAutoUnspecified() const
-    {
-        return HasFlag(wxPG_PROP_AUTO_UNSPECIFIED)?true:false;
-    }
-
-    wxBitmap* GetValueImage() const
-    {
-        return m_valueBitmap;
-    }
-
-    wxVariant GetAttribute( const wxString& name ) const;
-
-    /**
-        Returns named attribute, as string, if found.
-
-        Otherwise defVal is returned.
-    */
-    wxString GetAttribute( const wxString& name, const wxString& defVal ) const;
-
-    /**
-        Returns named attribute, as long, if found.
-
-        Otherwise defVal is returned.
-    */
-    long GetAttributeAsLong( const wxString& name, long defVal ) const;
-
-    /**
-        Returns named attribute, as double, if found.
-
-        Otherwise defVal is returned.
-    */
-    double GetAttributeAsDouble( const wxString& name, double defVal ) const;
-
-    unsigned int GetDepth() const { return (unsigned int)m_depth; }
-
-    /** Gets flags as a'|' delimited string. Note that flag names are not
-        prepended with 'wxPG_PROP_'.
-        @param flagsMask
-        String will only be made to include flags combined by this parameter.
-    */
-    wxString GetFlagsAsString( FlagType flagsMask ) const;
-
-    /** Returns position in parent's array. */
-    unsigned int GetIndexInParent() const
-    {
-        return (unsigned int)m_arrIndex;
-    }
-
-    /** Hides or reveals the property.
-        @param hide
-            true for hide, false for reveal.
-        @param flags
-            By default changes are applied recursively. Set this paramter
-            wxPG_DONT_RECURSE to prevent this.
-    */
-    inline bool Hide( bool hide, int flags = wxPG_RECURSE );
-
-    bool IsExpanded() const
-        { return (!(m_flags & wxPG_PROP_COLLAPSED) && GetChildCount()); }
-
-    /** Returns true if all parents expanded.
-    */
-    bool IsVisible() const;
-
-    bool IsEnabled() const { return !(m_flags & wxPG_PROP_DISABLED); }
-
-    /** If property's editor is created this forces its recreation.
-        Useful in SetAttribute etc. Returns true if actually did anything.
-    */
-    bool RecreateEditor();
-
-    /** If property's editor is active, then update it's value.
-    */
-    void RefreshEditor();
-
-    /** Sets an attribute for this property.
-        @param name
-        Text identifier of attribute. See @ref propgrid_property_attributes.
-        @param value
-        Value of attribute.
-    */
-    void SetAttribute( const wxString& name, wxVariant value );
-
-    void SetAttributes( const wxPGAttributeStorage& attributes );
-
-    /**
-        Sets property's background colour.
-
-        @param colour
-            Background colour to use.
-
-        @param recursively
-            If @true, children are affected recursively, and any categories
-            are not.
-    */
-    void SetBackgroundColour( const wxColour& colour,
-                              bool recursively = false );
-
-    /**
-        Sets property's text colour.
-
-        @param colour
-            Text colour to use.
-
-        @param recursively
-            If @true, children are affected recursively, and any categories
-            are not.
-    */
-    void SetTextColour( const wxColour& colour,
-                        bool recursively = false );
-
-#ifndef SWIG
-    /** Sets editor for a property.
-
-        @param editor
-            For builtin editors, use wxPGEditor_X, where X is builtin editor's
-            name (TextCtrl, Choice, etc. see wxPGEditor documentation for full
-            list).
-
-        For custom editors, use pointer you received from
-        wxPropertyGrid::RegisterEditorClass().
-    */
-    void SetEditor( const wxPGEditor* editor )
-    {
-        m_customEditor = editor;
-    }
-#endif
-
-    /** Sets editor for a property.
-    */
-    inline void SetEditor( const wxString& editorName );
-
-    /**
-        Sets cell information for given column.
-    */
-    void SetCell( int column, const wxPGCell& cell );
-
-    /** Sets common value selected for this property. -1 for none.
-    */
-    void SetCommonValue( int commonValue )
-    {
-        m_commonValue = commonValue;
-    }
-
-    /** Sets flags from a '|' delimited string. Note that flag names are not
-        prepended with 'wxPG_PROP_'.
-    */
-    void SetFlagsFromString( const wxString& str );
-
-    /** Sets property's "is it modified?" flag. Affects children recursively.
-    */
-    void SetModifiedStatus( bool modified )
-    {
-        SetFlagRecursively(wxPG_PROP_MODIFIED, modified);
-    }
-
-    /** Call in OnEvent(), OnButtonClick() etc. to change the property value
-        based on user input.
-
-        @remarks
-        This method is const since it doesn't actually modify value, but posts
-        given variant as pending value, stored in wxPropertyGrid.
-    */
-    void SetValueInEvent( wxVariant value ) const;
-
-    /**
-        Call this to set value of the property.
-
-        Unlike methods in wxPropertyGrid, this does not automatically update
-        the display.
-
-        @remarks
-        Use wxPropertyGrid::ChangePropertyValue() instead if you need to run
-        through validation process and send property change event.
-
-        If you need to change property value in event, based on user input, use
-        SetValueInEvent() instead.
-
-        @param pList
-            Pointer to list variant that contains child values. Used to
-            indicate which children should be marked as modified.
-
-        @param flags
-            Various flags (for instance, wxPG_SETVAL_REFRESH_EDITOR, which is
-            enabled by default).
-    */
-    void SetValue( wxVariant value, wxVariant* pList = NULL,
-                   int flags = wxPG_SETVAL_REFRESH_EDITOR );
-
-    /** Set wxBitmap in front of the value. This bitmap may be ignored
-        by custom cell renderers.
-    */
-    void SetValueImage( wxBitmap& bmp );
-
-    /** Sets selected choice and changes property value.
-
-        Tries to retain value type, although currently if it is not string,
-        then it is forced to integer.
-    */
-    void SetChoiceSelection( int newValue );
-
-    void SetExpanded( bool expanded )
-    {
-        if ( !expanded ) m_flags |= wxPG_PROP_COLLAPSED;
-        else m_flags &= ~wxPG_PROP_COLLAPSED;
-    }
-
-    void SetFlag( FlagType flag ) { m_flags |= flag; }
-
-    void SetFlagRecursively( FlagType flag, bool set );
-
-    void SetHelpString( const wxString& helpString )
-    {
-        m_helpString = helpString;
-    }
-
-    void SetLabel( const wxString& label ) { m_label = label; }
-
-    inline void SetName( const wxString& newName );
-
-    /**
-        Changes what sort of parent this property is for its children.
-
-        @param flag
-            Use one of the following values: wxPG_PROP_MISC_PARENT (for
-            generic parents), wxPG_PROP_CATEGORY (for categories), or
-            wxPG_PROP_AGGREGATE (for derived property classes with private
-            children).
-
-        @remarks You generally do not need to call this function.
-    */
-    void SetParentalType( int flag )
-    {
-        m_flags &= ~(wxPG_PROP_PROPERTY|wxPG_PROP_PARENTAL_FLAGS);
-        m_flags |= flag;
-    }
-
-    void SetValueToUnspecified()
-    {
-        wxVariant val;  // Create NULL variant
-        SetValue(val);
-    }
-
-    // Helper function (for wxPython bindings and such) for settings protected
-    // m_value.
-    void SetValuePlain( wxVariant value )
-    {
-        m_value = value;
-    }
-
-#if wxUSE_VALIDATORS
-    /** Sets wxValidator for a property*/
-    void SetValidator( const wxValidator& validator )
-    {
-        m_validator = wxDynamicCast(validator.Clone(),wxValidator);
-    }
-
-    /** Gets assignable version of property's validator. */
-    wxValidator* GetValidator() const
-    {
-        if ( m_validator )
-            return m_validator;
-        return DoGetValidator();
-    }
-#endif // #if wxUSE_VALIDATORS
-
-#ifndef SWIG
-    /** Returns client data (void*) of a property.
-    */
-    void* GetClientData() const
-    {
-        return m_clientData;
-    }
-
-    /** Sets client data (void*) of a property.
-        @remarks
-        This untyped client data has to be deleted manually.
-    */
-    void SetClientData( void* clientData )
-    {
-        m_clientData = clientData;
-    }
-
-    /** Returns client object of a property.
-    */
-    void SetClientObject(wxClientData* clientObject)
-    {
-        delete m_clientObject;
-        m_clientObject = clientObject;
-    }
-
-    /** Sets managed client object of a property.
-    */
-    wxClientData *GetClientObject() const { return m_clientObject; }
-#endif
-
-    /** Sets new set of choices for property.
-
-        @remarks
-        This operation clears the property value.
-    */
-    bool SetChoices( wxPGChoices& choices );
-
-    /** Set max length of text in text editor.
-    */
-    inline bool SetMaxLength( int maxLen );
-
-    /** Call with 'false' in OnSetValue to cancel value changes after all
-        (ie. cancel 'true' returned by StringToValue() or IntToValue()).
-    */
-    void SetWasModified( bool set = true )
-    {
-        if ( set ) m_flags |= wxPG_PROP_WAS_MODIFIED;
-        else m_flags &= ~wxPG_PROP_WAS_MODIFIED;
-    }
-
-    const wxString& GetHelpString() const
-    {
-        return m_helpString;
-    }
-
-    void ClearFlag( FlagType flag ) { m_flags &= ~(flag); }
-
-    // Use, for example, to detect if item is inside collapsed section.
-    bool IsSomeParent( wxPGProperty* candidate_parent ) const;
-
-    /**
-        Adapts list variant into proper value using consecutive
-        ChildChanged-calls.
-    */
-    void AdaptListToValue( wxVariant& list, wxVariant* value ) const;
-
-#if wxPG_COMPATIBILITY_1_4
-    /**
-        Adds a private child property.
-
-        @deprecated Use AddPrivateChild() instead.
-
-        @see AddPrivateChild()
-    */
-    wxDEPRECATED( void AddChild( wxPGProperty* prop ) );
-#endif
-
-    /**
-        Adds a private child property. If you use this instead of
-        wxPropertyGridInterface::Insert() or
-        wxPropertyGridInterface::AppendIn(), then property's parental
-        type will automatically be set up to wxPG_PROP_AGGREGATE. In other
-        words, all properties of this property will become private.
-    */
-    void AddPrivateChild( wxPGProperty* prop );
-
-    /**
-        Appends a new child property.
-    */
-    wxPGProperty* AppendChild( wxPGProperty* prop )
-    {
-        return InsertChild(-1, prop);
-    }
-
-    /** Returns height of children, recursively, and
-        by taking expanded/collapsed status into account.
-
-        iMax is used when finding property y-positions.
-    */
-    int GetChildrenHeight( int lh, int iMax = -1 ) const;
-
-    /** Returns number of child properties */
-    unsigned int GetChildCount() const
-    {
-        return (unsigned int) m_children.size();
-    }
-
-    /** Returns sub-property at index i. */
-    wxPGProperty* Item( unsigned int i ) const
-        { return m_children[i]; }
-
-    /** Returns last sub-property.
-    */
-    wxPGProperty* Last() const { return m_children.back(); }
-
-    /** Returns index of given child property. */
-    int Index( const wxPGProperty* p ) const;
-
-    // Puts correct indexes to children
-    void FixIndicesOfChildren( unsigned int starthere = 0 );
-
-    /**
-        Converts image width into full image offset, with margins.
-    */
-    int GetImageOffset( int imageWidth ) const;
-
-#ifndef SWIG
-    // Returns wxPropertyGridPageState in which this property resides.
-    wxPropertyGridPageState* GetParentState() const { return m_parentState; }
-#endif
-
-#ifndef SWIG
-    wxPGProperty* GetItemAtY( unsigned int y,
-                              unsigned int lh,
-                              unsigned int* nextItemY ) const;
-#endif
-
-    wxPGProperty* GetItemAtY( unsigned int y ) const;
-
-    /** Returns (direct) child property with given name (or NULL if not found).
-    */
-    wxPGProperty* GetPropertyByName( const wxString& name ) const;
-
-#ifndef SWIG
-
-    // Returns various display-related information for given column
-    void GetDisplayInfo( unsigned int column,
-                         int choiceIndex,
-                         int flags,
-                         wxString* pString,
-                         const wxPGCell** pCell );
-
-    static wxString*            sm_wxPG_LABEL;
-
-    /** This member is public so scripting language bindings
-        wrapper code can access it freely.
-    */
-    void*                       m_clientData;
-
-protected:
-
-    /**
-        Sets property cell in fashion that reduces number of exclusive
-        copies of cell data. Used when setting, for instance, same
-        background colour for a number of properties.
-
-        @param firstCol
-            First column to affect.
-
-        @param lastCol
-            Last column to affect.
-
-        @param preparedCell
-            Pre-prepared cell that is used for those which cell data
-            before this matched unmodCellData.
-
-        @param srcData
-            If unmodCellData did not match, valid cell data from this
-            is merged into cell (usually generating new exclusive copy
-            of cell's data).
-
-        @param unmodCellData
-            If cell's cell data matches this, its cell is now set to
-            preparedCell.
-
-        @param ignoreWithFlags
-            Properties with any one of these flags are skipped.
-
-        @param recursively
-            If @true, apply this operation recursively in child properties.
-    */
-    void AdaptiveSetCell( unsigned int firstCol,
-                          unsigned int lastCol,
-                          const wxPGCell& preparedCell,
-                          const wxPGCell& srcData,
-                          wxPGCellData* unmodCellData,
-                          FlagType ignoreWithFlags,
-                          bool recursively );
-
-    /**
-        Makes sure m_cells has size of column+1 (or more).
-    */
-    void EnsureCells( unsigned int column );
-
-    /** Returns (direct) child property with given name (or NULL if not found),
-        with hint index.
-
-        @param hintIndex
-        Start looking for the child at this index.
-
-        @remarks
-        Does not support scope (ie. Parent.Child notation).
-    */
-    wxPGProperty* GetPropertyByNameWH( const wxString& name,
-                                       unsigned int hintIndex ) const;
-
-    /** This is used by Insert etc. */
-    void DoAddChild( wxPGProperty* prop,
-                     int index = -1,
-                     bool correct_mode = true );
-
-    void DoGenerateComposedValue( wxString& text,
-                                  int argFlags = wxPG_VALUE_IS_CURRENT,
-                                  const wxVariantList* valueOverrides = NULL,
-                                  wxPGHashMapS2S* childResults = NULL ) const;
-
-    void DoSetName(const wxString& str) { m_name = str; }
-
-    /** Deletes all sub-properties. */
-    void Empty();
-
-    void InitAfterAdded( wxPropertyGridPageState* pageState,
-                         wxPropertyGrid* propgrid );
-
-    // Removes child property with given pointer. Does not delete it.
-    void RemoveChild( wxPGProperty* p );
-
-    void DoPreAddChild( int index, wxPGProperty* prop );
-
-    void SetParentState( wxPropertyGridPageState* pstate )
-        { m_parentState = pstate; }
-
-    // Call after fixed sub-properties added/removed after creation.
-    // if oldSelInd >= 0 and < new max items, then selection is
-    // moved to it.
-    void SubPropsChanged( int oldSelInd = -1 );
-
-    int GetY2( int lh ) const;
-
-    wxString                    m_label;
-    wxString                    m_name;
-    wxPGProperty*               m_parent;
-    wxPropertyGridPageState*    m_parentState;
-
-    wxClientData*               m_clientObject;
-
-    // Overrides editor returned by property class
-    const wxPGEditor*           m_customEditor;
-#if wxUSE_VALIDATORS
-    // Editor is going to get this validator
-    wxValidator*                m_validator;
-#endif
-    // Show this in front of the value
-    //
-    // TODO: Can bitmap be implemented with wxPGCell?
-    wxBitmap*                   m_valueBitmap;
-
-    wxVariant                   m_value;
-    wxPGAttributeStorage        m_attributes;
-    wxArrayPGProperty           m_children;
-
-    // Extended cell information
-    wxVector<wxPGCell>          m_cells;
-
-    // Choices shown in drop-down list of editor control.
-    wxPGChoices                 m_choices;
-
-    // Help shown in statusbar or help box.
-    wxString                    m_helpString;
-
-    // Index in parent's property array.
-    unsigned int                m_arrIndex;
-
-    // If not -1, then overrides m_value
-    int                         m_commonValue;
-
-    FlagType                    m_flags;
-
-    // Maximum length (mainly for string properties). Could be in some sort of
-    // wxBaseStringProperty, but currently, for maximum flexibility and
-    // compatibility, we'll stick it here. Anyway, we had 3 excess bytes to use
-    // so short int will fit in just fine.
-    short                       m_maxLen;
-
-    // Root has 0, categories etc. at that level 1, etc.
-    unsigned char               m_depth;
-
-    // m_depthBgCol indicates width of background colour between margin and item
-    // (essentially this is category's depth, if none then equals m_depth).
-    unsigned char               m_depthBgCol;
-
-private:
-    // Called in constructors.
-    void Init();
-    void Init( const wxString& label, const wxString& name );
-#endif // #ifndef SWIG
-};
-
-// -----------------------------------------------------------------------
-
-//
-// Property class declaration helper macros
-// (wxPGRootPropertyClass and wxPropertyCategory require this).
-//
-
-#define WX_PG_DECLARE_DOGETEDITORCLASS \
-    virtual const wxPGEditor* DoGetEditorClass() const;
-
-#ifndef SWIG
-    #define WX_PG_DECLARE_PROPERTY_CLASS(CLASSNAME) \
-        public: \
-            DECLARE_DYNAMIC_CLASS(CLASSNAME) \
-            WX_PG_DECLARE_DOGETEDITORCLASS \
-        private:
-#else
-    #define WX_PG_DECLARE_PROPERTY_CLASS(CLASSNAME)
-#endif
-
-// Implements sans constructor function. Also, first arg is class name, not
-// property name.
-#define WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(PROPNAME,T,EDITOR) \
-const wxPGEditor* PROPNAME::DoGetEditorClass() const \
-{ \
-    return wxPGEditor_##EDITOR; \
-}
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-/** @class wxPGRootProperty
-    @ingroup classes
-    Root parent property.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGRootProperty : public wxPGProperty
-{
-public:
-    WX_PG_DECLARE_PROPERTY_CLASS(wxPGRootProperty)
-public:
-
-    /** Constructor. */
-    wxPGRootProperty( const wxString& name = wxS("<Root>") );
-    virtual ~wxPGRootProperty();
-
-    virtual bool StringToValue( wxVariant&, const wxString&, int ) const
-    {
-        return false;
-    }
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxPropertyCategory
-    @ingroup classes
-    Category (caption) property.
-*/
-class WXDLLIMPEXP_PROPGRID wxPropertyCategory : public wxPGProperty
-{
-    friend class wxPropertyGrid;
-    friend class wxPropertyGridPageState;
-    WX_PG_DECLARE_PROPERTY_CLASS(wxPropertyCategory)
-public:
-
-    /** Default constructor is only used in special cases. */
-    wxPropertyCategory();
-
-    wxPropertyCategory( const wxString& label,
-                        const wxString& name = wxPG_LABEL );
-    ~wxPropertyCategory();
-
-    int GetTextExtent( const wxWindow* wnd, const wxFont& font ) const;
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags ) const;
-
-protected:
-    void SetTextColIndex( unsigned int colInd )
-        { m_capFgColIndex = (wxByte) colInd; }
-    unsigned int GetTextColIndex() const
-        { return (unsigned int) m_capFgColIndex; }
-
-    void CalculateTextExtent( wxWindow* wnd, const wxFont& font );
-
-    int     m_textExtent;  // pre-calculated length of text
-    wxByte  m_capFgColIndex;  // caption text colour index
-
-private:
-    void Init();
-};
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_PROPERTY_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/property.h
+// Purpose:     wxPGProperty and related support classes
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2008-08-23
+// RCS-ID:      $Id: property.h 60911 2009-06-06 15:24:51Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_PROPERTY_H_
+#define _WX_PROPGRID_PROPERTY_H_
+
+#if wxUSE_PROPGRID
+
+#include "wx/propgrid/propgriddefs.h"
+
+// -----------------------------------------------------------------------
+
+#define wxNullProperty  ((wxPGProperty*)NULL)
+
+
+/** @class wxPGPaintData
+
+    Contains information relayed to property's OnCustomPaint.
+*/
+struct wxPGPaintData
+{
+    /** wxPropertyGrid. */
+    const wxPropertyGrid*   m_parent;
+
+    /**
+        Normally -1, otherwise index to drop-down list item that has to be
+        drawn.
+     */
+    int                     m_choiceItem;
+
+    /** Set to drawn width in OnCustomPaint (optional). */
+    int                     m_drawnWidth;
+
+    /**
+        In a measure item call, set this to the height of item at m_choiceItem
+        index.
+     */
+    int                     m_drawnHeight;
+};
+
+
+#ifndef SWIG
+
+
+// space between vertical sides of a custom image
+#define wxPG_CUSTOM_IMAGE_SPACINGY      1
+
+// space between caption and selection rectangle,
+#define wxPG_CAPRECTXMARGIN             2
+
+// horizontally and vertically
+#define wxPG_CAPRECTYMARGIN             1
+
+
+/** @class wxPGCellRenderer
+
+    Base class for wxPropertyGrid cell renderers.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGCellRenderer
+{
+public:
+
+    wxPGCellRenderer( unsigned int refCount = 1 )
+        : m_refCount(refCount) { }
+    virtual ~wxPGCellRenderer() { }
+
+    // Render flags
+    enum
+    {
+        // We are painting selected item
+        Selected        = 0x00010000,
+
+        // We are painting item in choice popup
+        ChoicePopup     = 0x00020000,
+
+        // We are rendering wxOwnerDrawnComboBox control
+        // (or other owner drawn control, but that is only
+        // officially supported one ATM).
+        Control         = 0x00040000,
+
+        // We are painting a disable property
+        Disabled        = 0x00080000,
+
+        // We are painting selected, disabled, or similar
+        // item that dictates fore- and background colours,
+        // overriding any cell values.
+        DontUseCellFgCol    = 0x00100000,
+        DontUseCellBgCol    = 0x00200000,
+        DontUseCellColours  = DontUseCellFgCol |
+                              DontUseCellBgCol
+    };
+
+    virtual void Render( wxDC& dc,
+                         const wxRect& rect,
+                         const wxPropertyGrid* propertyGrid,
+                         wxPGProperty* property,
+                         int column,
+                         int item,
+                         int flags ) const = 0;
+
+    /** Returns size of the image in front of the editable area.
+        @remarks
+        If property is NULL, then this call is for a custom value. In that case
+        the item is index to wxPropertyGrid's custom values.
+    */
+    virtual wxSize GetImageSize( const wxPGProperty* property,
+                                 int column,
+                                 int item ) const;
+
+    /** Paints property category selection rectangle.
+    */
+    virtual void DrawCaptionSelectionRect( wxDC& dc,
+                                           int x, int y,
+                                           int w, int h ) const;
+
+    /** Utility to draw vertically centered text.
+    */
+    void DrawText( wxDC& dc,
+                   const wxRect& rect,
+                   int imageWidth,
+                   const wxString& text ) const;
+
+    /**
+        Utility to draw editor's value, or vertically aligned text if editor is
+        NULL.
+    */
+    void DrawEditorValue( wxDC& dc, const wxRect& rect,
+                          int xOffset, const wxString& text,
+                          wxPGProperty* property,
+                          const wxPGEditor* editor ) const;
+
+    /** Utility to render cell bitmap and set text colour plus bg brush colour.
+
+        Returns image width that, for instance, can be passed to DrawText.
+    */
+    int PreDrawCell( wxDC& dc,
+                     const wxRect& rect,
+                     const wxPGCell& cell,
+                     int flags ) const;
+
+    void IncRef()
+    {
+        m_refCount++;
+    }
+
+    void DecRef()
+    {
+        m_refCount--;
+        if ( !m_refCount )
+            delete this;
+    }
+protected:
+
+private:
+    unsigned int    m_refCount;
+};
+
+
+class WXDLLIMPEXP_PROPGRID wxPGCellData : public wxObjectRefData
+{
+    friend class wxPGCell;
+public:
+    wxPGCellData();
+
+    void SetText( const wxString& text )
+    {
+        m_text = text;
+        m_hasValidText = true;
+    }
+    void SetBitmap( const wxBitmap& bitmap ) { m_bitmap = bitmap; }
+    void SetFgCol( const wxColour& col ) { m_fgCol = col; }
+    void SetBgCol( const wxColour& col ) { m_bgCol = col; }
+
+protected:
+    virtual ~wxPGCellData() { }
+
+    wxString    m_text;
+    wxBitmap    m_bitmap;
+    wxColour    m_fgCol;
+    wxColour    m_bgCol;
+
+    // True if m_text is valid and specified
+    bool        m_hasValidText;
+};
+
+/** @class wxPGCell
+
+    Base class for simple wxPropertyGrid cell information.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGCell : public wxObject
+{
+public:
+    wxPGCell();
+    wxPGCell(const wxPGCell& other)
+        : wxObject(other)
+    {
+    }
+
+    wxPGCell( const wxString& text,
+              const wxBitmap& bitmap = wxNullBitmap,
+              const wxColour& fgCol = wxNullColour,
+              const wxColour& bgCol = wxNullColour );
+
+    virtual ~wxPGCell() { }
+
+    wxPGCellData* GetData()
+    {
+        return (wxPGCellData*) m_refData;
+    }
+
+    const wxPGCellData* GetData() const
+    {
+        return (const wxPGCellData*) m_refData;
+    }
+
+    bool HasText() const
+    {
+        return (m_refData && GetData()->m_hasValidText);
+    }
+
+    /**
+        Merges valid data from srcCell into this.
+    */
+    void MergeFrom( const wxPGCell& srcCell );
+
+    void SetText( const wxString& text );
+    void SetBitmap( const wxBitmap& bitmap );
+    void SetFgCol( const wxColour& col );
+    void SetBgCol( const wxColour& col );
+
+    const wxString& GetText() const { return GetData()->m_text; }
+    const wxBitmap& GetBitmap() const { return GetData()->m_bitmap; }
+    const wxColour& GetFgCol() const { return GetData()->m_fgCol; }
+    const wxColour& GetBgCol() const { return GetData()->m_bgCol; }
+
+    wxPGCell& operator=( const wxPGCell& other )
+    {
+        if ( this != &other )
+        {
+            Ref(other);
+        }
+        return *this;
+    }
+
+protected:
+    virtual wxObjectRefData *CreateRefData() const
+        { return new wxPGCellData(); }
+
+    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;
+};
+
+
+/** @class wxPGDefaultRenderer
+
+    Default cell renderer, that can handles the common
+    scenarios.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGDefaultRenderer : public wxPGCellRenderer
+{
+public:
+    virtual void Render( wxDC& dc,
+                         const wxRect& rect,
+                         const wxPropertyGrid* propertyGrid,
+                         wxPGProperty* property,
+                         int column,
+                         int item,
+                         int flags ) const;
+
+    virtual wxSize GetImageSize( const wxPGProperty* property,
+                                 int column,
+                                 int item ) const;
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxPGAttributeStorage
+
+    wxPGAttributeStorage is somewhat optimized storage for
+      key=variant pairs (ie. a map).
+*/
+class WXDLLIMPEXP_PROPGRID wxPGAttributeStorage
+{
+public:
+    wxPGAttributeStorage();
+    ~wxPGAttributeStorage();
+
+    void Set( const wxString& name, const wxVariant& value );
+    unsigned int GetCount() const { return (unsigned int) m_map.size(); }
+    wxVariant FindValue( const wxString& name ) const
+    {
+        wxPGHashMapS2P::const_iterator it = m_map.find(name);
+        if ( it != m_map.end() )
+        {
+            wxVariantData* data = (wxVariantData*) it->second;
+            data->IncRef();
+            return wxVariant(data, it->first);
+        }
+        return wxVariant();
+    }
+
+    typedef wxPGHashMapS2P::const_iterator const_iterator;
+    const_iterator StartIteration() const
+    {
+        return m_map.begin();
+    }
+    bool GetNext( const_iterator& it, wxVariant& variant ) const
+    {
+        if ( it == m_map.end() )
+            return false;
+
+        wxVariantData* data = (wxVariantData*) it->second;
+        data->IncRef();
+        variant.SetData(data);
+        variant.SetName(it->first);
+        ++it;
+        return true;
+    }
+
+protected:
+    wxPGHashMapS2P  m_map;
+};
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+/** @section propgrid_propflags wxPGProperty Flags
+    @{
+*/
+
+enum wxPG_PROPERTY_FLAGS
+{
+
+/** Indicates bold font.
+*/
+wxPG_PROP_MODIFIED                  = 0x0001,
+
+/** Disables ('greyed' text and editor does not activate) property.
+*/
+wxPG_PROP_DISABLED                  = 0x0002,
+
+/** Hider button will hide this property.
+*/
+wxPG_PROP_HIDDEN                    = 0x0004,
+
+/** This property has custom paint image just in front of its value.
+    If property only draws custom images into a popup list, then this
+    flag should not be set.
+*/
+wxPG_PROP_CUSTOMIMAGE               = 0x0008,
+
+/** Do not create text based editor for this property (but button-triggered
+    dialog and choice are ok).
+*/
+wxPG_PROP_NOEDITOR                  = 0x0010,
+
+/** Property is collapsed, ie. it's children are hidden.
+*/
+wxPG_PROP_COLLAPSED                 = 0x0020,
+
+/**
+    If property is selected, then indicates that validation failed for pending
+    value.
+
+    If property is not selected, then indicates that the the actual property
+    value has failed validation (NB: this behavior is not currently supported,
+    but may be used in future).
+*/
+wxPG_PROP_INVALID_VALUE             = 0x0040,
+
+// 0x0080,
+
+/** Switched via SetWasModified(). Temporary flag - only used when
+    setting/changing property value.
+*/
+wxPG_PROP_WAS_MODIFIED              = 0x0200,
+
+/**
+    If set, then child properties (if any) are private, and should be
+    "invisible" to the application.
+*/
+wxPG_PROP_AGGREGATE                 = 0x0400,
+
+/** If set, then child properties (if any) are copies and should not
+    be deleted in dtor.
+*/
+wxPG_PROP_CHILDREN_ARE_COPIES       = 0x0800,
+
+/**
+    Classifies this item as a non-category.
+
+    Used for faster item type identification.
+*/
+wxPG_PROP_PROPERTY                  = 0x1000,
+
+/**
+    Classifies this item as a category.
+
+    Used for faster item type identification.
+*/
+wxPG_PROP_CATEGORY                  = 0x2000,
+
+/** Classifies this item as a property that has children, but is not aggregate
+    (ie children are not private).
+*/
+wxPG_PROP_MISC_PARENT               = 0x4000,
+
+/** Property is read-only. Editor is still created.
+*/
+wxPG_PROP_READONLY                  = 0x8000,
+
+//
+// NB: FLAGS ABOVE 0x8000 CANNOT BE USED WITH PROPERTY ITERATORS
+//
+
+/** Property's value is composed from values of child properties.
+    @remarks
+    This flag cannot be used with property iterators.
+*/
+wxPG_PROP_COMPOSED_VALUE            = 0x00010000,
+
+/** Common value of property is selectable in editor.
+    @remarks
+    This flag cannot be used with property iterators.
+*/
+wxPG_PROP_USES_COMMON_VALUE         = 0x00020000,
+
+/** Property can be set to unspecified value via editor.
+    Currently, this applies to following properties:
+    - wxIntProperty, wxUIntProperty, wxFloatProperty, wxEditEnumProperty:
+      Clear the text field
+
+    @remarks
+    This flag cannot be used with property iterators.
+*/
+wxPG_PROP_AUTO_UNSPECIFIED          = 0x00040000,
+
+/** Indicates the bit useable by derived properties.
+*/
+wxPG_PROP_CLASS_SPECIFIC_1          = 0x00080000,
+
+/** Indicates the bit useable by derived properties.
+*/
+wxPG_PROP_CLASS_SPECIFIC_2          = 0x00100000
+
+};
+
+/** Topmost flag.
+*/
+#define wxPG_PROP_MAX               wxPG_PROP_AUTO_UNSPECIFIED
+
+/** Property with children must have one of these set, otherwise iterators
+    will not work correctly.
+    Code should automatically take care of this, however.
+*/
+#define wxPG_PROP_PARENTAL_FLAGS \
+    (wxPG_PROP_AGGREGATE|wxPG_PROP_CATEGORY|wxPG_PROP_MISC_PARENT)
+
+/** @}
+*/
+
+// Combination of flags that can be stored by GetFlagsAsString
+#define wxPG_STRING_STORED_FLAGS \
+    (wxPG_PROP_DISABLED|wxPG_PROP_HIDDEN|wxPG_PROP_NOEDITOR|wxPG_PROP_COLLAPSED)
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+/**
+    @section propgrid_property_attributes wxPropertyGrid Property Attribute
+    Identifiers.
+
+    wxPGProperty::SetAttribute() and
+    wxPropertyGridInterface::SetPropertyAttribute() accept one of these as
+    attribute name argument.
+
+    You can use strings instead of constants. However, some of these
+    constants are redefined to use cached strings which may reduce
+    your binary size by some amount.
+
+    @{
+*/
+
+/** Set default value for property.
+*/
+#define wxPG_ATTR_DEFAULT_VALUE           wxS("DefaultValue")
+
+/** Universal, int or double. Minimum value for numeric properties.
+*/
+#define wxPG_ATTR_MIN                     wxS("Min")
+
+/** Universal, int or double. Maximum value for numeric properties.
+*/
+#define wxPG_ATTR_MAX                     wxS("Max")
+
+/** Universal, string. When set, will be shown as text after the displayed
+    text value. Alternatively, if third column is enabled, text will be shown
+    there (for any type of property).
+*/
+#define wxPG_ATTR_UNITS                     wxS("Units")
+
+/** Universal, string. When set, will be shown in property's value cell
+    when displayed value string is empty, or value is unspecified.
+*/
+#define wxPG_ATTR_INLINE_HELP               wxS("InlineHelp")
+
+/** Universal, wxArrayString. Set to enable auto-completion in any
+    wxTextCtrl-based property editor.
+*/
+#define wxPG_ATTR_AUTOCOMPLETE              wxS("AutoComplete")
+
+/** wxBoolProperty specific, int, default 0. When 1 sets bool property to
+    use checkbox instead of choice.
+*/
+#define wxPG_BOOL_USE_CHECKBOX              wxS("UseCheckbox")
+
+/** wxBoolProperty specific, int, default 0. When 1 sets bool property value
+    to cycle on double click (instead of showing the popup listbox).
+*/
+#define wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING  wxS("UseDClickCycling")
+
+/**
+    wxFloatProperty (and similar) specific, int, default -1.
+
+    Sets the (max) precision used when floating point value is rendered as
+    text. The default -1 means infinite precision.
+*/
+#define wxPG_FLOAT_PRECISION                wxS("Precision")
+
+/**
+    The text will be echoed as asterisks (wxTE_PASSWORD will be passed to
+    textctrl etc).
+*/
+#define wxPG_STRING_PASSWORD                wxS("Password")
+
+/** Define base used by a wxUIntProperty. Valid constants are
+    wxPG_BASE_OCT, wxPG_BASE_DEC, wxPG_BASE_HEX and wxPG_BASE_HEXL
+    (lowercase characters).
+*/
+#define wxPG_UINT_BASE                      wxS("Base")
+
+/** Define prefix rendered to wxUIntProperty. Accepted constants
+    wxPG_PREFIX_NONE, wxPG_PREFIX_0x, and wxPG_PREFIX_DOLLAR_SIGN.
+    <b>Note:</b> Only wxPG_PREFIX_NONE works with Decimal and Octal
+    numbers.
+*/
+#define wxPG_UINT_PREFIX                    wxS("Prefix")
+
+/**
+    wxFileProperty/wxImageFileProperty specific, wxChar*, default is
+    detected/varies.
+    Sets the wildcard used in the triggered wxFileDialog. Format is the same.
+*/
+#define wxPG_FILE_WILDCARD                  wxS("Wildcard")
+
+/** wxFileProperty/wxImageFileProperty specific, int, default 1.
+    When 0, only the file name is shown (i.e. drive and directory are hidden).
+*/
+#define wxPG_FILE_SHOW_FULL_PATH            wxS("ShowFullPath")
+
+/** Specific to wxFileProperty and derived properties, wxString, default empty.
+    If set, then the filename is shown relative to the given path string.
+*/
+#define wxPG_FILE_SHOW_RELATIVE_PATH        wxS("ShowRelativePath")
+
+/**
+    Specific to wxFileProperty and derived properties, wxString, default is
+    empty.
+
+    Sets the initial path of where to look for files.
+*/
+#define wxPG_FILE_INITIAL_PATH              wxS("InitialPath")
+
+/** Specific to wxFileProperty and derivatives, wxString, default is empty.
+    Sets a specific title for the dir dialog.
+*/
+#define wxPG_FILE_DIALOG_TITLE              wxS("DialogTitle")
+
+/** Specific to wxDirProperty, wxString, default is empty.
+    Sets a specific message for the dir dialog.
+*/
+#define wxPG_DIR_DIALOG_MESSAGE             wxS("DialogMessage")
+
+/** Sets displayed date format for wxDateProperty.
+*/
+#define wxPG_DATE_FORMAT                    wxS("DateFormat")
+
+/** Sets wxDatePickerCtrl window style used with wxDateProperty. Default
+    is wxDP_DEFAULT | wxDP_SHOWCENTURY.
+*/
+#define wxPG_DATE_PICKER_STYLE              wxS("PickerStyle")
+
+/** SpinCtrl editor, int or double. How much number changes when button is
+    pressed (or up/down on keybard).
+*/
+#define wxPG_ATTR_SPINCTRL_STEP             wxS("Step")
+
+/** SpinCtrl editor, bool. If true, value wraps at Min/Max.
+*/
+#define wxPG_ATTR_SPINCTRL_WRAP             wxS("Wrap")
+
+/**
+    wxMultiChoiceProperty, int.
+    If 0, no user strings allowed. If 1, user strings appear before list
+    strings. If 2, user strings appear after list string.
+*/
+#define wxPG_ATTR_MULTICHOICE_USERSTRINGMODE    wxS("UserStringMode")
+
+/**
+    wxColourProperty and its kind, int, default 1.
+
+    Setting this attribute to 0 hides custom colour from property's list of
+    choices.
+*/
+#define wxPG_COLOUR_ALLOW_CUSTOM            wxS("AllowCustom")
+
+/** @}
+*/
+
+// Redefine attribute macros to use cached strings
+#undef wxPG_ATTR_MIN
+#define wxPG_ATTR_MIN                     wxPGGlobalVars->m_strMin
+#undef wxPG_ATTR_MAX
+#define wxPG_ATTR_MAX                     wxPGGlobalVars->m_strMax
+#undef wxPG_ATTR_UNITS
+#define wxPG_ATTR_UNITS                   wxPGGlobalVars->m_strUnits
+#undef wxPG_ATTR_INLINE_HELP
+#define wxPG_ATTR_INLINE_HELP             wxPGGlobalVars->m_strInlineHelp
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+/** @class wxPGChoiceEntry
+    Data of a single wxPGChoices choice.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGChoiceEntry : public wxPGCell
+{
+public:
+    wxPGChoiceEntry();
+    wxPGChoiceEntry(const wxPGChoiceEntry& other)
+        : wxPGCell(other)
+    {
+        m_value = other.m_value;
+    }
+    wxPGChoiceEntry( const wxString& label,
+                     int value = wxPG_INVALID_VALUE )
+        : wxPGCell(), m_value(value)
+    {
+        SetText(label);
+    }
+
+    virtual ~wxPGChoiceEntry() { }
+
+    void SetValue( int value ) { m_value = value; }
+    int GetValue() const { return m_value; }
+
+    wxPGChoiceEntry& operator=( const wxPGChoiceEntry& other )
+    {
+        if ( this != &other )
+        {
+            Ref(other);
+        }
+        m_value = other.m_value;
+        return *this;
+    }
+
+protected:
+    int m_value;
+};
+
+
+typedef void* wxPGChoicesId;
+
+class WXDLLIMPEXP_PROPGRID wxPGChoicesData
+{
+    friend class wxPGChoices;
+public:
+    // Constructor sets m_refCount to 1.
+    wxPGChoicesData();
+
+    void CopyDataFrom( wxPGChoicesData* data );
+
+    wxPGChoiceEntry& Insert( int index, const wxPGChoiceEntry& item );
+
+    // Delete all entries
+    void Clear();
+
+    unsigned int GetCount() const
+    {
+        return (unsigned int) m_items.size();
+    }
+
+    const wxPGChoiceEntry& Item( unsigned int i ) const
+    {
+        wxASSERT_MSG( i < GetCount(), "invalid index" );
+        return m_items[i];
+    }
+
+    wxPGChoiceEntry& Item( unsigned int i )
+    {
+        wxASSERT_MSG( i < GetCount(), "invalid index" );
+        return m_items[i];
+    }
+
+    void DecRef()
+    {
+        m_refCount--;
+        wxASSERT( m_refCount >= 0 );
+        if ( m_refCount == 0 )
+            delete this;
+    }
+
+private:
+    wxVector<wxPGChoiceEntry>   m_items;
+
+    // So that multiple properties can use the same set
+    int             m_refCount;
+
+    virtual ~wxPGChoicesData();
+};
+
+#define wxPGChoicesEmptyData    ((wxPGChoicesData*)NULL)
+
+#endif // SWIG
+
+/** @class wxPGChoices
+
+    Helper class for managing choices of wxPropertyGrid properties.
+    Each entry can have label, value, bitmap, text colour, and background
+    colour.
+ 
+    wxPGChoices uses reference counting, similar to other wxWidgets classes.
+    This means that assignment operator and copy constructor only copy the
+    reference and not the actual data. Use Copy() member function to create a
+    real copy.
+
+    @remarks If you do not specify value for entry, index is used.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPGChoices
+{
+public:
+    typedef long ValArrItem;
+
+    /** Default constructor. */
+    wxPGChoices()
+    {
+        Init();
+    }
+
+    /**
+        Copy constructor, uses reference counting. To create a real copy,
+        use Copy() member function instead.
+    */
+    wxPGChoices( const wxPGChoices& a )
+    {
+        if ( a.m_data != wxPGChoicesEmptyData )
+        {
+            m_data = a.m_data;
+            m_data->m_refCount++;
+        }
+    }
+
+    /**
+        Constructor.
+
+        @param labels
+            Labels for choices
+
+        @param values
+            Values for choices. If NULL, indexes are used.
+    */
+    wxPGChoices( const wxChar** labels, const long* values = NULL )
+    {
+        Init();
+        Set(labels,values);
+    }
+
+    /**
+        Constructor.
+
+        @param labels
+            Labels for choices
+
+        @param values
+            Values for choices. If empty, indexes are used.
+    */
+    wxPGChoices( const wxArrayString& labels,
+                 const wxArrayInt& values = wxArrayInt() )
+    {
+        Init();
+        Set(labels,values);
+    }
+
+    /** Simple interface constructor. */
+    wxPGChoices( wxPGChoicesData* data )
+    {
+        wxASSERT(data);
+        m_data = data;
+        data->m_refCount++;
+    }
+
+    /** Destructor. */
+    ~wxPGChoices()
+    {
+        Free();
+    }
+
+    /**
+        Adds to current.
+
+        If did not have own copies, creates them now. If was empty, identical
+        to set except that creates copies.
+
+        @param labels
+            Labels for added choices.
+
+        @param values
+            Values for added choices. If empty, relevant entry indexes are used.
+    */
+    void Add( const wxChar** labels, const ValArrItem* values = NULL );
+
+    /** Version that works with wxArrayString and wxArrayInt. */
+    void Add( const wxArrayString& arr, const wxArrayInt& arrint = wxArrayInt() );
+
+    /**
+        Adds a single choice.
+
+        @param label
+            Label for added choice.
+
+        @param value
+            Value for added choice. If unspecified, index is used.
+    */
+    wxPGChoiceEntry& Add( const wxString& label,
+                          int value = wxPG_INVALID_VALUE );
+
+    /** Adds a single item, with bitmap. */
+    wxPGChoiceEntry& Add( const wxString& label,
+                          const wxBitmap& bitmap,
+                          int value = wxPG_INVALID_VALUE );
+
+    /** Adds a single item with full entry information. */
+    wxPGChoiceEntry& Add( const wxPGChoiceEntry& entry )
+    {
+        return Insert(entry, -1);
+    }
+
+    /** Adds single item. */
+    wxPGChoiceEntry& AddAsSorted( const wxString& label,
+                                  int value = wxPG_INVALID_VALUE );
+
+    /**
+        Assigns choices data, using reference counting. To create a real copy,
+        use Copy() member function instead.
+    */
+    void Assign( const wxPGChoices& a )
+    {
+        AssignData(a.m_data);
+    }
+
+    void AssignData( wxPGChoicesData* data );
+
+    /** Delete all choices. */
+    void Clear();
+
+    /**
+        Returns a real copy of the choices.
+    */
+    wxPGChoices Copy() const
+    {
+        wxPGChoices dst;
+        dst.EnsureData();
+        dst.m_data->CopyDataFrom(m_data);
+        return dst;
+    }
+
+    void EnsureData()
+    {
+        if ( m_data == wxPGChoicesEmptyData )
+            m_data = new wxPGChoicesData();
+    }
+
+    /** Gets a unsigned number identifying this list. */
+    wxPGChoicesId GetId() const { return (wxPGChoicesId) m_data; };
+
+    const wxString& GetLabel( unsigned int ind ) const
+    {
+        return Item(ind).GetText();
+    }
+
+    unsigned int GetCount () const
+    {
+        if ( !m_data )
+            return 0;
+
+        return m_data->GetCount();
+    }
+
+    int GetValue( unsigned int ind ) const { return Item(ind).GetValue(); }
+
+    /** Returns array of values matching the given strings. Unmatching strings
+        result in wxPG_INVALID_VALUE entry in array.
+    */
+    wxArrayInt GetValuesForStrings( const wxArrayString& strings ) const;
+
+    /** Returns array of indices matching given strings. Unmatching strings
+        are added to 'unmatched', if not NULL.
+    */
+    wxArrayInt GetIndicesForStrings( const wxArrayString& strings,
+                                     wxArrayString* unmatched = NULL ) const;
+
+    int Index( const wxString& str ) const;
+    int Index( int val ) const;
+
+    /** Inserts single item. */
+    wxPGChoiceEntry& Insert( const wxString& label,
+                             int index,
+                             int value = wxPG_INVALID_VALUE );
+
+    /** Inserts a single item with full entry information. */
+    wxPGChoiceEntry& Insert( const wxPGChoiceEntry& entry, int index );
+
+    /** Returns false if this is a constant empty set of choices,
+        which should not be modified.
+    */
+    bool IsOk() const
+    {
+        return ( m_data != wxPGChoicesEmptyData );
+    }
+
+    const wxPGChoiceEntry& Item( unsigned int i ) const
+    {
+        wxASSERT( IsOk() );
+        return m_data->Item(i);
+    }
+
+    wxPGChoiceEntry& Item( unsigned int i )
+    {
+        wxASSERT( IsOk() );
+        return m_data->Item(i);
+    }
+
+    /** Removes count items starting at position nIndex. */
+    void RemoveAt(size_t nIndex, size_t count = 1);
+
+#ifndef SWIG
+    /** Does not create copies for itself. */
+    void Set( const wxChar** labels, const long* values = NULL )
+    {
+        Free();
+        Add(labels,values);
+    }
+#endif // SWIG
+
+    /** Version that works with wxArrayString and wxArrayInt. */
+    void Set( const wxArrayString& labels,
+              const wxArrayInt& values = wxArrayInt() )
+    {
+        Free();
+        if ( &values )
+            Add(labels,values);
+        else
+            Add(labels);
+    }
+
+    // Creates exclusive copy of current choices
+    void AllocExclusive();
+
+    // Returns data, increases refcount.
+    wxPGChoicesData* GetData()
+    {
+        wxASSERT( m_data->m_refCount != 0xFFFFFFF );
+        m_data->m_refCount++;
+        return m_data;
+    }
+
+    // Returns plain data ptr - no refcounting stuff is done.
+    wxPGChoicesData* GetDataPtr() const { return m_data; }
+
+    // Changes ownership of data to you.
+    wxPGChoicesData* ExtractData()
+    {
+        wxPGChoicesData* data = m_data;
+        m_data = wxPGChoicesEmptyData;
+        return data;
+    }
+
+    wxArrayString GetLabels() const;
+
+#ifndef SWIG
+    void operator= (const wxPGChoices& a)
+    {
+        if (this != &a)
+            AssignData(a.m_data);
+    }
+
+    wxPGChoiceEntry& operator[](unsigned int i)
+    {
+        return Item(i);
+    }
+
+    const wxPGChoiceEntry& operator[](unsigned int i) const
+    {
+        return Item(i);
+    }
+
+protected:
+    wxPGChoicesData*    m_data;
+
+    void Init();
+    void Free();
+#endif  // !SWIG
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxPGProperty
+
+    wxPGProperty is base class for all wxPropertyGrid properties.
+
+    NB: Full class overview is now only present in
+        interface/wx/propgrid/property.h.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPGProperty : public wxObject
+{
+    friend class wxPropertyGrid;
+    friend class wxPropertyGridInterface;
+    friend class wxPropertyGridPageState;
+    friend class wxPropertyGridPopulator;
+    friend class wxStringProperty;  // Proper "<composed>" support requires this
+#ifndef SWIG
+    DECLARE_ABSTRACT_CLASS(wxPGProperty)
+#endif
+public:
+    typedef wxUint32 FlagType;
+
+    /** Basic constructor.
+    */
+    wxPGProperty();
+
+    /** Constructor.
+        Non-abstract property classes should have constructor of this style:
+
+        @code
+
+        // If T is a class, then it should be a constant reference
+        // (e.g. const T& ) instead.
+        MyProperty( const wxString& label, const wxString& name, T value )
+            : wxPGProperty()
+        {
+            // Generally recommended way to set the initial value
+            // (as it should work in pretty much 100% of cases).
+            wxVariant variant;
+            variant << value;
+            SetValue(variant);
+
+            // If has private child properties then create them here. Also
+            // set flag that indicates presence of private children. E.g.:
+            //
+            //     AddPrivateChild( new wxStringProperty("Subprop 1",
+            //                                           wxPG_LABEL,
+            //                                           value.GetSubProp1() ) );
+        }
+
+        @endcode
+    */
+    wxPGProperty( const wxString& label, const wxString& name );
+
+    /**
+        Virtual destructor.
+        It is customary for derived properties to implement this.
+    */
+    virtual ~wxPGProperty();
+
+    /** This virtual function is called after m_value has been set.
+
+        @remarks
+        - If m_value was set to Null variant (ie. unspecified value),
+          OnSetValue() will not be called.
+        - m_value may be of any variant type. Typically properties internally
+          support only one variant type, and as such OnSetValue() provides a
+          good opportunity to convert
+          supported values into internal type.
+        - Default implementation does nothing.
+    */
+    virtual void OnSetValue();
+
+    /** Override this to return something else than m_value as the value.
+    */
+    virtual wxVariant DoGetValue() const { return m_value; }
+
+#if !defined(SWIG) || defined(CREATE_VCW)
+    /** Implement this function in derived class to check the value.
+        Return true if it is ok. Returning false prevents property change events
+        from occurring.
+
+        @remarks
+        - Default implementation always returns true.
+    */
+    virtual bool ValidateValue( wxVariant& value,
+                                wxPGValidationInfo& validationInfo ) const;
+
+    /**
+        Converts text into wxVariant value appropriate for this property.
+
+        @param variant
+            On function entry this is the old value (should not be wxNullVariant
+            in normal cases). Translated value must be assigned back to it.
+
+        @param text
+            Text to be translated into variant.
+
+        @param argFlags
+            If wxPG_FULL_VALUE is set, returns complete, storable value instead
+            of displayable one (they may be different).
+            If wxPG_COMPOSITE_FRAGMENT is set, text is interpreted as a part of
+            composite property string value (as generated by ValueToString()
+            called with this same flag).
+
+        @return Returns @true if resulting wxVariant value was different.
+
+        @remarks Default implementation converts semicolon delimited tokens into
+                child values. Only works for properties with children.
+
+                You might want to take into account that m_value is Null variant
+                if property value is unspecified (which is usually only case if
+                you explicitly enabled that sort behavior).
+    */
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+
+    /**
+        Converts integer (possibly a choice selection) into wxVariant value
+        appropriate for this property.
+
+        @param variant
+            On function entry this is the old value (should not be wxNullVariant
+            in normal cases). Translated value must be assigned back to it.
+
+        @param number
+            Integer to be translated into variant.
+
+        @param argFlags
+            If wxPG_FULL_VALUE is set, returns complete, storable value instead
+            of displayable one.
+
+        @return Returns @true if resulting wxVariant value was different.
+
+        @remarks
+        - If property is not supposed to use choice or spinctrl or other editor
+          with int-based value, it is not necessary to implement this method.
+        - Default implementation simply assign given int to m_value.
+        - If property uses choice control, and displays a dialog on some choice
+          items, then it is preferred to display that dialog in IntToValue
+          instead of OnEvent.
+        - You might want to take into account that m_value is Null variant if
+          property value is unspecified (which is usually only case if you
+          explicitly enabled that sort behavior).
+    */
+    virtual bool IntToValue( wxVariant& value,
+                             int number,
+                             int argFlags = 0 ) const;
+#endif  // !defined(SWIG) || defined(CREATE_VCW)
+    /**
+        Converts property value into a text representation.
+
+        @param value
+            Value to be converted.
+
+        @param argFlags
+            If 0 (default value), then displayed string is returned.
+            If wxPG_FULL_VALUE is set, returns complete, storable string value
+            instead of displayable. If wxPG_EDITABLE_VALUE is set, returns
+            string value that must be editable in textctrl. If
+            wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to
+            display as a part of string property's composite text
+            representation.
+
+        @remarks Default implementation calls GenerateComposedValue().
+    */
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+
+    /** Converts string to a value, and if successful, calls SetValue() on it.
+        Default behavior is to do nothing.
+        @param text
+        String to get the value from.
+        @return
+        true if value was changed.
+    */
+    bool SetValueFromString( const wxString& text, int flags = wxPG_PROGRAMMATIC_VALUE );
+
+    /** Converts integer to a value, and if succesful, calls SetValue() on it.
+        Default behavior is to do nothing.
+        @param value
+            Int to get the value from.
+        @param flags
+            If has wxPG_FULL_VALUE, then the value given is a actual value and
+            not an index.
+        @return
+            True if value was changed.
+    */
+    bool SetValueFromInt( long value, int flags = 0 );
+
+    /**
+        Returns size of the custom painted image in front of property.
+
+        This method must be overridden to return non-default value if
+        OnCustomPaint is to be called.
+        @param item
+            Normally -1, but can be an index to the property's list of items.
+        @remarks
+        - Default behavior is to return wxSize(0,0), which means no image.
+        - Default image width or height is indicated with dimension -1.
+        - You can also return wxPG_DEFAULT_IMAGE_SIZE, i.e. wxSize(-1, -1).
+    */
+    virtual wxSize OnMeasureImage( int item = -1 ) const;
+
+    /**
+        Events received by editor widgets are processed here.
+
+        Note that editor class usually processes most events. Some, such as
+        button press events of TextCtrlAndButton class, can be handled here.
+        Also, if custom handling for regular events is desired, then that can
+        also be done (for example, wxSystemColourProperty custom handles
+        wxEVT_COMMAND_CHOICE_SELECTED to display colour picker dialog when
+        'custom' selection is made).
+
+        If the event causes value to be changed, SetValueInEvent()
+        should be called to set the new value.
+
+        @param event
+        Associated wxEvent.
+        @return
+        Should return true if any changes in value should be reported.
+        @remarks
+        If property uses choice control, and displays a dialog on some choice
+        items, then it is preferred to display that dialog in IntToValue
+        instead of OnEvent.
+    */
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxWindow* wnd_primary,
+                          wxEvent& event );
+
+    /**
+        Called after value of a child property has been altered.
+
+        Note that this function is usually called at the time that value of
+        this property, or given child property, is still pending for change.
+
+        Sample pseudo-code implementation:
+
+        @code
+        void MyProperty::ChildChanged( wxVariant& thisValue,
+                                       int childIndex,
+                                       wxVariant& childValue ) const
+        {
+            // Acquire reference to actual type of data stored in variant
+            // (TFromVariant only exists if wxPropertyGrid's wxVariant-macros
+            // were used to create the variant class).
+            T& data = TFromVariant(thisValue);
+
+            // Copy childValue into data.
+            switch ( childIndex )
+            {
+                case 0:
+                    data.SetSubProp1( childvalue.GetLong() );
+                    break;
+                case 1:
+                    data.SetSubProp2( childvalue.GetString() );
+                    break;
+                ...
+            }
+        }
+        @endcode
+
+        @param thisValue
+            Value of this property, that should be altered.
+        @param childIndex
+            Index of child changed (you can use Item(childIndex) to get).
+        @param childValue
+            Value of the child property.
+    */
+    virtual void ChildChanged( wxVariant& thisValue,
+                               int childIndex,
+                               wxVariant& childValue ) const;
+
+    /** Returns pointer to an instance of used editor.
+    */
+    virtual const wxPGEditor* DoGetEditorClass() const;
+
+    /** Returns pointer to the wxValidator that should be used
+        with the editor of this property (NULL for no validator).
+        Setting validator explicitly via SetPropertyValidator
+        will override this.
+
+        In most situations, code like this should work well
+        (macros are used to maintain one actual validator instance,
+        so on the second call the function exits within the first
+        macro):
+
+        @code
+
+        wxValidator* wxMyPropertyClass::DoGetValidator () const
+        {
+            WX_PG_DOGETVALIDATOR_ENTRY()
+
+            wxMyValidator* validator = new wxMyValidator(...);
+
+            ... prepare validator...
+
+            WX_PG_DOGETVALIDATOR_EXIT(validator)
+        }
+
+        @endcode
+
+        @remarks
+        You can get common filename validator by returning
+        wxFileProperty::GetClassValidator(). wxDirProperty,
+        for example, uses it.
+    */
+    virtual wxValidator* DoGetValidator () const;
+
+    /**
+        Override to paint an image in front of the property value text or
+        drop-down list item (but only if wxPGProperty::OnMeasureImage is
+        overridden as well).
+
+        If property's OnMeasureImage() returns size that has height != 0 but
+        less than row height ( < 0 has special meanings), wxPropertyGrid calls
+        this method to draw a custom image in a limited area in front of the
+        editor control or value text/graphics, and if control has drop-down
+        list, then the image is drawn there as well (even in the case
+        OnMeasureImage() returned higher height than row height).
+
+        NOTE: Following applies when OnMeasureImage() returns a "flexible"
+        height ( using wxPG_FLEXIBLE_SIZE(W,H) macro), which implies variable
+        height items: If rect.x is < 0, then this is a measure item call, which
+        means that dc is invalid and only thing that should be done is to set
+        paintdata.m_drawnHeight to the height of the image of item at index
+        paintdata.m_choiceItem. This call may be done even as often as once
+        every drop-down popup show.
+
+        @param dc
+            wxDC to paint on.
+        @param rect
+            Box reserved for custom graphics. Includes surrounding rectangle,
+            if any. If x is < 0, then this is a measure item call (see above).
+        @param paintdata
+            wxPGPaintData structure with much useful data.
+
+        @remarks
+            - You can actually exceed rect width, but if you do so then
+              paintdata.m_drawnWidth must be set to the full width drawn in
+              pixels.
+            - Due to technical reasons, rect's height will be default even if
+              custom height was reported during measure call.
+            - Brush is guaranteed to be default background colour. It has been
+              already used to clear the background of area being painted. It
+              can be modified.
+            - Pen is guaranteed to be 1-wide 'black' (or whatever is the proper
+              colour) pen for drawing framing rectangle. It can be changed as
+              well.
+
+        @see ValueToString()
+    */
+    virtual void OnCustomPaint( wxDC& dc,
+                                const wxRect& rect,
+                                wxPGPaintData& paintdata );
+
+    /**
+        Returns used wxPGCellRenderer instance for given property column
+        (label=0, value=1).
+
+        Default implementation returns editor's renderer for all columns.
+    */
+    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
+
+    /** Returns which choice is currently selected. Only applies to properties
+        which have choices.
+
+        Needs to reimplemented in derived class if property value does not
+        map directly to a choice. Integer as index, bool, and string usually do.
+    */
+    virtual int GetChoiceSelection() const;
+
+    /**
+        Refresh values of child properties.
+
+        Automatically called after value is set.
+    */
+    virtual void RefreshChildren();
+
+    /** Special handling for attributes of this property.
+
+        If returns false, then the attribute will be automatically stored in
+        m_attributes.
+
+        Default implementation simply returns false.
+    */
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+
+    /** Returns value of an attribute.
+
+        Override if custom handling of attributes is needed.
+
+        Default implementation simply return NULL variant.
+    */
+    virtual wxVariant DoGetAttribute( const wxString& name ) const;
+
+    /** Returns instance of a new wxPGEditorDialogAdapter instance, which is
+        used when user presses the (optional) button next to the editor control;
+
+        Default implementation returns NULL (ie. no action is generated when
+        button is pressed).
+    */
+    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
+
+    /**
+        Called whenever validation has failed with given pending value.
+
+        @remarks If you implement this in your custom property class, please
+                 remember to call the baser implementation as well, since they
+                 may use it to revert property into pre-change state.
+    */
+    virtual void OnValidationFailure( wxVariant& pendingValue );
+
+    /** Append a new choice to property's list of choices.
+    */
+    int AddChoice( const wxString& label, int value = wxPG_INVALID_VALUE )
+    {
+        return InsertChoice(label, wxNOT_FOUND, value);
+    }
+
+    /**
+        Returns true if children of this property are component values (for
+        instance, points size, face name, and is_underlined are component
+        values of a font).
+    */
+    bool AreChildrenComponents() const
+    {
+        if ( m_flags & (wxPG_PROP_COMPOSED_VALUE|wxPG_PROP_AGGREGATE) )
+            return true;
+
+        return false;
+    }
+
+    /**
+        Deletes children of the property.
+    */
+    void DeleteChildren();
+
+    /**
+        Removes entry from property's wxPGChoices and editor control (if it is
+        active).
+
+        If selected item is deleted, then the value is set to unspecified.
+    */
+    void DeleteChoice( int index );
+
+    /**
+        Call to enable or disable usage of common value (integer value that can
+        be selected for properties instead of their normal values) for this
+        property.
+
+        Common values are disabled by the default for all properties.
+    */
+    void EnableCommonValue( bool enable = true )
+    {
+        if ( enable ) SetFlag( wxPG_PROP_USES_COMMON_VALUE );
+        else ClearFlag( wxPG_PROP_USES_COMMON_VALUE );
+    }
+
+    /**
+        Composes text from values of child properties.
+    */
+    wxString GenerateComposedValue() const
+    {
+        wxString s;
+        DoGenerateComposedValue(s);
+        return s;
+    }
+
+    /** Returns property's label. */
+    const wxString& GetLabel() const { return m_label; }
+
+    /** Returns property's name with all (non-category, non-root) parents. */
+    wxString GetName() const;
+
+    /**
+        Returns property's base name (ie parent's name is not added in any
+        case)
+     */
+    const wxString& GetBaseName() const { return m_name; }
+
+    /** Returns read-only reference to property's list of choices.
+    */
+    const wxPGChoices& GetChoices() const
+    {
+        return m_choices;
+    }
+
+    /** Returns coordinate to the top y of the property. Note that the
+        position of scrollbars is not taken into account.
+    */
+    int GetY() const;
+
+    wxVariant GetValue() const
+    {
+        return DoGetValue();
+    }
+
+    /** Returns reference to the internal stored value. GetValue is preferred
+        way to get the actual value, since GetValueRef ignores DoGetValue,
+        which may override stored value.
+    */
+    wxVariant& GetValueRef()
+    {
+        return m_value;
+    }
+
+    const wxVariant& GetValueRef() const
+    {
+        return m_value;
+    }
+
+    // Helper function (for wxPython bindings and such) for settings protected
+    // m_value.
+    wxVariant GetValuePlain() const
+    {
+        return m_value;
+    }
+
+    /** Returns text representation of property's value.
+
+        @param argFlags
+            If 0 (default value), then displayed string is returned.
+            If wxPG_FULL_VALUE is set, returns complete, storable string value
+            instead of displayable. If wxPG_EDITABLE_VALUE is set, returns
+            string value that must be editable in textctrl. If
+            wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to
+            display as a part of string property's composite text
+            representation.
+
+        @remarks In older versions, this function used to be overridden to convert
+                 property's value into a string representation. This function is
+                 now handled by ValueToString(), and overriding this function now
+                 will result in run-time assertion failure.
+    */
+    virtual wxString GetValueAsString( int argFlags = 0 ) const;
+
+    /** Synonymous to GetValueAsString().
+
+        @deprecated Use GetValueAsString() instead.
+
+        @see GetValueAsString()
+    */
+    wxDEPRECATED( wxString GetValueString( int argFlags = 0 ) const );
+
+    /**
+        Returns wxPGCell of given column.
+    */
+    const wxPGCell& GetCell( unsigned int column ) const;
+
+    wxPGCell& GetCell( unsigned int column );
+
+    /** Return number of displayed common values for this property.
+    */
+    int GetDisplayedCommonValueCount() const;
+
+    wxString GetDisplayedString() const
+    {
+        return GetValueAsString(0);
+    }
+
+    /** Returns property grid where property lies. */
+    wxPropertyGrid* GetGrid() const;
+
+    /** Returns owner wxPropertyGrid, but only if one is currently on a page
+        displaying this property. */
+    wxPropertyGrid* GetGridIfDisplayed() const;
+
+    /** Returns highest level non-category, non-root parent. Useful when you
+        have nested wxCustomProperties/wxParentProperties.
+        @remarks
+        Thus, if immediate parent is root or category, this will return the
+        property itself.
+    */
+    wxPGProperty* GetMainParent() const;
+
+    /** Return parent of property */
+    wxPGProperty* GetParent() const { return m_parent; }
+
+    /** Returns true if property has editable wxTextCtrl when selected.
+
+        @remarks
+        Altough disabled properties do not displayed editor, they still
+        return True here as being disabled is considered a temporary
+        condition (unlike being read-only or having limited editing enabled).
+    */
+    bool IsTextEditable() const;
+
+    bool IsValueUnspecified() const
+    {
+        return m_value.IsNull();
+    }
+
+    FlagType HasFlag( FlagType flag ) const
+    {
+        return ( m_flags & flag );
+    }
+
+    /** Returns comma-delimited string of property attributes.
+    */
+    const wxPGAttributeStorage& GetAttributes() const
+    {
+        return m_attributes;
+    }
+
+    /** Returns m_attributes as list wxVariant.
+    */
+    wxVariant GetAttributesAsList() const;
+
+    FlagType GetFlags() const
+    {
+        return m_flags;
+    }
+
+    const wxPGEditor* GetEditorClass() const;
+
+    wxString GetValueType() const
+    {
+        return m_value.GetType();
+    }
+
+    /** Returns editor used for given column. NULL for no editor.
+    */
+    const wxPGEditor* GetColumnEditor( int column ) const
+    {
+        if ( column == 1 )
+            return GetEditorClass();
+
+        return NULL;
+    }
+
+    /** Returns common value selected for this property. -1 for none.
+    */
+    int GetCommonValue() const
+    {
+        return m_commonValue;
+    }
+
+    /** Returns true if property has even one visible child.
+    */
+    bool HasVisibleChildren() const;
+
+    /**
+        Use this member function to add independent (ie. regular) children to
+        a property.
+
+        @return Inserted childProperty.
+
+        @remarks wxPropertyGrid is not automatically refreshed by this
+                 function.
+
+        @see AddPrivateChild()
+    */
+    wxPGProperty* InsertChild( int index, wxPGProperty* childProperty );
+
+    /** Inserts a new choice to property's list of choices.
+    */
+    int InsertChoice( const wxString& label, int index, int value = wxPG_INVALID_VALUE );
+
+    /**
+        Returns true if this property is actually a wxPropertyCategory.
+    */
+    bool IsCategory() const { return HasFlag(wxPG_PROP_CATEGORY)?true:false; }
+
+    /** Returns true if this property is actually a wxRootProperty.
+    */
+    bool IsRoot() const { return (m_parent == NULL); }
+
+    /** Returns true if this is a sub-property. */
+    bool IsSubProperty() const
+    {
+        wxPGProperty* parent = (wxPGProperty*)m_parent;
+        if ( parent && !parent->IsCategory() )
+            return true;
+        return false;
+    }
+
+    /** Returns last visible sub-property, recursively.
+    */
+    const wxPGProperty* GetLastVisibleSubItem() const;
+
+    wxVariant GetDefaultValue() const;
+
+    int GetMaxLength() const
+    {
+        return (int) m_maxLen;
+    }
+
+    /**
+        Determines, recursively, if all children are not unspecified.
+
+        @param pendingList
+            Assumes members in this wxVariant list as pending
+            replacement values.
+    */
+    bool AreAllChildrenSpecified( wxVariant* pendingList = NULL ) const;
+
+    /** Updates composed values of parent non-category properties, recursively.
+        Returns topmost property updated.
+
+        @remarks
+        - Must not call SetValue() (as can be called in it).
+    */
+    wxPGProperty* UpdateParentValues();
+
+    /** Returns true if containing grid uses wxPG_EX_AUTO_UNSPECIFIED_VALUES.
+    */
+    bool UsesAutoUnspecified() const
+    {
+        return HasFlag(wxPG_PROP_AUTO_UNSPECIFIED)?true:false;
+    }
+
+    wxBitmap* GetValueImage() const
+    {
+        return m_valueBitmap;
+    }
+
+    wxVariant GetAttribute( const wxString& name ) const;
+
+    /**
+        Returns named attribute, as string, if found.
+
+        Otherwise defVal is returned.
+    */
+    wxString GetAttribute( const wxString& name, const wxString& defVal ) const;
+
+    /**
+        Returns named attribute, as long, if found.
+
+        Otherwise defVal is returned.
+    */
+    long GetAttributeAsLong( const wxString& name, long defVal ) const;
+
+    /**
+        Returns named attribute, as double, if found.
+
+        Otherwise defVal is returned.
+    */
+    double GetAttributeAsDouble( const wxString& name, double defVal ) const;
+
+    unsigned int GetDepth() const { return (unsigned int)m_depth; }
+
+    /** Gets flags as a'|' delimited string. Note that flag names are not
+        prepended with 'wxPG_PROP_'.
+        @param flagsMask
+        String will only be made to include flags combined by this parameter.
+    */
+    wxString GetFlagsAsString( FlagType flagsMask ) const;
+
+    /** Returns position in parent's array. */
+    unsigned int GetIndexInParent() const
+    {
+        return (unsigned int)m_arrIndex;
+    }
+
+    /** Hides or reveals the property.
+        @param hide
+            true for hide, false for reveal.
+        @param flags
+            By default changes are applied recursively. Set this paramter
+            wxPG_DONT_RECURSE to prevent this.
+    */
+    inline bool Hide( bool hide, int flags = wxPG_RECURSE );
+
+    bool IsExpanded() const
+        { return (!(m_flags & wxPG_PROP_COLLAPSED) && GetChildCount()); }
+
+    /** Returns true if all parents expanded.
+    */
+    bool IsVisible() const;
+
+    bool IsEnabled() const { return !(m_flags & wxPG_PROP_DISABLED); }
+
+    /** If property's editor is created this forces its recreation.
+        Useful in SetAttribute etc. Returns true if actually did anything.
+    */
+    bool RecreateEditor();
+
+    /** If property's editor is active, then update it's value.
+    */
+    void RefreshEditor();
+
+    /** Sets an attribute for this property.
+        @param name
+        Text identifier of attribute. See @ref propgrid_property_attributes.
+        @param value
+        Value of attribute.
+    */
+    void SetAttribute( const wxString& name, wxVariant value );
+
+    void SetAttributes( const wxPGAttributeStorage& attributes );
+
+    /**
+        Sets property's background colour.
+
+        @param colour
+            Background colour to use.
+
+        @param recursively
+            If @true, children are affected recursively, and any categories
+            are not.
+    */
+    void SetBackgroundColour( const wxColour& colour,
+                              bool recursively = false );
+
+    /**
+        Sets property's text colour.
+
+        @param colour
+            Text colour to use.
+
+        @param recursively
+            If @true, children are affected recursively, and any categories
+            are not.
+    */
+    void SetTextColour( const wxColour& colour,
+                        bool recursively = false );
+
+#ifndef SWIG
+    /** Sets editor for a property.
+
+        @param editor
+            For builtin editors, use wxPGEditor_X, where X is builtin editor's
+            name (TextCtrl, Choice, etc. see wxPGEditor documentation for full
+            list).
+
+        For custom editors, use pointer you received from
+        wxPropertyGrid::RegisterEditorClass().
+    */
+    void SetEditor( const wxPGEditor* editor )
+    {
+        m_customEditor = editor;
+    }
+#endif
+
+    /** Sets editor for a property.
+    */
+    inline void SetEditor( const wxString& editorName );
+
+    /**
+        Sets cell information for given column.
+    */
+    void SetCell( int column, const wxPGCell& cell );
+
+    /** Sets common value selected for this property. -1 for none.
+    */
+    void SetCommonValue( int commonValue )
+    {
+        m_commonValue = commonValue;
+    }
+
+    /** Sets flags from a '|' delimited string. Note that flag names are not
+        prepended with 'wxPG_PROP_'.
+    */
+    void SetFlagsFromString( const wxString& str );
+
+    /** Sets property's "is it modified?" flag. Affects children recursively.
+    */
+    void SetModifiedStatus( bool modified )
+    {
+        SetFlagRecursively(wxPG_PROP_MODIFIED, modified);
+    }
+
+    /** Call in OnEvent(), OnButtonClick() etc. to change the property value
+        based on user input.
+
+        @remarks
+        This method is const since it doesn't actually modify value, but posts
+        given variant as pending value, stored in wxPropertyGrid.
+    */
+    void SetValueInEvent( wxVariant value ) const;
+
+    /**
+        Call this to set value of the property.
+
+        Unlike methods in wxPropertyGrid, this does not automatically update
+        the display.
+
+        @remarks
+        Use wxPropertyGrid::ChangePropertyValue() instead if you need to run
+        through validation process and send property change event.
+
+        If you need to change property value in event, based on user input, use
+        SetValueInEvent() instead.
+
+        @param pList
+            Pointer to list variant that contains child values. Used to
+            indicate which children should be marked as modified.
+
+        @param flags
+            Various flags (for instance, wxPG_SETVAL_REFRESH_EDITOR, which is
+            enabled by default).
+    */
+    void SetValue( wxVariant value, wxVariant* pList = NULL,
+                   int flags = wxPG_SETVAL_REFRESH_EDITOR );
+
+    /** Set wxBitmap in front of the value. This bitmap may be ignored
+        by custom cell renderers.
+    */
+    void SetValueImage( wxBitmap& bmp );
+
+    /** Sets selected choice and changes property value.
+
+        Tries to retain value type, although currently if it is not string,
+        then it is forced to integer.
+    */
+    void SetChoiceSelection( int newValue );
+
+    void SetExpanded( bool expanded )
+    {
+        if ( !expanded ) m_flags |= wxPG_PROP_COLLAPSED;
+        else m_flags &= ~wxPG_PROP_COLLAPSED;
+    }
+
+    void SetFlag( FlagType flag ) { m_flags |= flag; }
+
+    void SetFlagRecursively( FlagType flag, bool set );
+
+    void SetHelpString( const wxString& helpString )
+    {
+        m_helpString = helpString;
+    }
+
+    void SetLabel( const wxString& label ) { m_label = label; }
+
+    inline void SetName( const wxString& newName );
+
+    /**
+        Changes what sort of parent this property is for its children.
+
+        @param flag
+            Use one of the following values: wxPG_PROP_MISC_PARENT (for
+            generic parents), wxPG_PROP_CATEGORY (for categories), or
+            wxPG_PROP_AGGREGATE (for derived property classes with private
+            children).
+
+        @remarks You generally do not need to call this function.
+    */
+    void SetParentalType( int flag )
+    {
+        m_flags &= ~(wxPG_PROP_PROPERTY|wxPG_PROP_PARENTAL_FLAGS);
+        m_flags |= flag;
+    }
+
+    void SetValueToUnspecified()
+    {
+        wxVariant val;  // Create NULL variant
+        SetValue(val);
+    }
+
+    // Helper function (for wxPython bindings and such) for settings protected
+    // m_value.
+    void SetValuePlain( wxVariant value )
+    {
+        m_value = value;
+    }
+
+#if wxUSE_VALIDATORS
+    /** Sets wxValidator for a property*/
+    void SetValidator( const wxValidator& validator )
+    {
+        m_validator = wxDynamicCast(validator.Clone(),wxValidator);
+    }
+
+    /** Gets assignable version of property's validator. */
+    wxValidator* GetValidator() const
+    {
+        if ( m_validator )
+            return m_validator;
+        return DoGetValidator();
+    }
+#endif // #if wxUSE_VALIDATORS
+
+#ifndef SWIG
+    /** Returns client data (void*) of a property.
+    */
+    void* GetClientData() const
+    {
+        return m_clientData;
+    }
+
+    /** Sets client data (void*) of a property.
+        @remarks
+        This untyped client data has to be deleted manually.
+    */
+    void SetClientData( void* clientData )
+    {
+        m_clientData = clientData;
+    }
+
+    /** Returns client object of a property.
+    */
+    void SetClientObject(wxClientData* clientObject)
+    {
+        delete m_clientObject;
+        m_clientObject = clientObject;
+    }
+
+    /** Sets managed client object of a property.
+    */
+    wxClientData *GetClientObject() const { return m_clientObject; }
+#endif
+
+    /** Sets new set of choices for property.
+
+        @remarks
+        This operation clears the property value.
+    */
+    bool SetChoices( wxPGChoices& choices );
+
+    /** Set max length of text in text editor.
+    */
+    inline bool SetMaxLength( int maxLen );
+
+    /** Call with 'false' in OnSetValue to cancel value changes after all
+        (ie. cancel 'true' returned by StringToValue() or IntToValue()).
+    */
+    void SetWasModified( bool set = true )
+    {
+        if ( set ) m_flags |= wxPG_PROP_WAS_MODIFIED;
+        else m_flags &= ~wxPG_PROP_WAS_MODIFIED;
+    }
+
+    const wxString& GetHelpString() const
+    {
+        return m_helpString;
+    }
+
+    void ClearFlag( FlagType flag ) { m_flags &= ~(flag); }
+
+    // Use, for example, to detect if item is inside collapsed section.
+    bool IsSomeParent( wxPGProperty* candidate_parent ) const;
+
+    /**
+        Adapts list variant into proper value using consecutive
+        ChildChanged-calls.
+    */
+    void AdaptListToValue( wxVariant& list, wxVariant* value ) const;
+
+#if wxPG_COMPATIBILITY_1_4
+    /**
+        Adds a private child property.
+
+        @deprecated Use AddPrivateChild() instead.
+
+        @see AddPrivateChild()
+    */
+    wxDEPRECATED( void AddChild( wxPGProperty* prop ) );
+#endif
+
+    /**
+        Adds a private child property. If you use this instead of
+        wxPropertyGridInterface::Insert() or
+        wxPropertyGridInterface::AppendIn(), then property's parental
+        type will automatically be set up to wxPG_PROP_AGGREGATE. In other
+        words, all properties of this property will become private.
+    */
+    void AddPrivateChild( wxPGProperty* prop );
+
+    /**
+        Appends a new child property.
+    */
+    wxPGProperty* AppendChild( wxPGProperty* prop )
+    {
+        return InsertChild(-1, prop);
+    }
+
+    /** Returns height of children, recursively, and
+        by taking expanded/collapsed status into account.
+
+        iMax is used when finding property y-positions.
+    */
+    int GetChildrenHeight( int lh, int iMax = -1 ) const;
+
+    /** Returns number of child properties */
+    unsigned int GetChildCount() const
+    {
+        return (unsigned int) m_children.size();
+    }
+
+    /** Returns sub-property at index i. */
+    wxPGProperty* Item( unsigned int i ) const
+        { return m_children[i]; }
+
+    /** Returns last sub-property.
+    */
+    wxPGProperty* Last() const { return m_children.back(); }
+
+    /** Returns index of given child property. */
+    int Index( const wxPGProperty* p ) const;
+
+    // Puts correct indexes to children
+    void FixIndicesOfChildren( unsigned int starthere = 0 );
+
+    /**
+        Converts image width into full image offset, with margins.
+    */
+    int GetImageOffset( int imageWidth ) const;
+
+#ifndef SWIG
+    // Returns wxPropertyGridPageState in which this property resides.
+    wxPropertyGridPageState* GetParentState() const { return m_parentState; }
+#endif
+
+#ifndef SWIG
+    wxPGProperty* GetItemAtY( unsigned int y,
+                              unsigned int lh,
+                              unsigned int* nextItemY ) const;
+#endif
+
+    wxPGProperty* GetItemAtY( unsigned int y ) const;
+
+    /** Returns (direct) child property with given name (or NULL if not found).
+    */
+    wxPGProperty* GetPropertyByName( const wxString& name ) const;
+
+#ifndef SWIG
+
+    // Returns various display-related information for given column
+    void GetDisplayInfo( unsigned int column,
+                         int choiceIndex,
+                         int flags,
+                         wxString* pString,
+                         const wxPGCell** pCell );
+
+    static wxString*            sm_wxPG_LABEL;
+
+    /** This member is public so scripting language bindings
+        wrapper code can access it freely.
+    */
+    void*                       m_clientData;
+
+protected:
+
+    /**
+        Sets property cell in fashion that reduces number of exclusive
+        copies of cell data. Used when setting, for instance, same
+        background colour for a number of properties.
+
+        @param firstCol
+            First column to affect.
+
+        @param lastCol
+            Last column to affect.
+
+        @param preparedCell
+            Pre-prepared cell that is used for those which cell data
+            before this matched unmodCellData.
+
+        @param srcData
+            If unmodCellData did not match, valid cell data from this
+            is merged into cell (usually generating new exclusive copy
+            of cell's data).
+
+        @param unmodCellData
+            If cell's cell data matches this, its cell is now set to
+            preparedCell.
+
+        @param ignoreWithFlags
+            Properties with any one of these flags are skipped.
+
+        @param recursively
+            If @true, apply this operation recursively in child properties.
+    */
+    void AdaptiveSetCell( unsigned int firstCol,
+                          unsigned int lastCol,
+                          const wxPGCell& preparedCell,
+                          const wxPGCell& srcData,
+                          wxPGCellData* unmodCellData,
+                          FlagType ignoreWithFlags,
+                          bool recursively );
+
+    /**
+        Makes sure m_cells has size of column+1 (or more).
+    */
+    void EnsureCells( unsigned int column );
+
+    /** Returns (direct) child property with given name (or NULL if not found),
+        with hint index.
+
+        @param hintIndex
+        Start looking for the child at this index.
+
+        @remarks
+        Does not support scope (ie. Parent.Child notation).
+    */
+    wxPGProperty* GetPropertyByNameWH( const wxString& name,
+                                       unsigned int hintIndex ) const;
+
+    /** This is used by Insert etc. */
+    void DoAddChild( wxPGProperty* prop,
+                     int index = -1,
+                     bool correct_mode = true );
+
+    void DoGenerateComposedValue( wxString& text,
+                                  int argFlags = wxPG_VALUE_IS_CURRENT,
+                                  const wxVariantList* valueOverrides = NULL,
+                                  wxPGHashMapS2S* childResults = NULL ) const;
+
+    void DoSetName(const wxString& str) { m_name = str; }
+
+    /** Deletes all sub-properties. */
+    void Empty();
+
+    void InitAfterAdded( wxPropertyGridPageState* pageState,
+                         wxPropertyGrid* propgrid );
+
+    // Removes child property with given pointer. Does not delete it.
+    void RemoveChild( wxPGProperty* p );
+
+    void DoPreAddChild( int index, wxPGProperty* prop );
+
+    void SetParentState( wxPropertyGridPageState* pstate )
+        { m_parentState = pstate; }
+
+    // Call after fixed sub-properties added/removed after creation.
+    // if oldSelInd >= 0 and < new max items, then selection is
+    // moved to it.
+    void SubPropsChanged( int oldSelInd = -1 );
+
+    int GetY2( int lh ) const;
+
+    wxString                    m_label;
+    wxString                    m_name;
+    wxPGProperty*               m_parent;
+    wxPropertyGridPageState*    m_parentState;
+
+    wxClientData*               m_clientObject;
+
+    // Overrides editor returned by property class
+    const wxPGEditor*           m_customEditor;
+#if wxUSE_VALIDATORS
+    // Editor is going to get this validator
+    wxValidator*                m_validator;
+#endif
+    // Show this in front of the value
+    //
+    // TODO: Can bitmap be implemented with wxPGCell?
+    wxBitmap*                   m_valueBitmap;
+
+    wxVariant                   m_value;
+    wxPGAttributeStorage        m_attributes;
+    wxArrayPGProperty           m_children;
+
+    // Extended cell information
+    wxVector<wxPGCell>          m_cells;
+
+    // Choices shown in drop-down list of editor control.
+    wxPGChoices                 m_choices;
+
+    // Help shown in statusbar or help box.
+    wxString                    m_helpString;
+
+    // Index in parent's property array.
+    unsigned int                m_arrIndex;
+
+    // If not -1, then overrides m_value
+    int                         m_commonValue;
+
+    FlagType                    m_flags;
+
+    // Maximum length (mainly for string properties). Could be in some sort of
+    // wxBaseStringProperty, but currently, for maximum flexibility and
+    // compatibility, we'll stick it here. Anyway, we had 3 excess bytes to use
+    // so short int will fit in just fine.
+    short                       m_maxLen;
+
+    // Root has 0, categories etc. at that level 1, etc.
+    unsigned char               m_depth;
+
+    // m_depthBgCol indicates width of background colour between margin and item
+    // (essentially this is category's depth, if none then equals m_depth).
+    unsigned char               m_depthBgCol;
+
+private:
+    // Called in constructors.
+    void Init();
+    void Init( const wxString& label, const wxString& name );
+#endif // #ifndef SWIG
+};
+
+// -----------------------------------------------------------------------
+
+//
+// Property class declaration helper macros
+// (wxPGRootPropertyClass and wxPropertyCategory require this).
+//
+
+#define WX_PG_DECLARE_DOGETEDITORCLASS \
+    virtual const wxPGEditor* DoGetEditorClass() const;
+
+#ifndef SWIG
+    #define WX_PG_DECLARE_PROPERTY_CLASS(CLASSNAME) \
+        public: \
+            DECLARE_DYNAMIC_CLASS(CLASSNAME) \
+            WX_PG_DECLARE_DOGETEDITORCLASS \
+        private:
+#else
+    #define WX_PG_DECLARE_PROPERTY_CLASS(CLASSNAME)
+#endif
+
+// Implements sans constructor function. Also, first arg is class name, not
+// property name.
+#define WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(PROPNAME,T,EDITOR) \
+const wxPGEditor* PROPNAME::DoGetEditorClass() const \
+{ \
+    return wxPGEditor_##EDITOR; \
+}
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+/** @class wxPGRootProperty
+    @ingroup classes
+    Root parent property.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGRootProperty : public wxPGProperty
+{
+public:
+    WX_PG_DECLARE_PROPERTY_CLASS(wxPGRootProperty)
+public:
+
+    /** Constructor. */
+    wxPGRootProperty( const wxString& name = wxS("<Root>") );
+    virtual ~wxPGRootProperty();
+
+    virtual bool StringToValue( wxVariant&, const wxString&, int ) const
+    {
+        return false;
+    }
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxPropertyCategory
+    @ingroup classes
+    Category (caption) property.
+*/
+class WXDLLIMPEXP_PROPGRID wxPropertyCategory : public wxPGProperty
+{
+    friend class wxPropertyGrid;
+    friend class wxPropertyGridPageState;
+    WX_PG_DECLARE_PROPERTY_CLASS(wxPropertyCategory)
+public:
+
+    /** Default constructor is only used in special cases. */
+    wxPropertyCategory();
+
+    wxPropertyCategory( const wxString& label,
+                        const wxString& name = wxPG_LABEL );
+    ~wxPropertyCategory();
+
+    int GetTextExtent( const wxWindow* wnd, const wxFont& font ) const;
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags ) const;
+
+protected:
+    void SetTextColIndex( unsigned int colInd )
+        { m_capFgColIndex = (wxByte) colInd; }
+    unsigned int GetTextColIndex() const
+        { return (unsigned int) m_capFgColIndex; }
+
+    void CalculateTextExtent( wxWindow* wnd, const wxFont& font );
+
+    int     m_textExtent;  // pre-calculated length of text
+    wxByte  m_capFgColIndex;  // caption text colour index
+
+private:
+    void Init();
+};
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_PROPERTY_H_
Index: propgrid.h
===================================================================
--- propgrid.h	(revision 102)
+++ propgrid.h	(working copy)
@@ -1,2189 +1,2189 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/propgrid.h
-// Purpose:     wxPropertyGrid
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2004-09-25
-// RCS-ID:      $Id: propgrid.h 61014 2009-06-12 13:39:36Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_PROPGRID_H_
-#define _WX_PROPGRID_PROPGRID_H_
-
-#if wxUSE_PROPGRID
-
-#include "wx/dcclient.h"
-#include "wx/scrolwin.h"
-#include "wx/tooltip.h"
-#include "wx/datetime.h"
-
-#include "wx/propgrid/property.h"
-#include "wx/propgrid/propgridiface.h"
-
-
-#ifndef SWIG
-extern WXDLLIMPEXP_DATA_PROPGRID(const char) wxPropertyGridNameStr[];
-#endif
-
-class wxPGComboBox;
-
-// -----------------------------------------------------------------------
-// Global variables
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-// This is required for sharing common global variables.
-class WXDLLIMPEXP_PROPGRID wxPGGlobalVarsClass
-{
-public:
-
-    wxPGGlobalVarsClass();
-    ~wxPGGlobalVarsClass();
-
-    // Used by advprops, but here to make things easier.
-    wxString            m_pDefaultImageWildcard;
-
-    // Map of editor class instances (keys are name string).
-    wxPGHashMapS2P      m_mapEditorClasses;
-
-#if wxUSE_VALIDATORS
-    wxVector<wxValidator*>  m_arrValidators; // These wxValidators need to be freed
-#endif
-
-    wxPGHashMapS2P      m_dictPropertyClassInfo; // PropertyName -> ClassInfo
-
-    wxPGChoices*        m_fontFamilyChoices;
-
-    // Replace with your own to affect all properties using default renderer.
-    wxPGCellRenderer*   m_defaultRenderer;
-
-    wxPGChoices         m_boolChoices;
-
-    wxVariant           m_vEmptyString;
-    wxVariant           m_vZero;
-    wxVariant           m_vMinusOne;
-    wxVariant           m_vTrue;
-    wxVariant           m_vFalse;
-
-    // Cached constant strings
-    wxPGCachedString    m_strstring;
-    wxPGCachedString    m_strlong;
-    wxPGCachedString    m_strbool;
-    wxPGCachedString    m_strlist;
-
-    wxPGCachedString    m_strMin;
-    wxPGCachedString    m_strMax;
-    wxPGCachedString    m_strUnits;
-    wxPGCachedString    m_strInlineHelp;
-
-    // If true then some things are automatically translated
-    bool                m_autoGetTranslation;
-
-    // > 0 if errors cannot or should not be shown in statusbar etc.
-    int                 m_offline;
-
-    int                 m_extraStyle;  // global extra style
-
-    int                 m_warnings;
-
-    int HasExtraStyle( int style ) const { return (m_extraStyle & style); }
-};
-
-extern WXDLLIMPEXP_PROPGRID wxPGGlobalVarsClass* wxPGGlobalVars;
-
-#define wxPGVariant_EmptyString     (wxPGGlobalVars->m_vEmptyString)
-#define wxPGVariant_Zero            (wxPGGlobalVars->m_vZero)
-#define wxPGVariant_MinusOne        (wxPGGlobalVars->m_vMinusOne)
-#define wxPGVariant_True            (wxPGGlobalVars->m_vTrue)
-#define wxPGVariant_False           (wxPGGlobalVars->m_vFalse)
-
-#define wxPGVariant_Bool(A)     (A?wxPGVariant_True:wxPGVariant_False)
-
-// When wxPG is loaded dynamically after the application is already running
-// then the built-in module system won't pick this one up.  Add it manually.
-WXDLLIMPEXP_PROPGRID void wxPGInitResourceModule();
-
-#endif // !SWIG
-
-// -----------------------------------------------------------------------
-
-/** @section propgrid_window_styles wxPropertyGrid Window Styles
-
-    SetWindowStyleFlag method can be used to modify some of these at run-time.
-    @{
-*/
-enum wxPG_WINDOW_STYLES
-{
-
-/** This will cause Sort() automatically after an item is added.
-    When inserting a lot of items in this mode, it may make sense to
-    use Freeze() before operations and Thaw() afterwards to increase
-    performance.
-*/
-wxPG_AUTO_SORT                      = 0x00000010,
-
-/** Categories are not initially shown (even if added).
-    IMPORTANT NOTE: If you do not plan to use categories, then this
-    style will waste resources.
-    This flag can also be changed using wxPropertyGrid::EnableCategories method.
-*/
-wxPG_HIDE_CATEGORIES                = 0x00000020,
-
-/* This style combines non-categoric mode and automatic sorting.
-*/
-wxPG_ALPHABETIC_MODE                = (wxPG_HIDE_CATEGORIES|wxPG_AUTO_SORT),
-
-/** Modified values are shown in bold font. Changing this requires Refresh()
-    to show changes.
-*/
-wxPG_BOLD_MODIFIED                  = 0x00000040,
-
-/** When wxPropertyGrid is resized, splitter moves to the center. This
-    behavior stops once the user manually moves the splitter.
-*/
-wxPG_SPLITTER_AUTO_CENTER           = 0x00000080,
-
-/** Display tooltips for cell text that cannot be shown completely. If
-    wxUSE_TOOLTIPS is 0, then this doesn't have any effect.
-*/
-wxPG_TOOLTIPS                       = 0x00000100,
-
-/** Disables margin and hides all expand/collapse buttons that would appear
-    outside the margin (for sub-properties). Toggling this style automatically
-    expands all collapsed items.
-*/
-wxPG_HIDE_MARGIN                    = 0x00000200,
-
-/** This style prevents user from moving the splitter.
-*/
-wxPG_STATIC_SPLITTER                = 0x00000400,
-
-/** Combination of other styles that make it impossible for user to modify
-    the layout.
-*/
-wxPG_STATIC_LAYOUT                  = (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER),
-
-/** Disables wxTextCtrl based editors for properties which
-    can be edited in another way.
-
-    Equals calling wxPropertyGrid::LimitPropertyEditing for all added
-    properties.
-*/
-wxPG_LIMITED_EDITING                = 0x00000800,
-
-/** wxPropertyGridManager only: Show toolbar for mode and page selection. */
-wxPG_TOOLBAR                        = 0x00001000,
-
-/** wxPropertyGridManager only: Show adjustable text box showing description
-    or help text, if available, for currently selected property.
-*/
-wxPG_DESCRIPTION                    = 0x00002000
-
-};
-
-enum wxPG_EX_WINDOW_STYLES
-{
-
-/**
-    NOTE: wxPG_EX_xxx are extra window styles and must be set using
-    SetExtraStyle() member function.
-
-    Speeds up switching to wxPG_HIDE_CATEGORIES mode. Initially, if
-    wxPG_HIDE_CATEGORIES is not defined, the non-categorized data storage is
-    not activated, and switching the mode first time becomes somewhat slower.
-    wxPG_EX_INIT_NOCAT activates the non-categorized data storage right away.
-    IMPORTANT NOTE: If you do plan not switching to non-categoric mode, or if
-    you don't plan to use categories at all, then using this style will result
-    in waste of resources.
-
-*/
-wxPG_EX_INIT_NOCAT                  = 0x00001000,
-
-/** Extended window style that sets wxPropertyGridManager toolbar to not
-    use flat style.
-*/
-wxPG_EX_NO_FLAT_TOOLBAR             = 0x00002000,
-
-/** Shows alphabetic/categoric mode buttons from toolbar.
-*/
-wxPG_EX_MODE_BUTTONS                = 0x00008000,
-
-/** Show property help strings as tool tips instead as text on the status bar.
-    You can set the help strings using SetPropertyHelpString member function.
-*/
-wxPG_EX_HELP_AS_TOOLTIPS            = 0x00010000,
-
-/** Prevent TAB from focusing to wxButtons. This behavior was default
-    in version 1.2.0 and earlier.
-    NOTE! Tabbing to button doesn't work yet. Problem seems to be that on wxMSW
-      atleast the button doesn't properly propagate key events (yes, I'm using
-      wxWANTS_CHARS).
-*/
-//wxPG_EX_NO_TAB_TO_BUTTON            = 0x00020000,
-
-/** Allows relying on native double-buffering.
-*/
-wxPG_EX_NATIVE_DOUBLE_BUFFERING         = 0x00080000,
-
-/** Set this style to let user have ability to set values of properties to
-    unspecified state. Same as setting wxPG_PROP_AUTO_UNSPECIFIED for
-    all properties.
-*/
-wxPG_EX_AUTO_UNSPECIFIED_VALUES         = 0x00200000,
-
-/**
-    If this style is used, built-in attributes (such as wxPG_FLOAT_PRECISION
-    and wxPG_STRING_PASSWORD) are not stored into property's attribute storage
-    (thus they are not readable).
-
-    Note that this option is global, and applies to all wxPG property
-    containers.
-*/
-wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES    = 0x00400000,
-
-/** Hides page selection buttons from toolbar.
-*/
-wxPG_EX_HIDE_PAGE_BUTTONS               = 0x01000000
-
-};
-
-/** Combines various styles.
-*/
-#define wxPG_DEFAULT_STYLE          (0)
-
-/** Combines various styles.
-*/
-#define wxPGMAN_DEFAULT_STYLE       (0)
-
-/** @}
-*/
-
-// -----------------------------------------------------------------------
-
-//
-// Ids for sub-controls
-// NB: It should not matter what these are.
-#define wxPG_SUBID1                     2
-#define wxPG_SUBID2                     3
-#define wxPG_SUBID_TEMP1                4
-
-// -----------------------------------------------------------------------
-
-/** @class wxPGCommonValue
-
-    wxPropertyGrid stores information about common values in these
-    records.
-
-    NB: Common value feature is not complete, and thus not mentioned in
-        documentation.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGCommonValue
-{
-public:
-
-    wxPGCommonValue( const wxString& label, wxPGCellRenderer* renderer )
-    {
-        m_label = label;
-        m_renderer = renderer;
-        renderer->IncRef();
-    }
-    virtual ~wxPGCommonValue()
-    {
-        m_renderer->DecRef();
-    }
-
-    virtual wxString GetEditableText() const { return m_label; }
-    const wxString& GetLabel() const { return m_label; }
-    wxPGCellRenderer* GetRenderer() const { return m_renderer; }
-
-protected:
-    wxString            m_label;
-    wxPGCellRenderer*   m_renderer;
-};
-
-// -----------------------------------------------------------------------
-
-/** @section propgrid_vfbflags wxPropertyGrid Validation Failure Behavior Flags
-    @{
-*/
-
-enum wxPG_VALIDATION_FAILURE_BEHAVIOR_FLAGS
-{
-
-/** Prevents user from leaving property unless value is valid. If this
-    behavior flag is not used, then value change is instead cancelled.
-*/
-wxPG_VFB_STAY_IN_PROPERTY           = 0x01,
-
-/** Calls wxBell() on validation failure.
-*/
-wxPG_VFB_BEEP                       = 0x02,
-
-/** Cell with invalid value will be marked (with red colour).
-*/
-wxPG_VFB_MARK_CELL                  = 0x04,
-
-/** Display customizable text message explaining the situation.
-*/
-wxPG_VFB_SHOW_MESSAGE               = 0x08,
-
-/** Defaults. */
-wxPG_VFB_DEFAULT                    = wxPG_VFB_STAY_IN_PROPERTY|wxPG_VFB_BEEP,
-
-/** Only used internally. */
-wxPG_VFB_UNDEFINED                  = 0x80
-
-};
-
-/** @}
-*/
-
-typedef wxByte wxPGVFBFlags;
-
-/**
-    wxPGValidationInfo
-
-    Used to convey validation information to and from functions that
-    actually perform validation. Mostly used in custom property
-    classes.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGValidationInfo
-{
-    friend class wxPropertyGrid;
-public:
-    /**
-        @return Returns failure behavior which is a combination of
-               @ref propgrid_vfbflags.
-    */
-    wxPGVFBFlags GetFailureBehavior() const
-        { return m_failureBehavior; }
-
-    /**
-        Returns current failure message.
-    */
-    const wxString& GetFailureMessage() const
-        { return m_failureMessage; }
-
-    /**
-        Returns reference to pending value.
-    */
-    const wxVariant& GetValue() const
-    {
-        wxASSERT(m_pValue);
-        return *m_pValue;
-    }
-
-    /** Set validation failure behavior
-
-        @param failureBehavior
-            Mixture of @ref propgrid_vfbflags.
-    */
-    void SetFailureBehavior(wxPGVFBFlags failureBehavior)
-        { m_failureBehavior = failureBehavior; }
-
-    /**
-        Set current failure message.
-    */
-    void SetFailureMessage(const wxString& message)
-        { m_failureMessage = message; }
-
-private:
-    /** Value to be validated.
-    */
-    wxVariant*      m_pValue;
-
-    /** Message displayed on validation failure.
-    */
-    wxString        m_failureMessage;
-
-    /** Validation failure behavior. Use wxPG_VFB_XXX flags.
-    */
-    wxPGVFBFlags    m_failureBehavior;
-};
-
-// -----------------------------------------------------------------------
-
-/** @section propgrid_pgactions wxPropertyGrid Action Identifiers
-
-    These are used with wxPropertyGrid::AddActionTrigger() and
-    wxPropertyGrid::ClearActionTriggers().
-    @{
-*/
-
-enum wxPG_KEYBOARD_ACTIONS
-{
-    wxPG_ACTION_INVALID = 0,
-    wxPG_ACTION_NEXT_PROPERTY,
-    wxPG_ACTION_PREV_PROPERTY,
-    wxPG_ACTION_EXPAND_PROPERTY,
-    wxPG_ACTION_COLLAPSE_PROPERTY,
-    wxPG_ACTION_CANCEL_EDIT,
-    wxPG_ACTION_PRESS_BUTTON,  // Causes editor button (if any) to be pressed
-    wxPG_ACTION_MAX
-};
-
-/** @}
-*/
-
-// -----------------------------------------------------------------------
-
-
-// wxPropertyGrid::DoSelectProperty flags (selFlags)
-
-// Focuses to created editor
-#define wxPG_SEL_FOCUS      0x01
-// Forces deletion and recreation of editor
-#define wxPG_SEL_FORCE      0x02
-// For example, doesn't cause EnsureVisible
-#define wxPG_SEL_NONVISIBLE 0x04
-// Do not validate editor's value before selecting
-#define wxPG_SEL_NOVALIDATE 0x08
-// Property being deselected is about to be deleted
-#define wxPG_SEL_DELETING   0x10
-// Property's values was set to unspecified by the user
-#define wxPG_SEL_SETUNSPEC  0x20
-// Property's event handler changed the value
-#define wxPG_SEL_DIALOGVAL  0x40
-
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-// Internal flags
-#define wxPG_FL_INITIALIZED                 0x0001
-// Set when creating editor controls if it was clicked on.
-#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002
-#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004
-#define wxPG_FL_FOCUSED                     0x0008
-#define wxPG_FL_MOUSE_CAPTURED              0x0010
-#define wxPG_FL_MOUSE_INSIDE                0x0020
-#define wxPG_FL_VALUE_MODIFIED              0x0040
-// don't clear background of m_wndEditor
-#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080
-// currently active editor uses custom image
-#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100
-// cell colours override selection colours for selected cell
-#define wxPG_FL_CELL_OVERRIDES_SEL          0x0200
-#define wxPG_FL_SCROLLED                    0x0400
-// set when all added/inserted properties get hideable flag
-#define wxPG_FL_ADDING_HIDEABLES            0x0800
-// Disables showing help strings on statusbar.
-#define wxPG_FL_NOSTATUSBARHELP             0x1000
-// Marks that we created the state, so we have to destroy it too.
-#define wxPG_FL_CREATEDSTATE                0x2000
-// Set if scrollbar's existence was detected in last onresize.
-#define wxPG_FL_SCROLLBAR_DETECTED          0x4000
-// Set if wxPGMan requires redrawing of description text box.
-#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000
-// Set if contained in wxPropertyGridManager
-#define wxPG_FL_IN_MANAGER                  0x00020000
-// Set after wxPropertyGrid is shown in its initial good size
-#define wxPG_FL_GOOD_SIZE_SET               0x00040000
-// Set when in SelectProperty.
-#define wxPG_FL_IN_SELECT_PROPERTY          0x00100000
-// Set when help string is shown in status bar
-#define wxPG_FL_STRING_IN_STATUSBAR         0x00200000
-// Splitter position has been custom-set by the user
-#define wxPG_FL_SPLITTER_PRE_SET            0x00400000
-// Validation failed. Clear on modify event.
-#define wxPG_FL_VALIDATION_FAILED           0x00800000
-// Auto sort is enabled (for categorized mode)
-#define wxPG_FL_CATMODE_AUTO_SORT           0x01000000
-// Set after page has been inserted to manager
-#define wxPG_MAN_FL_PAGE_INSERTED           0x02000000
-// Active editor control is abnormally large
-#define wxPG_FL_ABNORMAL_EDITOR             0x04000000
-// Recursion guard for HandleCustomEditorEvent
-#define wxPG_FL_IN_HANDLECUSTOMEDITOREVENT  0x08000000
-#define wxPG_FL_VALUE_CHANGE_IN_EVENT       0x10000000
-// Editor control width should not change on resize
-#define wxPG_FL_FIXED_WIDTH_EDITOR          0x20000000
-// Width of panel can be different than width of grid
-#define wxPG_FL_HAS_VIRTUAL_WIDTH           0x40000000
-// Prevents RecalculateVirtualSize re-entrancy
-#define wxPG_FL_RECALCULATING_VIRTUAL_SIZE  0x80000000
-
-#endif // #ifndef SWIG
-
-#if !defined(__wxPG_SOURCE_FILE__) && !defined(SWIG)
-    // Reduce compile time, but still include in user app
-    #include "wx/propgrid/props.h"
-#endif
-
-// -----------------------------------------------------------------------
-
-/** @class wxPropertyGrid
-
-    wxPropertyGrid is a specialized grid for editing properties
-    such as strings, numbers, flagsets, fonts, and colours. wxPropertySheet
-    used to do the very same thing, but it hasn't been updated for a while
-    and it is currently deprecated.
-
-    Please note that most member functions are inherited and as such not
-    documented on this page. This means you will probably also want to read
-    wxPropertyGridInterface class reference.
-
-    See also @ref overview_propgrid.
-
-    @section propgrid_window_styles_ Window Styles
-
-    See @ref propgrid_window_styles.
-
-    @section propgrid_event_handling Event Handling
-
-    To process input from a propertygrid control, use these event handler
-    macros to direct input to member functions that take a wxPropertyGridEvent
-    argument.
-
-    @beginEventTable{wxPropertyGridEvent}
-    @event{EVT_PG_SELECTED (id, func)}
-        Respond to wxEVT_PG_SELECTED event, generated when property value
-        has been changed by user.
-    @event{EVT_PG_CHANGING(id, func)}
-        Respond to wxEVT_PG_CHANGING event, generated when property value
-        is about to be changed by user. Use wxPropertyGridEvent::GetValue()
-        to take a peek at the pending value, and wxPropertyGridEvent::Veto()
-        to prevent change from taking place, if necessary.
-    @event{EVT_PG_HIGHLIGHTED(id, func)}
-        Respond to wxEVT_PG_HIGHLIGHTED event, which occurs when mouse
-        moves over a property. Event's property is NULL if hovered area does
-        not belong to any property.
-    @event{EVT_PG_RIGHT_CLICK(id, func)}
-        Respond to wxEVT_PG_RIGHT_CLICK event, which occurs when property is
-        clicked on with right mouse button.
-    @event{EVT_PG_DOUBLE_CLICK(id, func)}
-        Respond to wxEVT_PG_DOUBLE_CLICK event, which occurs when property is
-        double-clicked onwith left mouse button.
-    @event{EVT_PG_ITEM_COLLAPSED(id, func)}
-        Respond to wxEVT_PG_ITEM_COLLAPSED event, generated when user collapses
-        a property or category..
-    @event{EVT_PG_ITEM_EXPANDED(id, func)}
-        Respond to wxEVT_PG_ITEM_EXPANDED event, generated when user expands
-        a property or category..
-    @endEventTable
-
-    @remarks
-
-    - Use Freeze() and Thaw() respectively to disable and enable drawing. This
-      will also delay sorting etc. miscellaneous calculations to the last
-      possible moment.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID
-    wxPropertyGrid : public wxScrolledWindow, public wxPropertyGridInterface
-{
-    friend class wxPropertyGridPageState;
-    friend class wxPropertyGridInterface;
-    friend class wxPropertyGridManager;
-    friend class wxPGCanvas;
-
-    DECLARE_DYNAMIC_CLASS(wxPropertyGrid)
-public:
-
-#ifndef SWIG
-    /**
-        Two step constructor.
-
-        Call Create when this constructor is called to build up the
-        wxPropertyGrid
-    */
-    wxPropertyGrid();
-#endif
-
-    /** The default constructor. The styles to be used are styles valid for
-        the wxWindow and wxScrolledWindow.
-
-        @see @link wndflags Additional Window Styles @endlink
-    */
-    wxPropertyGrid( wxWindow *parent, wxWindowID id = wxID_ANY,
-                    const wxPoint& pos = wxDefaultPosition,
-                    const wxSize& size = wxDefaultSize,
-                    long style = wxPG_DEFAULT_STYLE,
-                    const wxString& name = wxPropertyGridNameStr );
-
-    /** Destructor */
-    virtual ~wxPropertyGrid();
-
-    /** Adds given key combination to trigger given action.
-
-        @param action
-            Which action to trigger. See @link pgactions List of list of
-            wxPropertyGrid actions@endlink.
-    */
-    void AddActionTrigger( int action, int keycode, int modifiers = 0 );
-
-    /**
-        This static function enables or disables automatic use of
-        wxGetTranslation for following strings: wxEnumProperty list labels,
-        wxFlagsProperty sub-property labels.
-
-        Default is false.
-    */
-    static void AutoGetTranslation( bool enable );
-
-    /**
-        Changes value of a property, as if from an editor.
-
-        Use this instead of SetPropertyValue() if you need the value to run
-        through validation process, and also send the property change event.
-
-        @return
-        Returns true if value was successfully changed.
-    */
-    bool ChangePropertyValue( wxPGPropArg id, wxVariant newValue );
-
-    /**
-        Centers the splitter.
-
-        If argument is true, automatic splitter centering is enabled (only
-        applicapple if style wxPG_SPLITTER_AUTO_CENTER was defined).
-    */
-    void CenterSplitter( bool enable_auto_centering = false );
-
-    /** Deletes all properties.
-    */
-    virtual void Clear();
-
-    /** Clears action triggers for given action.
-        @param action
-            Which action to trigger. See @link pgactions List of list of
-            wxPropertyGrid actions@endlink.
-    */
-    void ClearActionTriggers( int action );
-
-    /** Forces updating the value of property from the editor control.
-
-        Note that wxEVT_PG_CHANGING and wxEVT_PG_CHANGED are dispatched using
-        ProcessEvent, meaning your event handlers will be called immediately.
-
-        @return
-        Returns true if anything was changed.
-    */
-    virtual bool CommitChangesFromEditor( wxUint32 flags = 0 );
-
-    /**
-        Two step creation.
-
-        Whenever the control is created without any parameters, use Create to
-        actually create it. Don't access the control's public methods before
-        this is called @see @link wndflags Additional Window Styles@endlink
-    */
-    bool Create( wxWindow *parent, wxWindowID id = wxID_ANY,
-                 const wxPoint& pos = wxDefaultPosition,
-                 const wxSize& size = wxDefaultSize,
-                 long style = wxPG_DEFAULT_STYLE,
-                 const wxString& name = wxPropertyGridNameStr );
-
-    /**
-        Call when editor widget's contents is modified.
-
-        For example, this is called when changes text in wxTextCtrl (used in
-        wxStringProperty and wxIntProperty).
-
-        @remarks
-        This function should only be called by custom properties.
-
-        @see wxPGProperty::OnEvent()
-    */
-    void EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
-
-    /** Reverse of EditorsValueWasModified().
-
-        @remarks
-        This function should only be called by custom properties.
-    */
-    void EditorsValueWasNotModified()
-    {
-        m_iFlags &= ~(wxPG_FL_VALUE_MODIFIED);
-    }
-
-    /**
-        Enables or disables (shows/hides) categories according to parameter
-        enable.
-     */
-    bool EnableCategories( bool enable );
-
-    /** Scrolls and/or expands items to ensure that the given item is visible.
-        Returns true if something was actually done.
-    */
-    bool EnsureVisible( wxPGPropArg id );
-
-    /**
-        Reduces column sizes to minimum possible that contents are still
-        visibly (naturally some margin space will be applied as well).
-
-        @return
-        Minimum size for the grid to still display everything.
-
-        @remarks
-        Does not work well with wxPG_SPLITTER_AUTO_CENTER window style.
-
-        This function only works properly if grid size prior to call was already
-        fairly large.
-
-        Note that you can also get calculated column widths by calling
-        GetState->GetColumnWidth() immediately after this function returns.
-    */
-    wxSize FitColumns()
-    {
-        wxSize sz = m_pState->DoFitColumns();
-        return sz;
-    }
-
-    /**
-        Returns wxWindow that the properties are painted on, and which should
-        be used as the parent for editor controls.
-    */
-    wxPanel* GetPanel() const
-    {
-        return m_canvas;
-    }
-
-    /** Returns current category caption background colour. */
-    wxColour GetCaptionBackgroundColour() const { return m_colCapBack; }
-
-    wxFont& GetCaptionFont() { return m_captionFont; }
-
-    const wxFont& GetCaptionFont() const { return m_captionFont; }
-
-    /** Returns current category caption text colour. */
-    wxColour GetCaptionForegroundColour() const { return m_colCapFore; }
-
-    /** Returns current cell background colour. */
-    wxColour GetCellBackgroundColour() const { return m_colPropBack; }
-
-    /** Returns current cell text colour when disabled. */
-    wxColour GetCellDisabledTextColour() const { return m_colDisPropFore; }
-
-    /** Returns current cell text colour. */
-    wxColour GetCellTextColour() const { return m_colPropFore; }
-
-    /**
-        Returns number of columns currently on grid.
-    */
-    unsigned int GetColumnCount() const
-    {
-        return (unsigned int) m_pState->m_colWidths.size();
-    }
-
-    /** Returns colour of empty space below properties. */
-    wxColour GetEmptySpaceColour() const { return m_colEmptySpace; }
-
-    /** Returns height of highest characters of used font. */
-    int GetFontHeight() const { return m_fontHeight; }
-
-    /** Returns pointer to itself. Dummy function that enables same kind
-        of code to use wxPropertyGrid and wxPropertyGridManager.
-    */
-    wxPropertyGrid* GetGrid() { return this; }
-
-    /** Returns rectangle of custom paint image.
-    */
-    wxRect GetImageRect( wxPGProperty* p, int item ) const;
-
-    /** Returns size of the custom paint image in front of property.
-        If no argument is given, returns preferred size.
-    */
-    wxSize GetImageSize( wxPGProperty* p = NULL, int item = -1 ) const;
-
-    //@{
-    /** Returns last item which could be iterated using given flags.
-        @param flags
-        See @ref propgrid_iterator_flags.
-    */
-    wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT )
-    {
-        return m_pState->GetLastItem(flags);
-    }
-
-    const wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT ) const
-    {
-        return m_pState->GetLastItem(flags);
-    }
-    //@}
-
-    /** Returns colour of lines between cells. */
-    wxColour GetLineColour() const { return m_colLine; }
-
-    /** Returns background colour of margin. */
-    wxColour GetMarginColour() const { return m_colMargin; }
-
-    /**
-        Returns most up-to-date value of selected property. This will return
-        value different from GetSelectedProperty()->GetValue() only when text
-        editor is activate and string edited by user represents valid,
-        uncommitted property value.
-    */
-    wxVariant GetUncommittedPropertyValue();
-
-    /** Returns "root property". It does not have name, etc. and it is not
-        visible. It is only useful for accessing its children.
-    */
-    wxPGProperty* GetRoot() const { return m_pState->m_properties; }
-
-    /** Returns height of a single grid row (in pixels). */
-    int GetRowHeight() const { return m_lineHeight; }
-
-    /** Returns currently selected property. */
-    wxPGProperty* GetSelectedProperty() const { return GetSelection(); }
-
-    /** Returns currently selected property. */
-    wxPGProperty* GetSelection() const
-    {
-        return m_selected;
-    }
-
-    /** Returns current selection background colour. */
-    wxColour GetSelectionBackgroundColour() const { return m_colSelBack; }
-
-    /** Returns current selection text colour. */
-    wxColour GetSelectionForegroundColour() const { return m_colSelFore; }
-
-    /** Returns current splitter x position. */
-    int GetSplitterPosition() const
-        { return m_pState->DoGetSplitterPosition(0); }
-
-    /** Returns wxTextCtrl active in currently selected property, if any. Takes
-        into account wxOwnerDrawnComboBox.
-    */
-    wxTextCtrl* GetEditorTextCtrl() const;
-
-    wxPGValidationInfo& GetValidationInfo()
-    {
-        return m_validationInfo;
-    }
-
-    /** Returns current vertical spacing. */
-    int GetVerticalSpacing() const { return (int)m_vspacing; }
-
-    /**
-        Returns @true if a property editor control has focus.
-    */
-    bool IsEditorFocused() const;
-
-    /** Returns true if editor's value was marked modified.
-    */
-    bool IsEditorsValueModified() const
-        { return  ( m_iFlags & wxPG_FL_VALUE_MODIFIED ) ? true : false; }
-
-    /**
-        Returns information about arbitrary position in the grid.
-
-        @param pt
-            Coordinates in the virtual grid space. You may need to use
-            wxScrolledWindow::CalcScrolledPosition() for translating
-            wxPropertyGrid client coordinates into something this member
-            function can use.
-    */
-    wxPropertyGridHitTestResult HitTest( const wxPoint& pt ) const;
-
-    /** Returns true if any property has been modified by the user. */
-    bool IsAnyModified() const { return (m_pState->m_anyModified>0); }
-
-    /**
-        Returns true if updating is frozen (ie Freeze() called but not yet
-        Thaw() ).
-     */
-    bool IsFrozen() const { return (m_frozen>0)?true:false; }
-
-    /** Redraws given property.
-    */
-    virtual void RefreshProperty( wxPGProperty* p );
-
-#ifndef SWIG
-    /** Registers a new editor class.
-        @return
-        Pointer to the editor class instance that should be used.
-    */
-    static wxPGEditor* RegisterEditorClass( wxPGEditor* editor,
-                                            bool noDefCheck = false )
-    {
-        return DoRegisterEditorClass(editor, wxEmptyString, noDefCheck);
-    }
-
-    static wxPGEditor* DoRegisterEditorClass( wxPGEditor* editorClass,
-                                              const wxString& editorName,
-                                              bool noDefCheck = false );
-#endif
-
-    /** Resets all colours to the original system values.
-    */
-    void ResetColours();
-
-    /**
-        Selects a property.
-        Editor widget is automatically created, but not focused unless focus is
-        true. This will generate wxEVT_PG_SELECT event.
-        @param id
-            Property to select.
-        @return
-            True if selection finished successfully. Usually only fails if
-            current value in editor is not valid.
-        @see wxPropertyGrid::Unselect
-    */
-    bool SelectProperty( wxPGPropArg id, bool focus = false )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return DoSelectProperty(p,focus?wxPG_SEL_FOCUS:0);
-    }
-
-    /** Sets category caption background colour. */
-    void SetCaptionBackgroundColour(const wxColour& col);
-
-    /** Sets category caption text colour. */
-    void SetCaptionTextColour(const wxColour& col);
-
-    /** Sets default cell background colour - applies to property cells.
-        Note that appearance of editor widgets may not be affected.
-    */
-    void SetCellBackgroundColour(const wxColour& col);
-
-    /** Sets cell text colour for disabled properties.
-    */
-    void SetCellDisabledTextColour(const wxColour& col);
-
-    /** Sets default cell text colour - applies to property name and value text.
-        Note that appearance of editor widgets may not be affected.
-    */
-    void SetCellTextColour(const wxColour& col);
-
-    /** Set number of columns (2 or more).
-    */
-    void SetColumnCount( int colCount )
-    {
-        m_pState->SetColumnCount(colCount);
-        Refresh();
-    }
-
-    /**
-        Sets the 'current' category - Append will add non-category properties
-        under it.
-    */
-    void SetCurrentCategory( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        wxPropertyCategory* pc = wxDynamicCast(p, wxPropertyCategory);
-        wxASSERT(pc);
-        m_pState->m_currentCategory = pc;
-    }
-
-    /** Sets colour of empty space below properties. */
-    void SetEmptySpaceColour(const wxColour& col);
-
-    /** Sets colour of lines between cells. */
-    void SetLineColour(const wxColour& col);
-
-    /** Sets background colour of margin. */
-    void SetMarginColour(const wxColour& col);
-
-    /**
-        Sets selection background colour - applies to selected property name
-        background.
-    */
-    void SetSelectionBackgroundColour(const wxColour& col);
-
-    /**
-        Sets selection foreground colour - applies to selected property name
-        text.
-     */
-    void SetSelectionTextColour(const wxColour& col);
-
-    /** Sets x coordinate of the splitter.
-        @remarks
-        Splitter position cannot exceed grid size, and therefore setting it
-        during form creation may fail as initial grid size is often smaller
-        than desired splitter position, especially when sizers are being used.
-    */
-    void SetSplitterPosition( int newxpos, int col = 0 )
-    {
-        DoSetSplitterPosition_(newxpos, true, col);
-        m_iFlags |= wxPG_FL_SPLITTER_PRE_SET;
-    }
-
-    /**
-        Sets the property sorting function.
-
-        @param sortFunction
-            The sorting function to be used. It should return a value greater
-            than 0 if position of p1 is after p2. So, for instance, when
-            comparing property names, you can use following implementation:
-
-            @code
-                int MyPropertySortFunction(wxPropertyGrid* propGrid,
-                                           wxPGProperty* p1,
-                                           wxPGProperty* p2)
-                {
-                    return p1->GetBaseName().compare( p2->GetBaseName() );
-                }
-            @endcode
-
-        @remarks
-            Default property sort function sorts properties by their labels
-            (case-insensitively).
-
-        @see GetSortFunction, wxPropertyGridInterface::Sort,
-             wxPropertyGridInterface::SortChildren
-    */
-    void SetSortFunction( wxPGSortCallback sortFunction )
-    {
-        m_sortFunction = sortFunction;
-    }
-
-    /**
-        Returns the property sort function (default is @NULL).
-
-        @see SetSortFunction
-    */
-    wxPGSortCallback GetSortFunction() const
-    {
-        return m_sortFunction;
-    }
-
-    /** Set virtual width for this particular page. Width -1 indicates that the
-        virtual width should be disabled. */
-    void SetVirtualWidth( int width );
-
-    /**
-        Moves splitter as left as possible, while still allowing all
-        labels to be shown in full.
-
-        @param privateChildrenToo
-            If @false, will still allow private children to be cropped.
-    */
-    void SetSplitterLeft( bool privateChildrenToo = false )
-    {
-        m_pState->SetSplitterLeft(privateChildrenToo);
-    }
-
-    /** Sets vertical spacing. Can be 1, 2, or 3 - a value relative to font
-        height. Value of 2 should be default on most platforms.
-    */
-    void SetVerticalSpacing( int vspacing )
-    {
-        m_vspacing = (unsigned char)vspacing;
-        CalculateFontAndBitmapStuff( vspacing );
-        if ( !m_pState->m_itemsAdded ) Refresh();
-    }
-
-    /** Shows an brief error message that is related to a property. */
-    void ShowPropertyError( wxPGPropArg id, const wxString& msg )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        DoShowPropertyError(p, msg);
-    }
-
-    /////////////////////////////////////////////////////////////////
-    //
-    // Following methods do not need to be (currently) documented
-    //
-    /////////////////////////////////////////////////////////////////
-
-    bool HasVirtualWidth() const
-        { return (m_iFlags & wxPG_FL_HAS_VIRTUAL_WIDTH) ? true : false; }
-
-    const wxPGCommonValue* GetCommonValue( unsigned int i ) const
-    {
-        return (wxPGCommonValue*) m_commonValues[i];
-    }
-
-    /** Returns number of common values.
-    */
-    unsigned int GetCommonValueCount() const
-    {
-        return (unsigned int) m_commonValues.size();
-    }
-
-    /** Returns label of given common value.
-    */
-    wxString GetCommonValueLabel( unsigned int i ) const
-    {
-        wxASSERT( GetCommonValue(i) );
-        return GetCommonValue(i)->GetLabel();
-    }
-
-    /**
-        Returns index of common value that will truly change value to
-        unspecified.
-    */
-    int GetUnspecifiedCommonValue() const { return m_cvUnspecified; }
-
-    /** Set index of common value that will truly change value to unspecified.
-        Using -1 will set none to have such effect.
-        Default is 0.
-    */
-    void SetUnspecifiedCommonValue( int index ) { m_cvUnspecified = index; }
-
-    /**
-        Shortcut for creating dialog-caller button. Used, for example, by
-        wxFontProperty.
-        @remarks
-        This should only be called by properties.
-    */
-    wxWindow* GenerateEditorButton( const wxPoint& pos, const wxSize& sz );
-
-    /** Fixes position of wxTextCtrl-like control (wxSpinCtrl usually
-        fits as one). Call after control has been created (but before
-        shown).
-    */
-    void FixPosForTextCtrl( wxWindow* ctrl,
-                            const wxPoint& offset = wxPoint(0, 0) );
-
-    /** Shortcut for creating text editor widget.
-        @param pos
-            Same as pos given for CreateEditor.
-        @param sz
-            Same as sz given for CreateEditor.
-        @param value
-            Initial text for wxTextCtrl.
-        @param secondary
-            If right-side control, such as button, also created, then create it
-            first and pass it as this parameter.
-        @param extraStyle
-            Extra style flags to pass for wxTextCtrl.
-        @remarks
-        Note that this should generally be called only by new classes derived
-        from wxPGProperty.
-    */
-    wxWindow* GenerateEditorTextCtrl( const wxPoint& pos,
-                                      const wxSize& sz,
-                                      const wxString& value,
-                                      wxWindow* secondary,
-                                      int extraStyle = 0,
-                                      int maxLen = 0 );
-
-    /* Generates both textctrl and button.
-    */
-    wxWindow* GenerateEditorTextCtrlAndButton( const wxPoint& pos,
-        const wxSize& sz, wxWindow** psecondary, int limited_editing,
-        wxPGProperty* property );
-
-    /** Generates position for a widget editor dialog box.
-        @param p
-        Property for which dialog is positioned.
-        @param sz
-        Known or over-approximated size of the dialog.
-        @return
-        Position for dialog.
-    */
-    wxPoint GetGoodEditorDialogPosition( wxPGProperty* p,
-                                         const wxSize& sz );
-
-    // Converts escape sequences in src_str to newlines,
-    // tabs, etc. and copies result to dst_str.
-    static wxString& ExpandEscapeSequences( wxString& dst_str,
-                                            wxString& src_str );
-
-    // Converts newlines, tabs, etc. in src_str to escape
-    // sequences, and copies result to dst_str.
-    static wxString& CreateEscapeSequences( wxString& dst_str,
-                                            wxString& src_str );
-
-    /**
-        Returns rectangle that fully contains properties between and including
-        p1 and p2.
-    */
-    wxRect GetPropertyRect( const wxPGProperty* p1,
-                            const wxPGProperty* p2 ) const;
-
-    /** Returns pointer to current active primary editor control (NULL if none).
-    */
-    wxWindow* GetEditorControl() const;
-
-    wxWindow* GetPrimaryEditor() const
-    {
-        return GetEditorControl();
-    }
-
-    /**
-        Returns pointer to current active secondary editor control (NULL if
-        none).
-    */
-    wxWindow* GetEditorControlSecondary() const
-    {
-        return m_wndEditor2;
-    }
-
-    /**
-        Refreshes any active editor control.
-    */
-    void RefreshEditor();
-
-    // Events from editor controls are forward to this function
-    void HandleCustomEditorEvent( wxEvent &event );
-
-#ifndef SWIG
-
-    /**
-        Generates contents for string dst based on the contents of
-        wxArrayString src.
-
-        Format will be "(preDelim)str1(postDelim) (preDelim)str2(postDelim) and
-        so on. Set flags to 1 inorder to convert backslashes to double-back-
-        slashes and "(preDelims)"'s to "(preDelims)".
-    */
-    static void ArrayStringToString( wxString& dst, const wxArrayString& src,
-                                     wxChar preDelim, wxChar postDelim,
-                                     int flags );
-
-    // Mostly useful for page switching.
-    void SwitchState( wxPropertyGridPageState* pNewState );
-
-    long GetInternalFlags() const { return m_iFlags; }
-    bool HasInternalFlag( long flag ) const
-        { return (m_iFlags & flag) ? true : false; }
-    void SetInternalFlag( long flag ) { m_iFlags |= flag; }
-    void ClearInternalFlag( long flag ) { m_iFlags &= ~(flag); }
-    void IncFrozen() { m_frozen++; }
-    void DecFrozen() { m_frozen--; }
-
-    void OnComboItemPaint( const wxPGComboBox* pCb,
-                           int item,
-                           wxDC* pDc,
-                           wxRect& rect,
-                           int flags );
-
-    /** Standardized double-to-string conversion.
-    */
-    static void DoubleToString( wxString& target,
-                                double value,
-                                int precision,
-                                bool removeZeroes,
-                                wxString* precTemplate );
-
-    /**
-        Call this from wxPGProperty::OnEvent() to cause property value to be
-        changed after the function returns (with true as return value).
-        ValueChangeInEvent() must be used if you wish the application to be
-        able to use wxEVT_PG_CHANGING to potentially veto the given value.
-    */
-    void ValueChangeInEvent( wxVariant variant )
-    {
-        m_changeInEventValue = variant;
-        m_iFlags |= wxPG_FL_VALUE_CHANGE_IN_EVENT;
-    }
-
-    /** Returns true if given event is from first of an array of buttons
-        (as can be in case when wxPGMultiButton is used).
-    */
-    bool IsMainButtonEvent( const wxEvent& event )
-    {
-        return (event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED)
-                    && (m_wndSecId == event.GetId());
-    }
-
-    /** Pending value is expected to be passed in PerformValidation().
-    */
-    virtual bool DoPropertyChanged( wxPGProperty* p,
-                                    unsigned int selFlags = 0 );
-
-    /** Called when validation for given property fails.
-        @param invalidValue
-            Value which failed in validation.
-        @return
-            Return true if user is allowed to change to another property even
-            if current has invalid value.
-        @remarks
-        To add your own validation failure behavior, override
-        wxPropertyGrid::DoOnValidationFailure().
-    */
-    bool OnValidationFailure( wxPGProperty* property,
-                              wxVariant& invalidValue );
-
-    /** Called to indicate property and editor has valid value now.
-    */
-    void OnValidationFailureReset( wxPGProperty* property )
-    {
-        if ( property && property->HasFlag(wxPG_PROP_INVALID_VALUE) )
-        {
-            DoOnValidationFailureReset(property);
-            property->ClearFlag(wxPG_PROP_INVALID_VALUE);
-        }
-        m_validationInfo.m_failureMessage.clear();
-    }
-
-    /** Override in derived class to display error messages in custom manner
-        (these message usually only result from validation failure).
-    */
-    virtual void DoShowPropertyError( wxPGProperty* property,
-                                      const wxString& msg );
-
-    /** Override to customize property validation failure behavior.
-        @param invalidValue
-            Value which failed in validation.
-        @return
-            Return true if user is allowed to change to another property even
-            if current has invalid value.
-    */
-    virtual bool DoOnValidationFailure( wxPGProperty* property,
-                                        wxVariant& invalidValue );
-
-    /** Override to customize resetting of property validation failure status.
-        @remarks
-        Property is guaranteed to have flag wxPG_PROP_INVALID_VALUE set.
-    */
-    virtual void DoOnValidationFailureReset( wxPGProperty* property );
-
-    int GetSpacingY() const { return m_spacingy; }
-
-    /**
-        Must be called in wxPGEditor::CreateControls() if primary editor window
-        is wxTextCtrl, just before textctrl is created.
-        @param text
-            Initial text value of created wxTextCtrl.
-    */
-    void SetupTextCtrlValue( const wxString text ) { m_prevTcValue = text; }
-
-    /**
-        Unfocuses or closes editor if one was open, but does not deselect
-        property.
-    */
-    bool UnfocusEditor();
-
-    virtual void SetWindowStyleFlag( long style );
-
-    void DrawItems( const wxPGProperty* p1, const wxPGProperty* p2 );
-
-    void DrawItem( wxPGProperty* p )
-    {
-        DrawItems(p,p);
-    }
-
-    virtual void DrawItemAndChildren( wxPGProperty* p );
-
-    /**
-        Draws item, children, and consequtive parents as long as category is
-        not met.
-     */
-    void DrawItemAndValueRelated( wxPGProperty* p );
-
-protected:
-
-    /**
-        wxPropertyGridPageState used by the grid is created here.
-
-        If grid is used in wxPropertyGridManager, there is no point overriding
-        this - instead, set custom wxPropertyGridPage classes.
-    */
-    virtual wxPropertyGridPageState* CreateState() const;
-
-    enum PerformValidationFlags
-    {
-        SendEvtChanging         = 0x0001,
-        IsStandaloneValidation  = 0x0002   // Not called in response to event
-    };
-
-    /**
-        Runs all validation functionality (includes sending wxEVT_PG_CHANGING).
-        Returns true if all tests passed. Implement in derived class to
-        add additional validation behavior.
-    */
-    virtual bool PerformValidation( wxPGProperty* p,
-                                    wxVariant& pendingValue,
-                                    int flags = SendEvtChanging );
-
-public:
-
-    // Control font changer helper.
-    void SetCurControlBoldFont();
-
-    wxPGCell& GetPropertyDefaultCell()
-    {
-        return m_propertyDefaultCell;
-    }
-
-    wxPGCell& GetCategoryDefaultCell()
-    {
-        return m_categoryDefaultCell;
-    }
-
-    //
-    // Public methods for semi-public use
-    // (not protected for optimization)
-    //
-    bool DoSelectProperty( wxPGProperty* p, unsigned int flags = 0 );
-
-    // Overridden functions.
-    virtual bool Destroy();
-    // Returns property at given y coordinate (relative to grid's top left).
-    wxPGProperty* GetItemAtY( int y ) const { return DoGetItemAtY(y); }
-
-    virtual void Refresh( bool eraseBackground = true,
-                          const wxRect *rect = (const wxRect *) NULL );
-    virtual bool SetFont( const wxFont& font );
-#if wxPG_SUPPORT_TOOLTIPS
-    void SetToolTip( const wxString& tipString );
-#endif
-    virtual void Freeze();
-    virtual void SetExtraStyle( long exStyle );
-    virtual void Thaw();
-
-
-protected:
-    virtual wxSize DoGetBestSize() const;
-
-#ifndef wxPG_ICON_WIDTH
-    wxBitmap            *m_expandbmp, *m_collbmp;
-#endif
-
-    wxCursor            *m_cursorSizeWE;
-
-    /** wxWindow pointers to editor control(s). */
-    wxWindow            *m_wndEditor;
-    wxWindow            *m_wndEditor2;
-
-    /** wxPGCanvas instance. */
-    wxPanel             *m_canvas;
-
-#if wxPG_DOUBLE_BUFFER
-    wxBitmap            *m_doubleBuffer;
-#endif
-
-    /** Local time ms when control was created. */
-    wxLongLong          m_timeCreated;
-
-    /** wxPGProperty::OnEvent can change value by setting this. */
-    wxVariant           m_changeInEventValue;
-
-    /** Id of m_wndEditor2, or its first child, if any. */
-    int                 m_wndSecId;
-
-    /** Extra Y spacing between the items. */
-    int                 m_spacingy;
-
-    /** Control client area width; updated on resize. */
-    int                 m_width;
-
-    /** Control client area height; updated on resize. */
-    int                 m_height;
-
-    /** Current non-client width (needed when auto-centering). */
-    int                 m_ncWidth;
-
-    /** Non-client width (auto-centering helper). */
-    //int                 m_fWidth;
-
-    /** Previously recorded scroll start position. */
-    int                 m_prevVY;
-
-    /**
-        The gutter spacing in front and back of the image.
-        This determines the amount of spacing in front of each item
-     */
-    int                 m_gutterWidth;
-
-    /** Includes separator line. */
-    int                 m_lineHeight;
-
-    /** Gutter*2 + image width. */
-    int                 m_marginWidth;
-
-    // y spacing for expand/collapse button.
-    int                 m_buttonSpacingY;
-
-    /** Extra margin for expanded sub-group items. */
-    int                 m_subgroup_extramargin;
-
-    /**
-        The image width of the [+] icon.
-
-        This is also calculated in the gutter
-     */
-    int                 m_iconWidth;
-
-#ifndef wxPG_ICON_WIDTH
-
-    /**
-        The image height of the [+] icon.
-
-        This is calculated as minimal size and to align
-     */
-    int                 m_iconHeight;
-#endif
-
-    /** Current cursor id. */
-    int                 m_curcursor;
-
-    /**
-        This captionFont is made equal to the font of the wxScrolledWindow.
-
-        As extra the bold face is set on it when this is wanted by the user
-        (see flags)
-     */
-    wxFont              m_captionFont;
-
-    int                 m_fontHeight;  // Height of the font.
-
-    /** m_splitterx when drag began. */
-    int                 m_startingSplitterX;
-
-    /**
-        Index to splitter currently being dragged (0=one after the first
-        column).
-     */
-    int                 m_draggedSplitter;
-
-    /** Changed property, calculated in PerformValidation(). */
-    wxPGProperty*       m_chgInfo_changedProperty;
-
-    /**
-        Lowest property for which editing happened, but which does not have
-        aggregate parent
-     */
-    wxPGProperty*       m_chgInfo_baseChangedProperty;
-
-    /** Changed property value, calculated in PerformValidation(). */
-    wxVariant           m_chgInfo_pendingValue;
-
-    /** Passed to SetValue. */
-    wxVariant           m_chgInfo_valueList;
-
-    /** Validation information. */
-    wxPGValidationInfo  m_validationInfo;
-
-    /** Actions and keys that trigger them. */
-    wxPGHashMapI2I      m_actionTriggers;
-
-    //
-    // Temporary values
-    //
-
-    /** Bits are used to indicate which colours are customized. */
-    unsigned short      m_coloursCustomized;
-
-    /** x - m_splitterx. */
-    signed char                 m_dragOffset;
-
-    /** 0 = not dragging, 1 = drag just started, 2 = drag in progress */
-    unsigned char       m_dragStatus;
-
-    /** 0 = margin, 1 = label, 2 = value. */
-    unsigned char       m_mouseSide;
-
-    /** True when editor control is focused. */
-    unsigned char       m_editorFocused;
-
-    /** 1 if m_latsCaption is also the bottommost caption. */
-    //unsigned char       m_lastCaptionBottomnest;
-
-    /** Set to 1 when graphics frozen. */
-    unsigned char       m_frozen;
-
-    unsigned char       m_vspacing;
-
-    // Used to track when Alt/Ctrl+Key was consumed.
-    unsigned char       m_keyComboConsumed;
-
-    /** 1 if in DoPropertyChanged() */
-    unsigned char       m_inDoPropertyChanged;
-
-    /** 1 if in CommitChangesFromEditor() */
-    unsigned char       m_inCommitChangesFromEditor;
-
-    /** 1 if in DoSelectProperty() */
-    unsigned char       m_inDoSelectProperty;
-
-    wxPGVFBFlags        m_permanentValidationFailureBehavior;  // Set by app
-
-    /** Internal flags - see wxPG_FL_XXX constants. */
-    wxUint32            m_iFlags;
-
-    /** When drawing next time, clear this many item slots at the end. */
-    int                 m_clearThisMany;
-
-    /** Pointer to selected property. Note that this is duplicated in
-        m_state for better transiency between pages so that the selected
-        item can be retained.
-    */
-    wxPGProperty*       m_selected;
-
-    // pointer to property that has mouse hovering
-    wxPGProperty*       m_propHover;
-
-    // EventObject for wxPropertyGridEvents
-    wxWindow*           m_eventObject;
-
-    // What (global) window is currently focused (needed to resolve event
-    // handling mess).
-    wxWindow*           m_curFocused;
-
-    // wxPGTLWHandler
-    wxEvtHandler*       m_tlwHandler;
-
-    // Top level parent
-    wxWindow*           m_tlp;
-
-    // Sort function
-    wxPGSortCallback    m_sortFunction;
-
-    // y coordinate of property that mouse hovering
-    int                 m_propHoverY;
-    // Which column's editor is selected (usually 1)?
-    int                 m_selColumn;
-
-    // x relative to splitter (needed for resize).
-    int                 m_ctrlXAdjust;
-
-    // lines between cells
-    wxColour            m_colLine;
-    // property labels and values are written in this colour
-    wxColour            m_colPropFore;
-    // or with this colour when disabled
-    wxColour            m_colDisPropFore;
-    // background for m_colPropFore
-    wxColour            m_colPropBack;
-    // text color for captions
-    wxColour            m_colCapFore;
-    // background color for captions
-    wxColour            m_colCapBack;
-    // foreground for selected property
-    wxColour            m_colSelFore;
-    // background for selected property (actually use background color when
-    // control out-of-focus)
-    wxColour            m_colSelBack;
-    // background colour for margin
-    wxColour            m_colMargin;
-    // background colour for empty space below the grid
-    wxColour            m_colEmptySpace;
-
-    // Default property colours
-    wxPGCell            m_propertyDefaultCell;
-
-    // Default property category
-    wxPGCell            m_categoryDefaultCell;
-
-    // Backup of selected property's cells
-    wxVector<wxPGCell>  m_propCellsBackup;
-
-    // NB: These *cannot* be moved to globals.
-
-    // labels when properties use common values
-    wxVector<wxPGCommonValue*>  m_commonValues;
-
-    // Which cv selection really sets value to unspecified?
-    int                 m_cvUnspecified;
-
-    // Used to skip excess text editor events
-    wxString            m_prevTcValue;
-
-protected:
-
-    // Sets some members to defaults (called constructors).
-    void Init1();
-
-    // Initializes some members (called by Create and complex constructor).
-    void Init2();
-
-    void OnPaint(wxPaintEvent &event );
-
-    // main event receivers
-    void OnMouseMove( wxMouseEvent &event );
-    void OnMouseMoveBottom( wxMouseEvent &event );
-    void OnMouseClick( wxMouseEvent &event );
-    void OnMouseRightClick( wxMouseEvent &event );
-    void OnMouseDoubleClick( wxMouseEvent &event );
-    void OnMouseUp( wxMouseEvent &event );
-    void OnKey( wxKeyEvent &event );
-    void OnResize( wxSizeEvent &event );
-
-    // event handlers
-    bool HandleMouseMove( int x, unsigned int y, wxMouseEvent &event );
-    bool HandleMouseClick( int x, unsigned int y, wxMouseEvent &event );
-    bool HandleMouseRightClick( int x, unsigned int y, wxMouseEvent &event );
-    bool HandleMouseDoubleClick( int x, unsigned int y, wxMouseEvent &event );
-    bool HandleMouseUp( int x, unsigned int y, wxMouseEvent &event );
-    void HandleKeyEvent( wxKeyEvent &event, bool fromChild );
-
-    void OnMouseEntry( wxMouseEvent &event );
-
-    void OnIdle( wxIdleEvent &event );
-    void OnFocusEvent( wxFocusEvent &event );
-    void OnChildFocusEvent( wxChildFocusEvent& event );
-
-    bool OnMouseCommon( wxMouseEvent &event, int* px, int *py );
-    bool OnMouseChildCommon( wxMouseEvent &event, int* px, int *py );
-
-    // sub-control event handlers
-    void OnMouseClickChild( wxMouseEvent &event );
-    void OnMouseRightClickChild( wxMouseEvent &event );
-    void OnMouseMoveChild( wxMouseEvent &event );
-    void OnMouseUpChild( wxMouseEvent &event );
-    void OnChildKeyDown( wxKeyEvent &event );
-
-    void OnCaptureChange( wxMouseCaptureChangedEvent &event );
-
-    void OnScrollEvent( wxScrollWinEvent &event );
-
-    void OnSysColourChanged( wxSysColourChangedEvent &event );
-
-protected:
-
-    /**
-        Adjust the centering of the bitmap icons (collapse / expand) when the
-        caption font changes.
-
-        They need to be centered in the middle of the font, so a bit of deltaY
-        adjustment is needed. On entry, m_captionFont must be set to window
-        font. It will be modified properly.
-      */
-    void CalculateFontAndBitmapStuff( int vspacing );
-
-    wxRect GetEditorWidgetRect( wxPGProperty* p, int column ) const;
-
-    void CorrectEditorWidgetSizeX();
-
-    /** Called in RecalculateVirtualSize() to reposition control
-        on virtual height changes.
-    */
-    void CorrectEditorWidgetPosY();
-
-    /** Deselect current selection, if any. Returns true if success
-        (ie. validator did not intercept). */
-    bool DoClearSelection();
-
-    int DoDrawItems( wxDC& dc,
-                     const wxRect* clipRect,
-                     bool isBuffered ) const;
-
-    /** Draws an expand/collapse (ie. +/-) button.
-    */
-    virtual void DrawExpanderButton( wxDC& dc, const wxRect& rect,
-                                     wxPGProperty* property ) const;
-
-    /** Draws items from topitemy to bottomitemy */
-    void DrawItems( wxDC& dc, unsigned int topitemy, unsigned int bottomitemy,
-                    const wxRect* clip_rect = (const wxRect*) NULL );
-
-    // Translate wxKeyEvent to wxPG_ACTION_XXX
-    int KeyEventToActions(wxKeyEvent &event, int* pSecond) const;
-
-    int KeyEventToAction(wxKeyEvent &event) const
-    {
-        return KeyEventToActions(event, NULL);
-    }
-
-    void ImprovedClientToScreen( int* px, int* py );
-
-    // Called by focus event handlers. newFocused is the window that becomes
-    // focused.
-    void HandleFocusChange( wxWindow* newFocused );
-
-    /** Reloads all non-customized colours from system settings. */
-    void RegainColours();
-
-    bool DoEditorValidate();
-
-    wxPGProperty* DoGetItemAtY( int y ) const;
-
-    void DoSetSplitterPosition_( int newxpos,
-                                 bool refresh = true,
-                                 int splitterIndex = 0,
-                                 bool allPages = false );
-
-    void FreeEditors();
-
-    virtual bool DoExpand( wxPGProperty* p, bool sendEvent = false );
-
-    virtual bool DoCollapse( wxPGProperty* p, bool sendEvent = false );
-
-    // Returns nearest paint visible property (such that will be painted unless
-    // window is scrolled or resized). If given property is paint visible, then
-    // it itself will be returned.
-    wxPGProperty* GetNearestPaintVisible( wxPGProperty* p ) const;
-
-    static void RegisterDefaultEditors();
-
-    // Sets up basic event handling for child control
-    void SetupChildEventHandling( wxWindow* wnd );
-
-    void CustomSetCursor( int type, bool override = false );
-
-    /**
-        Repositions scrollbar and underlying panel according to changed virtual
-        size.
-    */
-    void RecalculateVirtualSize( int forceXPos = -1 );
-
-    void PrepareAfterItemsAdded();
-
-    bool SendEvent( int eventType,
-                    wxPGProperty* p,
-                    wxVariant* pValue = NULL,
-                    unsigned int selFlags = 0 );
-
-    void SetFocusOnCanvas();
-
-    bool DoHideProperty( wxPGProperty* p, bool hide, int flags );
-
-private:
-
-    bool ButtonTriggerKeyTest( int action, wxKeyEvent& event );
-
-    DECLARE_EVENT_TABLE()
-#endif // #ifndef SWIG
-};
-
-// -----------------------------------------------------------------------
-//
-// Bunch of inlines that need to resolved after all classes have been defined.
-//
-
-#ifndef SWIG
-inline bool wxPropertyGridPageState::IsDisplayed() const
-{
-    return ( this == m_pPropGrid->GetState() );
-}
-
-inline unsigned int wxPropertyGridPageState::GetActualVirtualHeight() const
-{
-    return DoGetRoot()->GetChildrenHeight(GetGrid()->GetRowHeight());
-}
-#endif
-
-inline int wxPGProperty::GetDisplayedCommonValueCount() const
-{
-    if ( HasFlag(wxPG_PROP_USES_COMMON_VALUE) )
-    {
-        wxPropertyGrid* pg = GetGrid();
-        if ( pg )
-            return (int) pg->GetCommonValueCount();
-    }
-    return 0;
-}
-
-inline void wxPGProperty::SetEditor( const wxString& editorName )
-{
-    m_customEditor = wxPropertyGridInterface::GetEditorByName(editorName);
-}
-
-inline void wxPGProperty::SetName( const wxString& newName )
-{
-    GetGrid()->SetPropertyName(this, newName);
-}
-
-inline bool wxPGProperty::Hide( bool hide, int flags )
-{
-    return GetGrid()->HideProperty(this, hide, flags);
-}
-
-inline bool wxPGProperty::SetMaxLength( int maxLen )
-{
-    return GetGrid()->SetPropertyMaxLength(this,maxLen);
-}
-
-// -----------------------------------------------------------------------
-
-#define wxPG_BASE_EVT_PRE_ID     1775
-
-#ifndef SWIG
-
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_SELECTED, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_CHANGING, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_CHANGED, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_HIGHLIGHTED, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_RIGHT_CLICK, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_PAGE_CHANGED, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_ITEM_COLLAPSED, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_ITEM_EXPANDED, wxPropertyGridEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_DOUBLE_CLICK, wxPropertyGridEvent );
-
-#else
-    enum {
-        wxEVT_PG_SELECTED = wxPG_BASE_EVT_PRE_ID,
-        wxEVT_PG_CHANGING,
-        wxEVT_PG_CHANGED,
-        wxEVT_PG_HIGHLIGHTED,
-        wxEVT_PG_RIGHT_CLICK,
-        wxEVT_PG_PAGE_CHANGED,
-        wxEVT_PG_ITEM_COLLAPSED,
-        wxEVT_PG_ITEM_EXPANDED,
-        wxEVT_PG_DOUBLE_CLICK
-    };
-#endif
-
-
-#define wxPG_BASE_EVT_TYPE       wxEVT_PG_SELECTED
-#define wxPG_MAX_EVT_TYPE        (wxPG_BASE_EVT_TYPE+30)
-
-
-#ifndef SWIG
-typedef void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&);
-
-#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_CHANGING(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGING, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_DOUBLE_CLICK(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_DOUBLE_CLICK, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_ITEM_COLLAPSED(id, fn)        DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_ITEM_COLLAPSED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-#define EVT_PG_ITEM_EXPANDED(id, fn)         DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_ITEM_EXPANDED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
-
-#define wxPropertyGridEventHandler(fn) \
-    wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn )
-
-#endif
-
-
-/** @class wxPropertyGridEvent
-
-    A propertygrid event holds information about events associated with
-    wxPropertyGrid objects.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPropertyGridEvent : public wxCommandEvent
-{
-public:
-
-    /** Constructor. */
-    wxPropertyGridEvent(wxEventType commandType=0, int id=0);
-#ifndef SWIG
-    /** Copy constructor. */
-    wxPropertyGridEvent(const wxPropertyGridEvent& event);
-#endif
-    /** Destructor. */
-    ~wxPropertyGridEvent();
-
-    /** Copyer. */
-    virtual wxEvent* Clone() const;
-
-    wxPGProperty* GetMainParent() const
-    {
-        wxASSERT(m_property);
-        return m_property->GetMainParent();
-    }
-
-    /** Returns id of associated property. */
-    wxPGProperty* GetProperty() const
-    {
-        return m_property;
-    }
-
-    wxPGValidationInfo& GetValidationInfo()
-    {
-        wxASSERT(m_validationInfo);
-        return *m_validationInfo;
-    }
-
-    /** Returns true if you can veto the action that the event is signaling.
-    */
-    bool CanVeto() const { return m_canVeto; }
-
-    /**
-        Call this from your event handler to veto action that the event is
-        signaling.
-
-        You can only veto a shutdown if wxPropertyGridEvent::CanVeto returns
-        true.
-        @remarks
-        Currently only wxEVT_PG_CHANGING supports vetoing.
-    */
-    void Veto( bool veto = true ) { m_wasVetoed = veto; }
-
-    /** Returns value that is about to be set for wxEVT_PG_CHANGING.
-    */
-    const wxVariant& GetValue() const
-    {
-        wxASSERT_MSG( m_validationInfo,
-                      "Only call GetValue from a handler "
-                      "of event type that supports it" );
-        return m_validationInfo->GetValue();
-    }
-
-    /**
-        Set override validation failure behavior.
-
-        Only effective if Veto was also called, and only allowed if event type
-        is wxEVT_PG_CHANGING.
-    */
-    void SetValidationFailureBehavior( wxPGVFBFlags flags )
-    {
-        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
-        m_validationInfo->SetFailureBehavior( flags );
-    }
-
-    /** Sets custom failure message for this time only. Only applies if
-        wxPG_VFB_SHOW_MESSAGE is set in validation failure flags.
-    */
-    void SetValidationFailureMessage( const wxString& message )
-    {
-        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
-        m_validationInfo->SetFailureMessage( message );
-    }
-
-#ifndef SWIG
-    wxPGVFBFlags GetValidationFailureBehavior() const
-    {
-        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
-        return m_validationInfo->GetFailureBehavior();
-    }
-
-    void SetCanVeto( bool canVeto ) { m_canVeto = canVeto; }
-    bool WasVetoed() const { return m_wasVetoed; }
-
-    /** Changes the associated property. */
-    void SetProperty( wxPGProperty* p ) { m_property = p; }
-
-    void SetPropertyGrid( wxPropertyGrid* pg ) { m_pg = pg; }
-
-    void SetupValidationInfo()
-    {
-        wxASSERT(m_pg);
-        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
-        m_validationInfo = &m_pg->GetValidationInfo();
-    }
-
-private:
-    void Init();
-    DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
-
-    wxPGProperty*       m_property;
-    wxPropertyGrid*     m_pg;
-    wxPGValidationInfo* m_validationInfo;
-
-    bool                m_canVeto;
-    bool                m_wasVetoed;
-
-#endif
-};
-
-
-// -----------------------------------------------------------------------
-
-/** @class wxPropertyGridPopulator
-    @ingroup classes
-    Allows populating wxPropertyGrid from arbitrary text source.
-*/
-class WXDLLIMPEXP_PROPGRID wxPropertyGridPopulator
-{
-public:
-    /** Default constructor.
-    */
-    wxPropertyGridPopulator();
-
-    /** Destructor. */
-    virtual ~wxPropertyGridPopulator();
-
-    void SetState( wxPropertyGridPageState* state );
-
-    void SetGrid( wxPropertyGrid* pg );
-
-    /** Appends a new property under bottommost parent.
-        @param propClass
-        Property class as string.
-    */
-    wxPGProperty* Add( const wxString& propClass,
-                       const wxString& propLabel,
-                       const wxString& propName,
-                       const wxString* propValue,
-                       wxPGChoices* pChoices = NULL );
-
-    /**
-        Pushes property to the back of parent array (ie it becomes bottommost
-        parent), and starts scanning/adding children for it.
-
-        When finished, parent array is returned to the original state.
-    */
-    void AddChildren( wxPGProperty* property );
-
-    /** Adds attribute to the bottommost property.
-        @param type
-        Allowed values: "string", (same as string), "int", "bool". Empty string
-          mean autodetect.
-    */
-    bool AddAttribute( const wxString& name,
-                       const wxString& type,
-                       const wxString& value );
-
-    /** Called once in AddChildren.
-    */
-    virtual void DoScanForChildren() = 0;
-
-    /**
-        Returns id of parent property for which children can currently be
-        added.
-     */
-    wxPGProperty* GetCurParent() const
-    {
-        return (wxPGProperty*) m_propHierarchy[m_propHierarchy.size()-1];
-    }
-
-    wxPropertyGridPageState* GetState() { return m_state; }
-    const wxPropertyGridPageState* GetState() const { return m_state; }
-
-    /** Like wxString::ToLong, except allows N% in addition of N.
-    */
-    static bool ToLongPCT( const wxString& s, long* pval, long max );
-
-    /** Parses strings of format "choice1"[=value1] ... "choiceN"[=valueN] into
-        wxPGChoices. Registers parsed result using idString (if not empty).
-        Also, if choices with given id already registered, then don't parse but
-        return those choices instead.
-    */
-    wxPGChoices ParseChoices( const wxString& choicesString,
-                              const wxString& idString );
-
-    /** Implement in derived class to do custom process when an error occurs.
-        Default implementation uses wxLogError.
-    */
-    virtual void ProcessError( const wxString& msg );
-
-protected:
-
-    /** Used property grid. */
-    wxPropertyGrid*         m_pg;
-
-    /** Used property grid state. */
-    wxPropertyGridPageState*    m_state;
-
-    /** Tree-hierarchy of added properties (that can have children). */
-    wxArrayPGProperty       m_propHierarchy;
-
-    /** Hashmap for string-id to wxPGChoicesData mapping. */
-    wxPGHashMapS2P          m_dictIdChoices;
-};
-
-// -----------------------------------------------------------------------
-
-//
-// Undefine macros that are not needed outside propertygrid sources
-//
-#ifndef __wxPG_SOURCE_FILE__
-    #undef wxPG_FL_DESC_REFRESH_REQUIRED
-    #undef wxPG_FL_SCROLLBAR_DETECTED
-    #undef wxPG_FL_CREATEDSTATE
-    #undef wxPG_FL_NOSTATUSBARHELP
-    #undef wxPG_FL_SCROLLED
-    #undef wxPG_FL_FOCUS_INSIDE_CHILD
-    #undef wxPG_FL_FOCUS_INSIDE
-    #undef wxPG_FL_MOUSE_INSIDE_CHILD
-    #undef wxPG_FL_CUR_USES_CUSTOM_IMAGE
-    #undef wxPG_FL_PRIMARY_FILLS_ENTIRE
-    #undef wxPG_FL_VALUE_MODIFIED
-    #undef wxPG_FL_MOUSE_INSIDE
-    #undef wxPG_FL_FOCUSED
-    #undef wxPG_FL_MOUSE_CAPTURED
-    #undef wxPG_FL_INITIALIZED
-    #undef wxPG_FL_ACTIVATION_BY_CLICK
-    #undef wxPG_FL_DONT_CENTER_SPLITTER
-    #undef wxPG_SUPPORT_TOOLTIPS
-    #undef wxPG_DOUBLE_BUFFER
-    #undef wxPG_ICON_WIDTH
-    #undef wxPG_USE_RENDERER_NATIVE
-// Following are needed by the manager headers
-//    #undef const wxString&
-#endif
-
-// -----------------------------------------------------------------------
-
-#endif
-
-#endif // _WX_PROPGRID_PROPGRID_H_
-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/propgrid.h
+// Purpose:     wxPropertyGrid
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2004-09-25
+// RCS-ID:      $Id: propgrid.h 61014 2009-06-12 13:39:36Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_PROPGRID_H_
+#define _WX_PROPGRID_PROPGRID_H_
+
+#if wxUSE_PROPGRID
+
+#include "wx/dcclient.h"
+#include "wx/scrolwin.h"
+#include "wx/tooltip.h"
+#include "wx/datetime.h"
+
+#include "wx/propgrid/property.h"
+#include "wx/propgrid/propgridiface.h"
+
+
+#ifndef SWIG
+extern WXDLLIMPEXP_DATA_PROPGRID(const char) wxPropertyGridNameStr[];
+#endif
+
+class wxPGComboBox;
+
+// -----------------------------------------------------------------------
+// Global variables
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+// This is required for sharing common global variables.
+class WXDLLIMPEXP_PROPGRID wxPGGlobalVarsClass
+{
+public:
+
+    wxPGGlobalVarsClass();
+    ~wxPGGlobalVarsClass();
+
+    // Used by advprops, but here to make things easier.
+    wxString            m_pDefaultImageWildcard;
+
+    // Map of editor class instances (keys are name string).
+    wxPGHashMapS2P      m_mapEditorClasses;
+
+#if wxUSE_VALIDATORS
+    wxVector<wxValidator*>  m_arrValidators; // These wxValidators need to be freed
+#endif
+
+    wxPGHashMapS2P      m_dictPropertyClassInfo; // PropertyName -> ClassInfo
+
+    wxPGChoices*        m_fontFamilyChoices;
+
+    // Replace with your own to affect all properties using default renderer.
+    wxPGCellRenderer*   m_defaultRenderer;
+
+    wxPGChoices         m_boolChoices;
+
+    wxVariant           m_vEmptyString;
+    wxVariant           m_vZero;
+    wxVariant           m_vMinusOne;
+    wxVariant           m_vTrue;
+    wxVariant           m_vFalse;
+
+    // Cached constant strings
+    wxPGCachedString    m_strstring;
+    wxPGCachedString    m_strlong;
+    wxPGCachedString    m_strbool;
+    wxPGCachedString    m_strlist;
+
+    wxPGCachedString    m_strMin;
+    wxPGCachedString    m_strMax;
+    wxPGCachedString    m_strUnits;
+    wxPGCachedString    m_strInlineHelp;
+
+    // If true then some things are automatically translated
+    bool                m_autoGetTranslation;
+
+    // > 0 if errors cannot or should not be shown in statusbar etc.
+    int                 m_offline;
+
+    int                 m_extraStyle;  // global extra style
+
+    int                 m_warnings;
+
+    int HasExtraStyle( int style ) const { return (m_extraStyle & style); }
+};
+
+extern WXDLLIMPEXP_PROPGRID wxPGGlobalVarsClass* wxPGGlobalVars;
+
+#define wxPGVariant_EmptyString     (wxPGGlobalVars->m_vEmptyString)
+#define wxPGVariant_Zero            (wxPGGlobalVars->m_vZero)
+#define wxPGVariant_MinusOne        (wxPGGlobalVars->m_vMinusOne)
+#define wxPGVariant_True            (wxPGGlobalVars->m_vTrue)
+#define wxPGVariant_False           (wxPGGlobalVars->m_vFalse)
+
+#define wxPGVariant_Bool(A)     (A?wxPGVariant_True:wxPGVariant_False)
+
+// When wxPG is loaded dynamically after the application is already running
+// then the built-in module system won't pick this one up.  Add it manually.
+WXDLLIMPEXP_PROPGRID void wxPGInitResourceModule();
+
+#endif // !SWIG
+
+// -----------------------------------------------------------------------
+
+/** @section propgrid_window_styles wxPropertyGrid Window Styles
+
+    SetWindowStyleFlag method can be used to modify some of these at run-time.
+    @{
+*/
+enum wxPG_WINDOW_STYLES
+{
+
+/** This will cause Sort() automatically after an item is added.
+    When inserting a lot of items in this mode, it may make sense to
+    use Freeze() before operations and Thaw() afterwards to increase
+    performance.
+*/
+wxPG_AUTO_SORT                      = 0x00000010,
+
+/** Categories are not initially shown (even if added).
+    IMPORTANT NOTE: If you do not plan to use categories, then this
+    style will waste resources.
+    This flag can also be changed using wxPropertyGrid::EnableCategories method.
+*/
+wxPG_HIDE_CATEGORIES                = 0x00000020,
+
+/* This style combines non-categoric mode and automatic sorting.
+*/
+wxPG_ALPHABETIC_MODE                = (wxPG_HIDE_CATEGORIES|wxPG_AUTO_SORT),
+
+/** Modified values are shown in bold font. Changing this requires Refresh()
+    to show changes.
+*/
+wxPG_BOLD_MODIFIED                  = 0x00000040,
+
+/** When wxPropertyGrid is resized, splitter moves to the center. This
+    behavior stops once the user manually moves the splitter.
+*/
+wxPG_SPLITTER_AUTO_CENTER           = 0x00000080,
+
+/** Display tooltips for cell text that cannot be shown completely. If
+    wxUSE_TOOLTIPS is 0, then this doesn't have any effect.
+*/
+wxPG_TOOLTIPS                       = 0x00000100,
+
+/** Disables margin and hides all expand/collapse buttons that would appear
+    outside the margin (for sub-properties). Toggling this style automatically
+    expands all collapsed items.
+*/
+wxPG_HIDE_MARGIN                    = 0x00000200,
+
+/** This style prevents user from moving the splitter.
+*/
+wxPG_STATIC_SPLITTER                = 0x00000400,
+
+/** Combination of other styles that make it impossible for user to modify
+    the layout.
+*/
+wxPG_STATIC_LAYOUT                  = (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER),
+
+/** Disables wxTextCtrl based editors for properties which
+    can be edited in another way.
+
+    Equals calling wxPropertyGrid::LimitPropertyEditing for all added
+    properties.
+*/
+wxPG_LIMITED_EDITING                = 0x00000800,
+
+/** wxPropertyGridManager only: Show toolbar for mode and page selection. */
+wxPG_TOOLBAR                        = 0x00001000,
+
+/** wxPropertyGridManager only: Show adjustable text box showing description
+    or help text, if available, for currently selected property.
+*/
+wxPG_DESCRIPTION                    = 0x00002000
+
+};
+
+enum wxPG_EX_WINDOW_STYLES
+{
+
+/**
+    NOTE: wxPG_EX_xxx are extra window styles and must be set using
+    SetExtraStyle() member function.
+
+    Speeds up switching to wxPG_HIDE_CATEGORIES mode. Initially, if
+    wxPG_HIDE_CATEGORIES is not defined, the non-categorized data storage is
+    not activated, and switching the mode first time becomes somewhat slower.
+    wxPG_EX_INIT_NOCAT activates the non-categorized data storage right away.
+    IMPORTANT NOTE: If you do plan not switching to non-categoric mode, or if
+    you don't plan to use categories at all, then using this style will result
+    in waste of resources.
+
+*/
+wxPG_EX_INIT_NOCAT                  = 0x00001000,
+
+/** Extended window style that sets wxPropertyGridManager toolbar to not
+    use flat style.
+*/
+wxPG_EX_NO_FLAT_TOOLBAR             = 0x00002000,
+
+/** Shows alphabetic/categoric mode buttons from toolbar.
+*/
+wxPG_EX_MODE_BUTTONS                = 0x00008000,
+
+/** Show property help strings as tool tips instead as text on the status bar.
+    You can set the help strings using SetPropertyHelpString member function.
+*/
+wxPG_EX_HELP_AS_TOOLTIPS            = 0x00010000,
+
+/** Prevent TAB from focusing to wxButtons. This behavior was default
+    in version 1.2.0 and earlier.
+    NOTE! Tabbing to button doesn't work yet. Problem seems to be that on wxMSW
+      atleast the button doesn't properly propagate key events (yes, I'm using
+      wxWANTS_CHARS).
+*/
+//wxPG_EX_NO_TAB_TO_BUTTON            = 0x00020000,
+
+/** Allows relying on native double-buffering.
+*/
+wxPG_EX_NATIVE_DOUBLE_BUFFERING         = 0x00080000,
+
+/** Set this style to let user have ability to set values of properties to
+    unspecified state. Same as setting wxPG_PROP_AUTO_UNSPECIFIED for
+    all properties.
+*/
+wxPG_EX_AUTO_UNSPECIFIED_VALUES         = 0x00200000,
+
+/**
+    If this style is used, built-in attributes (such as wxPG_FLOAT_PRECISION
+    and wxPG_STRING_PASSWORD) are not stored into property's attribute storage
+    (thus they are not readable).
+
+    Note that this option is global, and applies to all wxPG property
+    containers.
+*/
+wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES    = 0x00400000,
+
+/** Hides page selection buttons from toolbar.
+*/
+wxPG_EX_HIDE_PAGE_BUTTONS               = 0x01000000
+
+};
+
+/** Combines various styles.
+*/
+#define wxPG_DEFAULT_STYLE          (0)
+
+/** Combines various styles.
+*/
+#define wxPGMAN_DEFAULT_STYLE       (0)
+
+/** @}
+*/
+
+// -----------------------------------------------------------------------
+
+//
+// Ids for sub-controls
+// NB: It should not matter what these are.
+#define wxPG_SUBID1                     2
+#define wxPG_SUBID2                     3
+#define wxPG_SUBID_TEMP1                4
+
+// -----------------------------------------------------------------------
+
+/** @class wxPGCommonValue
+
+    wxPropertyGrid stores information about common values in these
+    records.
+
+    NB: Common value feature is not complete, and thus not mentioned in
+        documentation.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGCommonValue
+{
+public:
+
+    wxPGCommonValue( const wxString& label, wxPGCellRenderer* renderer )
+    {
+        m_label = label;
+        m_renderer = renderer;
+        renderer->IncRef();
+    }
+    virtual ~wxPGCommonValue()
+    {
+        m_renderer->DecRef();
+    }
+
+    virtual wxString GetEditableText() const { return m_label; }
+    const wxString& GetLabel() const { return m_label; }
+    wxPGCellRenderer* GetRenderer() const { return m_renderer; }
+
+protected:
+    wxString            m_label;
+    wxPGCellRenderer*   m_renderer;
+};
+
+// -----------------------------------------------------------------------
+
+/** @section propgrid_vfbflags wxPropertyGrid Validation Failure Behavior Flags
+    @{
+*/
+
+enum wxPG_VALIDATION_FAILURE_BEHAVIOR_FLAGS
+{
+
+/** Prevents user from leaving property unless value is valid. If this
+    behavior flag is not used, then value change is instead cancelled.
+*/
+wxPG_VFB_STAY_IN_PROPERTY           = 0x01,
+
+/** Calls wxBell() on validation failure.
+*/
+wxPG_VFB_BEEP                       = 0x02,
+
+/** Cell with invalid value will be marked (with red colour).
+*/
+wxPG_VFB_MARK_CELL                  = 0x04,
+
+/** Display customizable text message explaining the situation.
+*/
+wxPG_VFB_SHOW_MESSAGE               = 0x08,
+
+/** Defaults. */
+wxPG_VFB_DEFAULT                    = wxPG_VFB_STAY_IN_PROPERTY|wxPG_VFB_BEEP,
+
+/** Only used internally. */
+wxPG_VFB_UNDEFINED                  = 0x80
+
+};
+
+/** @}
+*/
+
+typedef wxByte wxPGVFBFlags;
+
+/**
+    wxPGValidationInfo
+
+    Used to convey validation information to and from functions that
+    actually perform validation. Mostly used in custom property
+    classes.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGValidationInfo
+{
+    friend class wxPropertyGrid;
+public:
+    /**
+        @return Returns failure behavior which is a combination of
+               @ref propgrid_vfbflags.
+    */
+    wxPGVFBFlags GetFailureBehavior() const
+        { return m_failureBehavior; }
+
+    /**
+        Returns current failure message.
+    */
+    const wxString& GetFailureMessage() const
+        { return m_failureMessage; }
+
+    /**
+        Returns reference to pending value.
+    */
+    const wxVariant& GetValue() const
+    {
+        wxASSERT(m_pValue);
+        return *m_pValue;
+    }
+
+    /** Set validation failure behavior
+
+        @param failureBehavior
+            Mixture of @ref propgrid_vfbflags.
+    */
+    void SetFailureBehavior(wxPGVFBFlags failureBehavior)
+        { m_failureBehavior = failureBehavior; }
+
+    /**
+        Set current failure message.
+    */
+    void SetFailureMessage(const wxString& message)
+        { m_failureMessage = message; }
+
+private:
+    /** Value to be validated.
+    */
+    wxVariant*      m_pValue;
+
+    /** Message displayed on validation failure.
+    */
+    wxString        m_failureMessage;
+
+    /** Validation failure behavior. Use wxPG_VFB_XXX flags.
+    */
+    wxPGVFBFlags    m_failureBehavior;
+};
+
+// -----------------------------------------------------------------------
+
+/** @section propgrid_pgactions wxPropertyGrid Action Identifiers
+
+    These are used with wxPropertyGrid::AddActionTrigger() and
+    wxPropertyGrid::ClearActionTriggers().
+    @{
+*/
+
+enum wxPG_KEYBOARD_ACTIONS
+{
+    wxPG_ACTION_INVALID = 0,
+    wxPG_ACTION_NEXT_PROPERTY,
+    wxPG_ACTION_PREV_PROPERTY,
+    wxPG_ACTION_EXPAND_PROPERTY,
+    wxPG_ACTION_COLLAPSE_PROPERTY,
+    wxPG_ACTION_CANCEL_EDIT,
+    wxPG_ACTION_PRESS_BUTTON,  // Causes editor button (if any) to be pressed
+    wxPG_ACTION_MAX
+};
+
+/** @}
+*/
+
+// -----------------------------------------------------------------------
+
+
+// wxPropertyGrid::DoSelectProperty flags (selFlags)
+
+// Focuses to created editor
+#define wxPG_SEL_FOCUS      0x01
+// Forces deletion and recreation of editor
+#define wxPG_SEL_FORCE      0x02
+// For example, doesn't cause EnsureVisible
+#define wxPG_SEL_NONVISIBLE 0x04
+// Do not validate editor's value before selecting
+#define wxPG_SEL_NOVALIDATE 0x08
+// Property being deselected is about to be deleted
+#define wxPG_SEL_DELETING   0x10
+// Property's values was set to unspecified by the user
+#define wxPG_SEL_SETUNSPEC  0x20
+// Property's event handler changed the value
+#define wxPG_SEL_DIALOGVAL  0x40
+
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+// Internal flags
+#define wxPG_FL_INITIALIZED                 0x0001
+// Set when creating editor controls if it was clicked on.
+#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002
+#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004
+#define wxPG_FL_FOCUSED                     0x0008
+#define wxPG_FL_MOUSE_CAPTURED              0x0010
+#define wxPG_FL_MOUSE_INSIDE                0x0020
+#define wxPG_FL_VALUE_MODIFIED              0x0040
+// don't clear background of m_wndEditor
+#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080
+// currently active editor uses custom image
+#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100
+// cell colours override selection colours for selected cell
+#define wxPG_FL_CELL_OVERRIDES_SEL          0x0200
+#define wxPG_FL_SCROLLED                    0x0400
+// set when all added/inserted properties get hideable flag
+#define wxPG_FL_ADDING_HIDEABLES            0x0800
+// Disables showing help strings on statusbar.
+#define wxPG_FL_NOSTATUSBARHELP             0x1000
+// Marks that we created the state, so we have to destroy it too.
+#define wxPG_FL_CREATEDSTATE                0x2000
+// Set if scrollbar's existence was detected in last onresize.
+#define wxPG_FL_SCROLLBAR_DETECTED          0x4000
+// Set if wxPGMan requires redrawing of description text box.
+#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000
+// Set if contained in wxPropertyGridManager
+#define wxPG_FL_IN_MANAGER                  0x00020000
+// Set after wxPropertyGrid is shown in its initial good size
+#define wxPG_FL_GOOD_SIZE_SET               0x00040000
+// Set when in SelectProperty.
+#define wxPG_FL_IN_SELECT_PROPERTY          0x00100000
+// Set when help string is shown in status bar
+#define wxPG_FL_STRING_IN_STATUSBAR         0x00200000
+// Splitter position has been custom-set by the user
+#define wxPG_FL_SPLITTER_PRE_SET            0x00400000
+// Validation failed. Clear on modify event.
+#define wxPG_FL_VALIDATION_FAILED           0x00800000
+// Auto sort is enabled (for categorized mode)
+#define wxPG_FL_CATMODE_AUTO_SORT           0x01000000
+// Set after page has been inserted to manager
+#define wxPG_MAN_FL_PAGE_INSERTED           0x02000000
+// Active editor control is abnormally large
+#define wxPG_FL_ABNORMAL_EDITOR             0x04000000
+// Recursion guard for HandleCustomEditorEvent
+#define wxPG_FL_IN_HANDLECUSTOMEDITOREVENT  0x08000000
+#define wxPG_FL_VALUE_CHANGE_IN_EVENT       0x10000000
+// Editor control width should not change on resize
+#define wxPG_FL_FIXED_WIDTH_EDITOR          0x20000000
+// Width of panel can be different than width of grid
+#define wxPG_FL_HAS_VIRTUAL_WIDTH           0x40000000
+// Prevents RecalculateVirtualSize re-entrancy
+#define wxPG_FL_RECALCULATING_VIRTUAL_SIZE  0x80000000
+
+#endif // #ifndef SWIG
+
+#if !defined(__wxPG_SOURCE_FILE__) && !defined(SWIG)
+    // Reduce compile time, but still include in user app
+    #include "wx/propgrid/props.h"
+#endif
+
+// -----------------------------------------------------------------------
+
+/** @class wxPropertyGrid
+
+    wxPropertyGrid is a specialized grid for editing properties
+    such as strings, numbers, flagsets, fonts, and colours. wxPropertySheet
+    used to do the very same thing, but it hasn't been updated for a while
+    and it is currently deprecated.
+
+    Please note that most member functions are inherited and as such not
+    documented on this page. This means you will probably also want to read
+    wxPropertyGridInterface class reference.
+
+    See also @ref overview_propgrid.
+
+    @section propgrid_window_styles_ Window Styles
+
+    See @ref propgrid_window_styles.
+
+    @section propgrid_event_handling Event Handling
+
+    To process input from a propertygrid control, use these event handler
+    macros to direct input to member functions that take a wxPropertyGridEvent
+    argument.
+
+    @beginEventTable{wxPropertyGridEvent}
+    @event{EVT_PG_SELECTED (id, func)}
+        Respond to wxEVT_PG_SELECTED event, generated when property value
+        has been changed by user.
+    @event{EVT_PG_CHANGING(id, func)}
+        Respond to wxEVT_PG_CHANGING event, generated when property value
+        is about to be changed by user. Use wxPropertyGridEvent::GetValue()
+        to take a peek at the pending value, and wxPropertyGridEvent::Veto()
+        to prevent change from taking place, if necessary.
+    @event{EVT_PG_HIGHLIGHTED(id, func)}
+        Respond to wxEVT_PG_HIGHLIGHTED event, which occurs when mouse
+        moves over a property. Event's property is NULL if hovered area does
+        not belong to any property.
+    @event{EVT_PG_RIGHT_CLICK(id, func)}
+        Respond to wxEVT_PG_RIGHT_CLICK event, which occurs when property is
+        clicked on with right mouse button.
+    @event{EVT_PG_DOUBLE_CLICK(id, func)}
+        Respond to wxEVT_PG_DOUBLE_CLICK event, which occurs when property is
+        double-clicked onwith left mouse button.
+    @event{EVT_PG_ITEM_COLLAPSED(id, func)}
+        Respond to wxEVT_PG_ITEM_COLLAPSED event, generated when user collapses
+        a property or category..
+    @event{EVT_PG_ITEM_EXPANDED(id, func)}
+        Respond to wxEVT_PG_ITEM_EXPANDED event, generated when user expands
+        a property or category..
+    @endEventTable
+
+    @remarks
+
+    - Use Freeze() and Thaw() respectively to disable and enable drawing. This
+      will also delay sorting etc. miscellaneous calculations to the last
+      possible moment.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID
+    wxPropertyGrid : public wxScrolledWindow, public wxPropertyGridInterface
+{
+    friend class wxPropertyGridPageState;
+    friend class wxPropertyGridInterface;
+    friend class wxPropertyGridManager;
+    friend class wxPGCanvas;
+
+    DECLARE_DYNAMIC_CLASS(wxPropertyGrid)
+public:
+
+#ifndef SWIG
+    /**
+        Two step constructor.
+
+        Call Create when this constructor is called to build up the
+        wxPropertyGrid
+    */
+    wxPropertyGrid();
+#endif
+
+    /** The default constructor. The styles to be used are styles valid for
+        the wxWindow and wxScrolledWindow.
+
+        @see @link wndflags Additional Window Styles @endlink
+    */
+    wxPropertyGrid( wxWindow *parent, wxWindowID id = wxID_ANY,
+                    const wxPoint& pos = wxDefaultPosition,
+                    const wxSize& size = wxDefaultSize,
+                    long style = wxPG_DEFAULT_STYLE,
+                    const wxString& name = wxPropertyGridNameStr );
+
+    /** Destructor */
+    virtual ~wxPropertyGrid();
+
+    /** Adds given key combination to trigger given action.
+
+        @param action
+            Which action to trigger. See @link pgactions List of list of
+            wxPropertyGrid actions@endlink.
+    */
+    void AddActionTrigger( int action, int keycode, int modifiers = 0 );
+
+    /**
+        This static function enables or disables automatic use of
+        wxGetTranslation for following strings: wxEnumProperty list labels,
+        wxFlagsProperty sub-property labels.
+
+        Default is false.
+    */
+    static void AutoGetTranslation( bool enable );
+
+    /**
+        Changes value of a property, as if from an editor.
+
+        Use this instead of SetPropertyValue() if you need the value to run
+        through validation process, and also send the property change event.
+
+        @return
+        Returns true if value was successfully changed.
+    */
+    bool ChangePropertyValue( wxPGPropArg id, wxVariant newValue );
+
+    /**
+        Centers the splitter.
+
+        If argument is true, automatic splitter centering is enabled (only
+        applicapple if style wxPG_SPLITTER_AUTO_CENTER was defined).
+    */
+    void CenterSplitter( bool enable_auto_centering = false );
+
+    /** Deletes all properties.
+    */
+    virtual void Clear();
+
+    /** Clears action triggers for given action.
+        @param action
+            Which action to trigger. See @link pgactions List of list of
+            wxPropertyGrid actions@endlink.
+    */
+    void ClearActionTriggers( int action );
+
+    /** Forces updating the value of property from the editor control.
+
+        Note that wxEVT_PG_CHANGING and wxEVT_PG_CHANGED are dispatched using
+        ProcessEvent, meaning your event handlers will be called immediately.
+
+        @return
+        Returns true if anything was changed.
+    */
+    virtual bool CommitChangesFromEditor( wxUint32 flags = 0 );
+
+    /**
+        Two step creation.
+
+        Whenever the control is created without any parameters, use Create to
+        actually create it. Don't access the control's public methods before
+        this is called @see @link wndflags Additional Window Styles@endlink
+    */
+    bool Create( wxWindow *parent, wxWindowID id = wxID_ANY,
+                 const wxPoint& pos = wxDefaultPosition,
+                 const wxSize& size = wxDefaultSize,
+                 long style = wxPG_DEFAULT_STYLE,
+                 const wxString& name = wxPropertyGridNameStr );
+
+    /**
+        Call when editor widget's contents is modified.
+
+        For example, this is called when changes text in wxTextCtrl (used in
+        wxStringProperty and wxIntProperty).
+
+        @remarks
+        This function should only be called by custom properties.
+
+        @see wxPGProperty::OnEvent()
+    */
+    void EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
+
+    /** Reverse of EditorsValueWasModified().
+
+        @remarks
+        This function should only be called by custom properties.
+    */
+    void EditorsValueWasNotModified()
+    {
+        m_iFlags &= ~(wxPG_FL_VALUE_MODIFIED);
+    }
+
+    /**
+        Enables or disables (shows/hides) categories according to parameter
+        enable.
+     */
+    bool EnableCategories( bool enable );
+
+    /** Scrolls and/or expands items to ensure that the given item is visible.
+        Returns true if something was actually done.
+    */
+    bool EnsureVisible( wxPGPropArg id );
+
+    /**
+        Reduces column sizes to minimum possible that contents are still
+        visibly (naturally some margin space will be applied as well).
+
+        @return
+        Minimum size for the grid to still display everything.
+
+        @remarks
+        Does not work well with wxPG_SPLITTER_AUTO_CENTER window style.
+
+        This function only works properly if grid size prior to call was already
+        fairly large.
+
+        Note that you can also get calculated column widths by calling
+        GetState->GetColumnWidth() immediately after this function returns.
+    */
+    wxSize FitColumns()
+    {
+        wxSize sz = m_pState->DoFitColumns();
+        return sz;
+    }
+
+    /**
+        Returns wxWindow that the properties are painted on, and which should
+        be used as the parent for editor controls.
+    */
+    wxPanel* GetPanel() const
+    {
+        return m_canvas;
+    }
+
+    /** Returns current category caption background colour. */
+    wxColour GetCaptionBackgroundColour() const { return m_colCapBack; }
+
+    wxFont& GetCaptionFont() { return m_captionFont; }
+
+    const wxFont& GetCaptionFont() const { return m_captionFont; }
+
+    /** Returns current category caption text colour. */
+    wxColour GetCaptionForegroundColour() const { return m_colCapFore; }
+
+    /** Returns current cell background colour. */
+    wxColour GetCellBackgroundColour() const { return m_colPropBack; }
+
+    /** Returns current cell text colour when disabled. */
+    wxColour GetCellDisabledTextColour() const { return m_colDisPropFore; }
+
+    /** Returns current cell text colour. */
+    wxColour GetCellTextColour() const { return m_colPropFore; }
+
+    /**
+        Returns number of columns currently on grid.
+    */
+    unsigned int GetColumnCount() const
+    {
+        return (unsigned int) m_pState->m_colWidths.size();
+    }
+
+    /** Returns colour of empty space below properties. */
+    wxColour GetEmptySpaceColour() const { return m_colEmptySpace; }
+
+    /** Returns height of highest characters of used font. */
+    int GetFontHeight() const { return m_fontHeight; }
+
+    /** Returns pointer to itself. Dummy function that enables same kind
+        of code to use wxPropertyGrid and wxPropertyGridManager.
+    */
+    wxPropertyGrid* GetGrid() { return this; }
+
+    /** Returns rectangle of custom paint image.
+    */
+    wxRect GetImageRect( wxPGProperty* p, int item ) const;
+
+    /** Returns size of the custom paint image in front of property.
+        If no argument is given, returns preferred size.
+    */
+    wxSize GetImageSize( wxPGProperty* p = NULL, int item = -1 ) const;
+
+    //@{
+    /** Returns last item which could be iterated using given flags.
+        @param flags
+        See @ref propgrid_iterator_flags.
+    */
+    wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT )
+    {
+        return m_pState->GetLastItem(flags);
+    }
+
+    const wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT ) const
+    {
+        return m_pState->GetLastItem(flags);
+    }
+    //@}
+
+    /** Returns colour of lines between cells. */
+    wxColour GetLineColour() const { return m_colLine; }
+
+    /** Returns background colour of margin. */
+    wxColour GetMarginColour() const { return m_colMargin; }
+
+    /**
+        Returns most up-to-date value of selected property. This will return
+        value different from GetSelectedProperty()->GetValue() only when text
+        editor is activate and string edited by user represents valid,
+        uncommitted property value.
+    */
+    wxVariant GetUncommittedPropertyValue();
+
+    /** Returns "root property". It does not have name, etc. and it is not
+        visible. It is only useful for accessing its children.
+    */
+    wxPGProperty* GetRoot() const { return m_pState->m_properties; }
+
+    /** Returns height of a single grid row (in pixels). */
+    int GetRowHeight() const { return m_lineHeight; }
+
+    /** Returns currently selected property. */
+    wxPGProperty* GetSelectedProperty() const { return GetSelection(); }
+
+    /** Returns currently selected property. */
+    wxPGProperty* GetSelection() const
+    {
+        return m_selected;
+    }
+
+    /** Returns current selection background colour. */
+    wxColour GetSelectionBackgroundColour() const { return m_colSelBack; }
+
+    /** Returns current selection text colour. */
+    wxColour GetSelectionForegroundColour() const { return m_colSelFore; }
+
+    /** Returns current splitter x position. */
+    int GetSplitterPosition() const
+        { return m_pState->DoGetSplitterPosition(0); }
+
+    /** Returns wxTextCtrl active in currently selected property, if any. Takes
+        into account wxOwnerDrawnComboBox.
+    */
+    wxTextCtrl* GetEditorTextCtrl() const;
+
+    wxPGValidationInfo& GetValidationInfo()
+    {
+        return m_validationInfo;
+    }
+
+    /** Returns current vertical spacing. */
+    int GetVerticalSpacing() const { return (int)m_vspacing; }
+
+    /**
+        Returns @true if a property editor control has focus.
+    */
+    bool IsEditorFocused() const;
+
+    /** Returns true if editor's value was marked modified.
+    */
+    bool IsEditorsValueModified() const
+        { return  ( m_iFlags & wxPG_FL_VALUE_MODIFIED ) ? true : false; }
+
+    /**
+        Returns information about arbitrary position in the grid.
+
+        @param pt
+            Coordinates in the virtual grid space. You may need to use
+            wxScrolledWindow::CalcScrolledPosition() for translating
+            wxPropertyGrid client coordinates into something this member
+            function can use.
+    */
+    wxPropertyGridHitTestResult HitTest( const wxPoint& pt ) const;
+
+    /** Returns true if any property has been modified by the user. */
+    bool IsAnyModified() const { return (m_pState->m_anyModified>0); }
+
+    /**
+        Returns true if updating is frozen (ie Freeze() called but not yet
+        Thaw() ).
+     */
+    bool IsFrozen() const { return (m_frozen>0)?true:false; }
+
+    /** Redraws given property.
+    */
+    virtual void RefreshProperty( wxPGProperty* p );
+
+#ifndef SWIG
+    /** Registers a new editor class.
+        @return
+        Pointer to the editor class instance that should be used.
+    */
+    static wxPGEditor* RegisterEditorClass( wxPGEditor* editor,
+                                            bool noDefCheck = false )
+    {
+        return DoRegisterEditorClass(editor, wxEmptyString, noDefCheck);
+    }
+
+    static wxPGEditor* DoRegisterEditorClass( wxPGEditor* editorClass,
+                                              const wxString& editorName,
+                                              bool noDefCheck = false );
+#endif
+
+    /** Resets all colours to the original system values.
+    */
+    void ResetColours();
+
+    /**
+        Selects a property.
+        Editor widget is automatically created, but not focused unless focus is
+        true. This will generate wxEVT_PG_SELECT event.
+        @param id
+            Property to select.
+        @return
+            True if selection finished successfully. Usually only fails if
+            current value in editor is not valid.
+        @see wxPropertyGrid::Unselect
+    */
+    bool SelectProperty( wxPGPropArg id, bool focus = false )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return DoSelectProperty(p,focus?wxPG_SEL_FOCUS:0);
+    }
+
+    /** Sets category caption background colour. */
+    void SetCaptionBackgroundColour(const wxColour& col);
+
+    /** Sets category caption text colour. */
+    void SetCaptionTextColour(const wxColour& col);
+
+    /** Sets default cell background colour - applies to property cells.
+        Note that appearance of editor widgets may not be affected.
+    */
+    void SetCellBackgroundColour(const wxColour& col);
+
+    /** Sets cell text colour for disabled properties.
+    */
+    void SetCellDisabledTextColour(const wxColour& col);
+
+    /** Sets default cell text colour - applies to property name and value text.
+        Note that appearance of editor widgets may not be affected.
+    */
+    void SetCellTextColour(const wxColour& col);
+
+    /** Set number of columns (2 or more).
+    */
+    void SetColumnCount( int colCount )
+    {
+        m_pState->SetColumnCount(colCount);
+        Refresh();
+    }
+
+    /**
+        Sets the 'current' category - Append will add non-category properties
+        under it.
+    */
+    void SetCurrentCategory( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        wxPropertyCategory* pc = wxDynamicCast(p, wxPropertyCategory);
+        wxASSERT(pc);
+        m_pState->m_currentCategory = pc;
+    }
+
+    /** Sets colour of empty space below properties. */
+    void SetEmptySpaceColour(const wxColour& col);
+
+    /** Sets colour of lines between cells. */
+    void SetLineColour(const wxColour& col);
+
+    /** Sets background colour of margin. */
+    void SetMarginColour(const wxColour& col);
+
+    /**
+        Sets selection background colour - applies to selected property name
+        background.
+    */
+    void SetSelectionBackgroundColour(const wxColour& col);
+
+    /**
+        Sets selection foreground colour - applies to selected property name
+        text.
+     */
+    void SetSelectionTextColour(const wxColour& col);
+
+    /** Sets x coordinate of the splitter.
+        @remarks
+        Splitter position cannot exceed grid size, and therefore setting it
+        during form creation may fail as initial grid size is often smaller
+        than desired splitter position, especially when sizers are being used.
+    */
+    void SetSplitterPosition( int newxpos, int col = 0 )
+    {
+        DoSetSplitterPosition_(newxpos, true, col);
+        m_iFlags |= wxPG_FL_SPLITTER_PRE_SET;
+    }
+
+    /**
+        Sets the property sorting function.
+
+        @param sortFunction
+            The sorting function to be used. It should return a value greater
+            than 0 if position of p1 is after p2. So, for instance, when
+            comparing property names, you can use following implementation:
+
+            @code
+                int MyPropertySortFunction(wxPropertyGrid* propGrid,
+                                           wxPGProperty* p1,
+                                           wxPGProperty* p2)
+                {
+                    return p1->GetBaseName().compare( p2->GetBaseName() );
+                }
+            @endcode
+
+        @remarks
+            Default property sort function sorts properties by their labels
+            (case-insensitively).
+
+        @see GetSortFunction, wxPropertyGridInterface::Sort,
+             wxPropertyGridInterface::SortChildren
+    */
+    void SetSortFunction( wxPGSortCallback sortFunction )
+    {
+        m_sortFunction = sortFunction;
+    }
+
+    /**
+        Returns the property sort function (default is @NULL).
+
+        @see SetSortFunction
+    */
+    wxPGSortCallback GetSortFunction() const
+    {
+        return m_sortFunction;
+    }
+
+    /** Set virtual width for this particular page. Width -1 indicates that the
+        virtual width should be disabled. */
+    void SetVirtualWidth( int width );
+
+    /**
+        Moves splitter as left as possible, while still allowing all
+        labels to be shown in full.
+
+        @param privateChildrenToo
+            If @false, will still allow private children to be cropped.
+    */
+    void SetSplitterLeft( bool privateChildrenToo = false )
+    {
+        m_pState->SetSplitterLeft(privateChildrenToo);
+    }
+
+    /** Sets vertical spacing. Can be 1, 2, or 3 - a value relative to font
+        height. Value of 2 should be default on most platforms.
+    */
+    void SetVerticalSpacing( int vspacing )
+    {
+        m_vspacing = (unsigned char)vspacing;
+        CalculateFontAndBitmapStuff( vspacing );
+        if ( !m_pState->m_itemsAdded ) Refresh();
+    }
+
+    /** Shows an brief error message that is related to a property. */
+    void ShowPropertyError( wxPGPropArg id, const wxString& msg )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        DoShowPropertyError(p, msg);
+    }
+
+    /////////////////////////////////////////////////////////////////
+    //
+    // Following methods do not need to be (currently) documented
+    //
+    /////////////////////////////////////////////////////////////////
+
+    bool HasVirtualWidth() const
+        { return (m_iFlags & wxPG_FL_HAS_VIRTUAL_WIDTH) ? true : false; }
+
+    const wxPGCommonValue* GetCommonValue( unsigned int i ) const
+    {
+        return (wxPGCommonValue*) m_commonValues[i];
+    }
+
+    /** Returns number of common values.
+    */
+    unsigned int GetCommonValueCount() const
+    {
+        return (unsigned int) m_commonValues.size();
+    }
+
+    /** Returns label of given common value.
+    */
+    wxString GetCommonValueLabel( unsigned int i ) const
+    {
+        wxASSERT( GetCommonValue(i) );
+        return GetCommonValue(i)->GetLabel();
+    }
+
+    /**
+        Returns index of common value that will truly change value to
+        unspecified.
+    */
+    int GetUnspecifiedCommonValue() const { return m_cvUnspecified; }
+
+    /** Set index of common value that will truly change value to unspecified.
+        Using -1 will set none to have such effect.
+        Default is 0.
+    */
+    void SetUnspecifiedCommonValue( int index ) { m_cvUnspecified = index; }
+
+    /**
+        Shortcut for creating dialog-caller button. Used, for example, by
+        wxFontProperty.
+        @remarks
+        This should only be called by properties.
+    */
+    wxWindow* GenerateEditorButton( const wxPoint& pos, const wxSize& sz );
+
+    /** Fixes position of wxTextCtrl-like control (wxSpinCtrl usually
+        fits as one). Call after control has been created (but before
+        shown).
+    */
+    void FixPosForTextCtrl( wxWindow* ctrl,
+                            const wxPoint& offset = wxPoint(0, 0) );
+
+    /** Shortcut for creating text editor widget.
+        @param pos
+            Same as pos given for CreateEditor.
+        @param sz
+            Same as sz given for CreateEditor.
+        @param value
+            Initial text for wxTextCtrl.
+        @param secondary
+            If right-side control, such as button, also created, then create it
+            first and pass it as this parameter.
+        @param extraStyle
+            Extra style flags to pass for wxTextCtrl.
+        @remarks
+        Note that this should generally be called only by new classes derived
+        from wxPGProperty.
+    */
+    wxWindow* GenerateEditorTextCtrl( const wxPoint& pos,
+                                      const wxSize& sz,
+                                      const wxString& value,
+                                      wxWindow* secondary,
+                                      int extraStyle = 0,
+                                      int maxLen = 0 );
+
+    /* Generates both textctrl and button.
+    */
+    wxWindow* GenerateEditorTextCtrlAndButton( const wxPoint& pos,
+        const wxSize& sz, wxWindow** psecondary, int limited_editing,
+        wxPGProperty* property );
+
+    /** Generates position for a widget editor dialog box.
+        @param p
+        Property for which dialog is positioned.
+        @param sz
+        Known or over-approximated size of the dialog.
+        @return
+        Position for dialog.
+    */
+    wxPoint GetGoodEditorDialogPosition( wxPGProperty* p,
+                                         const wxSize& sz );
+
+    // Converts escape sequences in src_str to newlines,
+    // tabs, etc. and copies result to dst_str.
+    static wxString& ExpandEscapeSequences( wxString& dst_str,
+                                            wxString& src_str );
+
+    // Converts newlines, tabs, etc. in src_str to escape
+    // sequences, and copies result to dst_str.
+    static wxString& CreateEscapeSequences( wxString& dst_str,
+                                            wxString& src_str );
+
+    /**
+        Returns rectangle that fully contains properties between and including
+        p1 and p2.
+    */
+    wxRect GetPropertyRect( const wxPGProperty* p1,
+                            const wxPGProperty* p2 ) const;
+
+    /** Returns pointer to current active primary editor control (NULL if none).
+    */
+    wxWindow* GetEditorControl() const;
+
+    wxWindow* GetPrimaryEditor() const
+    {
+        return GetEditorControl();
+    }
+
+    /**
+        Returns pointer to current active secondary editor control (NULL if
+        none).
+    */
+    wxWindow* GetEditorControlSecondary() const
+    {
+        return m_wndEditor2;
+    }
+
+    /**
+        Refreshes any active editor control.
+    */
+    void RefreshEditor();
+
+    // Events from editor controls are forward to this function
+    void HandleCustomEditorEvent( wxEvent &event );
+
+#ifndef SWIG
+
+    /**
+        Generates contents for string dst based on the contents of
+        wxArrayString src.
+
+        Format will be "(preDelim)str1(postDelim) (preDelim)str2(postDelim) and
+        so on. Set flags to 1 inorder to convert backslashes to double-back-
+        slashes and "(preDelims)"'s to "(preDelims)".
+    */
+    static void ArrayStringToString( wxString& dst, const wxArrayString& src,
+                                     wxChar preDelim, wxChar postDelim,
+                                     int flags );
+
+    // Mostly useful for page switching.
+    void SwitchState( wxPropertyGridPageState* pNewState );
+
+    long GetInternalFlags() const { return m_iFlags; }
+    bool HasInternalFlag( long flag ) const
+        { return (m_iFlags & flag) ? true : false; }
+    void SetInternalFlag( long flag ) { m_iFlags |= flag; }
+    void ClearInternalFlag( long flag ) { m_iFlags &= ~(flag); }
+    void IncFrozen() { m_frozen++; }
+    void DecFrozen() { m_frozen--; }
+
+    void OnComboItemPaint( const wxPGComboBox* pCb,
+                           int item,
+                           wxDC* pDc,
+                           wxRect& rect,
+                           int flags );
+
+    /** Standardized double-to-string conversion.
+    */
+    static void DoubleToString( wxString& target,
+                                double value,
+                                int precision,
+                                bool removeZeroes,
+                                wxString* precTemplate );
+
+    /**
+        Call this from wxPGProperty::OnEvent() to cause property value to be
+        changed after the function returns (with true as return value).
+        ValueChangeInEvent() must be used if you wish the application to be
+        able to use wxEVT_PG_CHANGING to potentially veto the given value.
+    */
+    void ValueChangeInEvent( wxVariant variant )
+    {
+        m_changeInEventValue = variant;
+        m_iFlags |= wxPG_FL_VALUE_CHANGE_IN_EVENT;
+    }
+
+    /** Returns true if given event is from first of an array of buttons
+        (as can be in case when wxPGMultiButton is used).
+    */
+    bool IsMainButtonEvent( const wxEvent& event )
+    {
+        return (event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED)
+                    && (m_wndSecId == event.GetId());
+    }
+
+    /** Pending value is expected to be passed in PerformValidation().
+    */
+    virtual bool DoPropertyChanged( wxPGProperty* p,
+                                    unsigned int selFlags = 0 );
+
+    /** Called when validation for given property fails.
+        @param invalidValue
+            Value which failed in validation.
+        @return
+            Return true if user is allowed to change to another property even
+            if current has invalid value.
+        @remarks
+        To add your own validation failure behavior, override
+        wxPropertyGrid::DoOnValidationFailure().
+    */
+    bool OnValidationFailure( wxPGProperty* property,
+                              wxVariant& invalidValue );
+
+    /** Called to indicate property and editor has valid value now.
+    */
+    void OnValidationFailureReset( wxPGProperty* property )
+    {
+        if ( property && property->HasFlag(wxPG_PROP_INVALID_VALUE) )
+        {
+            DoOnValidationFailureReset(property);
+            property->ClearFlag(wxPG_PROP_INVALID_VALUE);
+        }
+        m_validationInfo.m_failureMessage.clear();
+    }
+
+    /** Override in derived class to display error messages in custom manner
+        (these message usually only result from validation failure).
+    */
+    virtual void DoShowPropertyError( wxPGProperty* property,
+                                      const wxString& msg );
+
+    /** Override to customize property validation failure behavior.
+        @param invalidValue
+            Value which failed in validation.
+        @return
+            Return true if user is allowed to change to another property even
+            if current has invalid value.
+    */
+    virtual bool DoOnValidationFailure( wxPGProperty* property,
+                                        wxVariant& invalidValue );
+
+    /** Override to customize resetting of property validation failure status.
+        @remarks
+        Property is guaranteed to have flag wxPG_PROP_INVALID_VALUE set.
+    */
+    virtual void DoOnValidationFailureReset( wxPGProperty* property );
+
+    int GetSpacingY() const { return m_spacingy; }
+
+    /**
+        Must be called in wxPGEditor::CreateControls() if primary editor window
+        is wxTextCtrl, just before textctrl is created.
+        @param text
+            Initial text value of created wxTextCtrl.
+    */
+    void SetupTextCtrlValue( const wxString text ) { m_prevTcValue = text; }
+
+    /**
+        Unfocuses or closes editor if one was open, but does not deselect
+        property.
+    */
+    bool UnfocusEditor();
+
+    virtual void SetWindowStyleFlag( long style );
+
+    void DrawItems( const wxPGProperty* p1, const wxPGProperty* p2 );
+
+    void DrawItem( wxPGProperty* p )
+    {
+        DrawItems(p,p);
+    }
+
+    virtual void DrawItemAndChildren( wxPGProperty* p );
+
+    /**
+        Draws item, children, and consequtive parents as long as category is
+        not met.
+     */
+    void DrawItemAndValueRelated( wxPGProperty* p );
+
+protected:
+
+    /**
+        wxPropertyGridPageState used by the grid is created here.
+
+        If grid is used in wxPropertyGridManager, there is no point overriding
+        this - instead, set custom wxPropertyGridPage classes.
+    */
+    virtual wxPropertyGridPageState* CreateState() const;
+
+    enum PerformValidationFlags
+    {
+        SendEvtChanging         = 0x0001,
+        IsStandaloneValidation  = 0x0002   // Not called in response to event
+    };
+
+    /**
+        Runs all validation functionality (includes sending wxEVT_PG_CHANGING).
+        Returns true if all tests passed. Implement in derived class to
+        add additional validation behavior.
+    */
+    virtual bool PerformValidation( wxPGProperty* p,
+                                    wxVariant& pendingValue,
+                                    int flags = SendEvtChanging );
+
+public:
+
+    // Control font changer helper.
+    void SetCurControlBoldFont();
+
+    wxPGCell& GetPropertyDefaultCell()
+    {
+        return m_propertyDefaultCell;
+    }
+
+    wxPGCell& GetCategoryDefaultCell()
+    {
+        return m_categoryDefaultCell;
+    }
+
+    //
+    // Public methods for semi-public use
+    // (not protected for optimization)
+    //
+    bool DoSelectProperty( wxPGProperty* p, unsigned int flags = 0 );
+
+    // Overridden functions.
+    virtual bool Destroy();
+    // Returns property at given y coordinate (relative to grid's top left).
+    wxPGProperty* GetItemAtY( int y ) const { return DoGetItemAtY(y); }
+
+    virtual void Refresh( bool eraseBackground = true,
+                          const wxRect *rect = (const wxRect *) NULL );
+    virtual bool SetFont( const wxFont& font );
+#if wxPG_SUPPORT_TOOLTIPS
+    void SetToolTip( const wxString& tipString );
+#endif
+    virtual void Freeze();
+    virtual void SetExtraStyle( long exStyle );
+    virtual void Thaw();
+
+
+protected:
+    virtual wxSize DoGetBestSize() const;
+
+#ifndef wxPG_ICON_WIDTH
+    wxBitmap            *m_expandbmp, *m_collbmp;
+#endif
+
+    wxCursor            *m_cursorSizeWE;
+
+    /** wxWindow pointers to editor control(s). */
+    wxWindow            *m_wndEditor;
+    wxWindow            *m_wndEditor2;
+
+    /** wxPGCanvas instance. */
+    wxPanel             *m_canvas;
+
+#if wxPG_DOUBLE_BUFFER
+    wxBitmap            *m_doubleBuffer;
+#endif
+
+    /** Local time ms when control was created. */
+    wxLongLong          m_timeCreated;
+
+    /** wxPGProperty::OnEvent can change value by setting this. */
+    wxVariant           m_changeInEventValue;
+
+    /** Id of m_wndEditor2, or its first child, if any. */
+    int                 m_wndSecId;
+
+    /** Extra Y spacing between the items. */
+    int                 m_spacingy;
+
+    /** Control client area width; updated on resize. */
+    int                 m_width;
+
+    /** Control client area height; updated on resize. */
+    int                 m_height;
+
+    /** Current non-client width (needed when auto-centering). */
+    int                 m_ncWidth;
+
+    /** Non-client width (auto-centering helper). */
+    //int                 m_fWidth;
+
+    /** Previously recorded scroll start position. */
+    int                 m_prevVY;
+
+    /**
+        The gutter spacing in front and back of the image.
+        This determines the amount of spacing in front of each item
+     */
+    int                 m_gutterWidth;
+
+    /** Includes separator line. */
+    int                 m_lineHeight;
+
+    /** Gutter*2 + image width. */
+    int                 m_marginWidth;
+
+    // y spacing for expand/collapse button.
+    int                 m_buttonSpacingY;
+
+    /** Extra margin for expanded sub-group items. */
+    int                 m_subgroup_extramargin;
+
+    /**
+        The image width of the [+] icon.
+
+        This is also calculated in the gutter
+     */
+    int                 m_iconWidth;
+
+#ifndef wxPG_ICON_WIDTH
+
+    /**
+        The image height of the [+] icon.
+
+        This is calculated as minimal size and to align
+     */
+    int                 m_iconHeight;
+#endif
+
+    /** Current cursor id. */
+    int                 m_curcursor;
+
+    /**
+        This captionFont is made equal to the font of the wxScrolledWindow.
+
+        As extra the bold face is set on it when this is wanted by the user
+        (see flags)
+     */
+    wxFont              m_captionFont;
+
+    int                 m_fontHeight;  // Height of the font.
+
+    /** m_splitterx when drag began. */
+    int                 m_startingSplitterX;
+
+    /**
+        Index to splitter currently being dragged (0=one after the first
+        column).
+     */
+    int                 m_draggedSplitter;
+
+    /** Changed property, calculated in PerformValidation(). */
+    wxPGProperty*       m_chgInfo_changedProperty;
+
+    /**
+        Lowest property for which editing happened, but which does not have
+        aggregate parent
+     */
+    wxPGProperty*       m_chgInfo_baseChangedProperty;
+
+    /** Changed property value, calculated in PerformValidation(). */
+    wxVariant           m_chgInfo_pendingValue;
+
+    /** Passed to SetValue. */
+    wxVariant           m_chgInfo_valueList;
+
+    /** Validation information. */
+    wxPGValidationInfo  m_validationInfo;
+
+    /** Actions and keys that trigger them. */
+    wxPGHashMapI2I      m_actionTriggers;
+
+    //
+    // Temporary values
+    //
+
+    /** Bits are used to indicate which colours are customized. */
+    unsigned short      m_coloursCustomized;
+
+    /** x - m_splitterx. */
+    signed char                 m_dragOffset;
+
+    /** 0 = not dragging, 1 = drag just started, 2 = drag in progress */
+    unsigned char       m_dragStatus;
+
+    /** 0 = margin, 1 = label, 2 = value. */
+    unsigned char       m_mouseSide;
+
+    /** True when editor control is focused. */
+    unsigned char       m_editorFocused;
+
+    /** 1 if m_latsCaption is also the bottommost caption. */
+    //unsigned char       m_lastCaptionBottomnest;
+
+    /** Set to 1 when graphics frozen. */
+    unsigned char       m_frozen;
+
+    unsigned char       m_vspacing;
+
+    // Used to track when Alt/Ctrl+Key was consumed.
+    unsigned char       m_keyComboConsumed;
+
+    /** 1 if in DoPropertyChanged() */
+    unsigned char       m_inDoPropertyChanged;
+
+    /** 1 if in CommitChangesFromEditor() */
+    unsigned char       m_inCommitChangesFromEditor;
+
+    /** 1 if in DoSelectProperty() */
+    unsigned char       m_inDoSelectProperty;
+
+    wxPGVFBFlags        m_permanentValidationFailureBehavior;  // Set by app
+
+    /** Internal flags - see wxPG_FL_XXX constants. */
+    wxUint32            m_iFlags;
+
+    /** When drawing next time, clear this many item slots at the end. */
+    int                 m_clearThisMany;
+
+    /** Pointer to selected property. Note that this is duplicated in
+        m_state for better transiency between pages so that the selected
+        item can be retained.
+    */
+    wxPGProperty*       m_selected;
+
+    // pointer to property that has mouse hovering
+    wxPGProperty*       m_propHover;
+
+    // EventObject for wxPropertyGridEvents
+    wxWindow*           m_eventObject;
+
+    // What (global) window is currently focused (needed to resolve event
+    // handling mess).
+    wxWindow*           m_curFocused;
+
+    // wxPGTLWHandler
+    wxEvtHandler*       m_tlwHandler;
+
+    // Top level parent
+    wxWindow*           m_tlp;
+
+    // Sort function
+    wxPGSortCallback    m_sortFunction;
+
+    // y coordinate of property that mouse hovering
+    int                 m_propHoverY;
+    // Which column's editor is selected (usually 1)?
+    int                 m_selColumn;
+
+    // x relative to splitter (needed for resize).
+    int                 m_ctrlXAdjust;
+
+    // lines between cells
+    wxColour            m_colLine;
+    // property labels and values are written in this colour
+    wxColour            m_colPropFore;
+    // or with this colour when disabled
+    wxColour            m_colDisPropFore;
+    // background for m_colPropFore
+    wxColour            m_colPropBack;
+    // text color for captions
+    wxColour            m_colCapFore;
+    // background color for captions
+    wxColour            m_colCapBack;
+    // foreground for selected property
+    wxColour            m_colSelFore;
+    // background for selected property (actually use background color when
+    // control out-of-focus)
+    wxColour            m_colSelBack;
+    // background colour for margin
+    wxColour            m_colMargin;
+    // background colour for empty space below the grid
+    wxColour            m_colEmptySpace;
+
+    // Default property colours
+    wxPGCell            m_propertyDefaultCell;
+
+    // Default property category
+    wxPGCell            m_categoryDefaultCell;
+
+    // Backup of selected property's cells
+    wxVector<wxPGCell>  m_propCellsBackup;
+
+    // NB: These *cannot* be moved to globals.
+
+    // labels when properties use common values
+    wxVector<wxPGCommonValue*>  m_commonValues;
+
+    // Which cv selection really sets value to unspecified?
+    int                 m_cvUnspecified;
+
+    // Used to skip excess text editor events
+    wxString            m_prevTcValue;
+
+protected:
+
+    // Sets some members to defaults (called constructors).
+    void Init1();
+
+    // Initializes some members (called by Create and complex constructor).
+    void Init2();
+
+    void OnPaint(wxPaintEvent &event );
+
+    // main event receivers
+    void OnMouseMove( wxMouseEvent &event );
+    void OnMouseMoveBottom( wxMouseEvent &event );
+    void OnMouseClick( wxMouseEvent &event );
+    void OnMouseRightClick( wxMouseEvent &event );
+    void OnMouseDoubleClick( wxMouseEvent &event );
+    void OnMouseUp( wxMouseEvent &event );
+    void OnKey( wxKeyEvent &event );
+    void OnResize( wxSizeEvent &event );
+
+    // event handlers
+    bool HandleMouseMove( int x, unsigned int y, wxMouseEvent &event );
+    bool HandleMouseClick( int x, unsigned int y, wxMouseEvent &event );
+    bool HandleMouseRightClick( int x, unsigned int y, wxMouseEvent &event );
+    bool HandleMouseDoubleClick( int x, unsigned int y, wxMouseEvent &event );
+    bool HandleMouseUp( int x, unsigned int y, wxMouseEvent &event );
+    void HandleKeyEvent( wxKeyEvent &event, bool fromChild );
+
+    void OnMouseEntry( wxMouseEvent &event );
+
+    void OnIdle( wxIdleEvent &event );
+    void OnFocusEvent( wxFocusEvent &event );
+    void OnChildFocusEvent( wxChildFocusEvent& event );
+
+    bool OnMouseCommon( wxMouseEvent &event, int* px, int *py );
+    bool OnMouseChildCommon( wxMouseEvent &event, int* px, int *py );
+
+    // sub-control event handlers
+    void OnMouseClickChild( wxMouseEvent &event );
+    void OnMouseRightClickChild( wxMouseEvent &event );
+    void OnMouseMoveChild( wxMouseEvent &event );
+    void OnMouseUpChild( wxMouseEvent &event );
+    void OnChildKeyDown( wxKeyEvent &event );
+
+    void OnCaptureChange( wxMouseCaptureChangedEvent &event );
+
+    void OnScrollEvent( wxScrollWinEvent &event );
+
+    void OnSysColourChanged( wxSysColourChangedEvent &event );
+
+protected:
+
+    /**
+        Adjust the centering of the bitmap icons (collapse / expand) when the
+        caption font changes.
+
+        They need to be centered in the middle of the font, so a bit of deltaY
+        adjustment is needed. On entry, m_captionFont must be set to window
+        font. It will be modified properly.
+      */
+    void CalculateFontAndBitmapStuff( int vspacing );
+
+    wxRect GetEditorWidgetRect( wxPGProperty* p, int column ) const;
+
+    void CorrectEditorWidgetSizeX();
+
+    /** Called in RecalculateVirtualSize() to reposition control
+        on virtual height changes.
+    */
+    void CorrectEditorWidgetPosY();
+
+    /** Deselect current selection, if any. Returns true if success
+        (ie. validator did not intercept). */
+    bool DoClearSelection();
+
+    int DoDrawItems( wxDC& dc,
+                     const wxRect* clipRect,
+                     bool isBuffered ) const;
+
+    /** Draws an expand/collapse (ie. +/-) button.
+    */
+    virtual void DrawExpanderButton( wxDC& dc, const wxRect& rect,
+                                     wxPGProperty* property ) const;
+
+    /** Draws items from topitemy to bottomitemy */
+    void DrawItems( wxDC& dc, unsigned int topitemy, unsigned int bottomitemy,
+                    const wxRect* clip_rect = (const wxRect*) NULL );
+
+    // Translate wxKeyEvent to wxPG_ACTION_XXX
+    int KeyEventToActions(wxKeyEvent &event, int* pSecond) const;
+
+    int KeyEventToAction(wxKeyEvent &event) const
+    {
+        return KeyEventToActions(event, NULL);
+    }
+
+    void ImprovedClientToScreen( int* px, int* py );
+
+    // Called by focus event handlers. newFocused is the window that becomes
+    // focused.
+    void HandleFocusChange( wxWindow* newFocused );
+
+    /** Reloads all non-customized colours from system settings. */
+    void RegainColours();
+
+    bool DoEditorValidate();
+
+    wxPGProperty* DoGetItemAtY( int y ) const;
+
+    void DoSetSplitterPosition_( int newxpos,
+                                 bool refresh = true,
+                                 int splitterIndex = 0,
+                                 bool allPages = false );
+
+    void FreeEditors();
+
+    virtual bool DoExpand( wxPGProperty* p, bool sendEvent = false );
+
+    virtual bool DoCollapse( wxPGProperty* p, bool sendEvent = false );
+
+    // Returns nearest paint visible property (such that will be painted unless
+    // window is scrolled or resized). If given property is paint visible, then
+    // it itself will be returned.
+    wxPGProperty* GetNearestPaintVisible( wxPGProperty* p ) const;
+
+    static void RegisterDefaultEditors();
+
+    // Sets up basic event handling for child control
+    void SetupChildEventHandling( wxWindow* wnd );
+
+    void CustomSetCursor( int type, bool override = false );
+
+    /**
+        Repositions scrollbar and underlying panel according to changed virtual
+        size.
+    */
+    void RecalculateVirtualSize( int forceXPos = -1 );
+
+    void PrepareAfterItemsAdded();
+
+    bool SendEvent( int eventType,
+                    wxPGProperty* p,
+                    wxVariant* pValue = NULL,
+                    unsigned int selFlags = 0 );
+
+    void SetFocusOnCanvas();
+
+    bool DoHideProperty( wxPGProperty* p, bool hide, int flags );
+
+private:
+
+    bool ButtonTriggerKeyTest( int action, wxKeyEvent& event );
+
+    DECLARE_EVENT_TABLE()
+#endif // #ifndef SWIG
+};
+
+// -----------------------------------------------------------------------
+//
+// Bunch of inlines that need to resolved after all classes have been defined.
+//
+
+#ifndef SWIG
+inline bool wxPropertyGridPageState::IsDisplayed() const
+{
+    return ( this == m_pPropGrid->GetState() );
+}
+
+inline unsigned int wxPropertyGridPageState::GetActualVirtualHeight() const
+{
+    return DoGetRoot()->GetChildrenHeight(GetGrid()->GetRowHeight());
+}
+#endif
+
+inline int wxPGProperty::GetDisplayedCommonValueCount() const
+{
+    if ( HasFlag(wxPG_PROP_USES_COMMON_VALUE) )
+    {
+        wxPropertyGrid* pg = GetGrid();
+        if ( pg )
+            return (int) pg->GetCommonValueCount();
+    }
+    return 0;
+}
+
+inline void wxPGProperty::SetEditor( const wxString& editorName )
+{
+    m_customEditor = wxPropertyGridInterface::GetEditorByName(editorName);
+}
+
+inline void wxPGProperty::SetName( const wxString& newName )
+{
+    GetGrid()->SetPropertyName(this, newName);
+}
+
+inline bool wxPGProperty::Hide( bool hide, int flags )
+{
+    return GetGrid()->HideProperty(this, hide, flags);
+}
+
+inline bool wxPGProperty::SetMaxLength( int maxLen )
+{
+    return GetGrid()->SetPropertyMaxLength(this,maxLen);
+}
+
+// -----------------------------------------------------------------------
+
+#define wxPG_BASE_EVT_PRE_ID     1775
+
+#ifndef SWIG
+
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_SELECTED, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_CHANGING, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_CHANGED, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_HIGHLIGHTED, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_RIGHT_CLICK, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_PAGE_CHANGED, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_ITEM_COLLAPSED, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_ITEM_EXPANDED, wxPropertyGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_PROPGRID, wxEVT_PG_DOUBLE_CLICK, wxPropertyGridEvent );
+
+#else
+    enum {
+        wxEVT_PG_SELECTED = wxPG_BASE_EVT_PRE_ID,
+        wxEVT_PG_CHANGING,
+        wxEVT_PG_CHANGED,
+        wxEVT_PG_HIGHLIGHTED,
+        wxEVT_PG_RIGHT_CLICK,
+        wxEVT_PG_PAGE_CHANGED,
+        wxEVT_PG_ITEM_COLLAPSED,
+        wxEVT_PG_ITEM_EXPANDED,
+        wxEVT_PG_DOUBLE_CLICK
+    };
+#endif
+
+
+#define wxPG_BASE_EVT_TYPE       wxEVT_PG_SELECTED
+#define wxPG_MAX_EVT_TYPE        (wxPG_BASE_EVT_TYPE+30)
+
+
+#ifndef SWIG
+typedef void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&);
+
+#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_CHANGING(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGING, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_DOUBLE_CLICK(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_DOUBLE_CLICK, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_ITEM_COLLAPSED(id, fn)        DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_ITEM_COLLAPSED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+#define EVT_PG_ITEM_EXPANDED(id, fn)         DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_ITEM_EXPANDED, id, -1, wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn ), NULL ),
+
+#define wxPropertyGridEventHandler(fn) \
+    wxEVENT_HANDLER_CAST( wxPropertyGridEventFunction, fn )
+
+#endif
+
+
+/** @class wxPropertyGridEvent
+
+    A propertygrid event holds information about events associated with
+    wxPropertyGrid objects.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPropertyGridEvent : public wxCommandEvent
+{
+public:
+
+    /** Constructor. */
+    wxPropertyGridEvent(wxEventType commandType=0, int id=0);
+#ifndef SWIG
+    /** Copy constructor. */
+    wxPropertyGridEvent(const wxPropertyGridEvent& event);
+#endif
+    /** Destructor. */
+    ~wxPropertyGridEvent();
+
+    /** Copyer. */
+    virtual wxEvent* Clone() const;
+
+    wxPGProperty* GetMainParent() const
+    {
+        wxASSERT(m_property);
+        return m_property->GetMainParent();
+    }
+
+    /** Returns id of associated property. */
+    wxPGProperty* GetProperty() const
+    {
+        return m_property;
+    }
+
+    wxPGValidationInfo& GetValidationInfo()
+    {
+        wxASSERT(m_validationInfo);
+        return *m_validationInfo;
+    }
+
+    /** Returns true if you can veto the action that the event is signaling.
+    */
+    bool CanVeto() const { return m_canVeto; }
+
+    /**
+        Call this from your event handler to veto action that the event is
+        signaling.
+
+        You can only veto a shutdown if wxPropertyGridEvent::CanVeto returns
+        true.
+        @remarks
+        Currently only wxEVT_PG_CHANGING supports vetoing.
+    */
+    void Veto( bool veto = true ) { m_wasVetoed = veto; }
+
+    /** Returns value that is about to be set for wxEVT_PG_CHANGING.
+    */
+    const wxVariant& GetValue() const
+    {
+        wxASSERT_MSG( m_validationInfo,
+                      "Only call GetValue from a handler "
+                      "of event type that supports it" );
+        return m_validationInfo->GetValue();
+    }
+
+    /**
+        Set override validation failure behavior.
+
+        Only effective if Veto was also called, and only allowed if event type
+        is wxEVT_PG_CHANGING.
+    */
+    void SetValidationFailureBehavior( wxPGVFBFlags flags )
+    {
+        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
+        m_validationInfo->SetFailureBehavior( flags );
+    }
+
+    /** Sets custom failure message for this time only. Only applies if
+        wxPG_VFB_SHOW_MESSAGE is set in validation failure flags.
+    */
+    void SetValidationFailureMessage( const wxString& message )
+    {
+        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
+        m_validationInfo->SetFailureMessage( message );
+    }
+
+#ifndef SWIG
+    wxPGVFBFlags GetValidationFailureBehavior() const
+    {
+        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
+        return m_validationInfo->GetFailureBehavior();
+    }
+
+    void SetCanVeto( bool canVeto ) { m_canVeto = canVeto; }
+    bool WasVetoed() const { return m_wasVetoed; }
+
+    /** Changes the associated property. */
+    void SetProperty( wxPGProperty* p ) { m_property = p; }
+
+    void SetPropertyGrid( wxPropertyGrid* pg ) { m_pg = pg; }
+
+    void SetupValidationInfo()
+    {
+        wxASSERT(m_pg);
+        wxASSERT( GetEventType() == wxEVT_PG_CHANGING );
+        m_validationInfo = &m_pg->GetValidationInfo();
+    }
+
+private:
+    void Init();
+    DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
+
+    wxPGProperty*       m_property;
+    wxPropertyGrid*     m_pg;
+    wxPGValidationInfo* m_validationInfo;
+
+    bool                m_canVeto;
+    bool                m_wasVetoed;
+
+#endif
+};
+
+
+// -----------------------------------------------------------------------
+
+/** @class wxPropertyGridPopulator
+    @ingroup classes
+    Allows populating wxPropertyGrid from arbitrary text source.
+*/
+class WXDLLIMPEXP_PROPGRID wxPropertyGridPopulator
+{
+public:
+    /** Default constructor.
+    */
+    wxPropertyGridPopulator();
+
+    /** Destructor. */
+    virtual ~wxPropertyGridPopulator();
+
+    void SetState( wxPropertyGridPageState* state );
+
+    void SetGrid( wxPropertyGrid* pg );
+
+    /** Appends a new property under bottommost parent.
+        @param propClass
+        Property class as string.
+    */
+    wxPGProperty* Add( const wxString& propClass,
+                       const wxString& propLabel,
+                       const wxString& propName,
+                       const wxString* propValue,
+                       wxPGChoices* pChoices = NULL );
+
+    /**
+        Pushes property to the back of parent array (ie it becomes bottommost
+        parent), and starts scanning/adding children for it.
+
+        When finished, parent array is returned to the original state.
+    */
+    void AddChildren( wxPGProperty* property );
+
+    /** Adds attribute to the bottommost property.
+        @param type
+        Allowed values: "string", (same as string), "int", "bool". Empty string
+          mean autodetect.
+    */
+    bool AddAttribute( const wxString& name,
+                       const wxString& type,
+                       const wxString& value );
+
+    /** Called once in AddChildren.
+    */
+    virtual void DoScanForChildren() = 0;
+
+    /**
+        Returns id of parent property for which children can currently be
+        added.
+     */
+    wxPGProperty* GetCurParent() const
+    {
+        return (wxPGProperty*) m_propHierarchy[m_propHierarchy.size()-1];
+    }
+
+    wxPropertyGridPageState* GetState() { return m_state; }
+    const wxPropertyGridPageState* GetState() const { return m_state; }
+
+    /** Like wxString::ToLong, except allows N% in addition of N.
+    */
+    static bool ToLongPCT( const wxString& s, long* pval, long max );
+
+    /** Parses strings of format "choice1"[=value1] ... "choiceN"[=valueN] into
+        wxPGChoices. Registers parsed result using idString (if not empty).
+        Also, if choices with given id already registered, then don't parse but
+        return those choices instead.
+    */
+    wxPGChoices ParseChoices( const wxString& choicesString,
+                              const wxString& idString );
+
+    /** Implement in derived class to do custom process when an error occurs.
+        Default implementation uses wxLogError.
+    */
+    virtual void ProcessError( const wxString& msg );
+
+protected:
+
+    /** Used property grid. */
+    wxPropertyGrid*         m_pg;
+
+    /** Used property grid state. */
+    wxPropertyGridPageState*    m_state;
+
+    /** Tree-hierarchy of added properties (that can have children). */
+    wxArrayPGProperty       m_propHierarchy;
+
+    /** Hashmap for string-id to wxPGChoicesData mapping. */
+    wxPGHashMapS2P          m_dictIdChoices;
+};
+
+// -----------------------------------------------------------------------
+
+//
+// Undefine macros that are not needed outside propertygrid sources
+//
+#ifndef __wxPG_SOURCE_FILE__
+    #undef wxPG_FL_DESC_REFRESH_REQUIRED
+    #undef wxPG_FL_SCROLLBAR_DETECTED
+    #undef wxPG_FL_CREATEDSTATE
+    #undef wxPG_FL_NOSTATUSBARHELP
+    #undef wxPG_FL_SCROLLED
+    #undef wxPG_FL_FOCUS_INSIDE_CHILD
+    #undef wxPG_FL_FOCUS_INSIDE
+    #undef wxPG_FL_MOUSE_INSIDE_CHILD
+    #undef wxPG_FL_CUR_USES_CUSTOM_IMAGE
+    #undef wxPG_FL_PRIMARY_FILLS_ENTIRE
+    #undef wxPG_FL_VALUE_MODIFIED
+    #undef wxPG_FL_MOUSE_INSIDE
+    #undef wxPG_FL_FOCUSED
+    #undef wxPG_FL_MOUSE_CAPTURED
+    #undef wxPG_FL_INITIALIZED
+    #undef wxPG_FL_ACTIVATION_BY_CLICK
+    #undef wxPG_FL_DONT_CENTER_SPLITTER
+    #undef wxPG_SUPPORT_TOOLTIPS
+    #undef wxPG_DOUBLE_BUFFER
+    #undef wxPG_ICON_WIDTH
+    #undef wxPG_USE_RENDERER_NATIVE
+// Following are needed by the manager headers
+//    #undef const wxString&
+#endif
+
+// -----------------------------------------------------------------------
+
+#endif
+
+#endif // _WX_PROPGRID_PROPGRID_H_
+
Index: propgriddefs.h
===================================================================
--- propgriddefs.h	(revision 102)
+++ propgriddefs.h	(working copy)
@@ -1,782 +1,782 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/propgriddefs.h
-// Purpose:     wxPropertyGrid miscellaneous definitions
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2008-08-31
-// RCS-ID:      $Id: propgriddefs.h 59374 2009-03-06 17:32:28Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_PROPGRIDDEFS_H_
-#define _WX_PROPGRID_PROPGRIDDEFS_H_
-
-#if wxUSE_PROPGRID
-
-#include "wx/dynarray.h"
-#include "wx/vector.h"
-#include "wx/hashmap.h"
-#include "wx/variant.h"
-#include "wx/longlong.h"
-#include "wx/clntdata.h"
-
-// -----------------------------------------------------------------------
-
-//
-// Here are some platform dependent defines
-// NOTE: More in propertygrid.cpp
-//
-
-#ifndef SWIG
-
-#if defined(__WXMSW__)
-
-    // space between vertical line and value text
-    #define wxPG_XBEFORETEXT            4
-    // space between vertical line and value editor control
-    #define wxPG_XBEFOREWIDGET          1
-
-    // x position adjustment for wxTextCtrl (and like)
-    #define wxPG_TEXTCTRLXADJUST        3
-
-    // comment to use bitmap buttons
-    #define wxPG_ICON_WIDTH             9
-    // 1 if wxRendererNative should be employed
-    #define wxPG_USE_RENDERER_NATIVE    0
-
-    // 1 to use double-buffer that guarantees flicker-free painting
-    #define wxPG_DOUBLE_BUFFER          1
-
-    // Enable tooltips
-    #define wxPG_SUPPORT_TOOLTIPS       1
-
-    // width of optional bitmap/image in front of property
-    #define wxPG_CUSTOM_IMAGE_WIDTH     20
-
-    // 1 to create controls out of sight, hide them, and then move them into
-    // correct position
-    #define wxPG_CREATE_CONTROLS_HIDDEN 0
-
-    // 1 if splitter drag detect margin and control cannot overlap
-    #define wxPG_NO_CHILD_EVT_MOTION    0
-
-    // If 1, then setting empty tooltip actually hides it
-    #define wxPG_ALLOW_EMPTY_TOOLTIPS   1
-
-    #define wxPG_NAT_BUTTON_BORDER_ANY          1
-    #define wxPG_NAT_BUTTON_BORDER_X            1
-    #define wxPG_NAT_BUTTON_BORDER_Y            1
-
-    // If 1 then controls are refreshed after selected was drawn.
-    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 0
-
-#elif defined(__WXGTK__)
-
-    // space between vertical line and value text
-    #define wxPG_XBEFORETEXT            5
-    // space between vertical line and value editor control
-    #define wxPG_XBEFOREWIDGET          1
-
-    // x position adjustment for wxTextCtrl (and like)
-    #define wxPG_TEXTCTRLXADJUST        3
-
-    // comment to use bitmap buttons
-    #define wxPG_ICON_WIDTH             9
-    // 1 if wxRendererNative should be employed
-    #define wxPG_USE_RENDERER_NATIVE    1
-
-    // 1 to use double-buffer that guarantees flicker-free painting
-    #define wxPG_DOUBLE_BUFFER          1
-
-    // Enable tooltips
-    #define wxPG_SUPPORT_TOOLTIPS       1
-
-    // width of optional bitmap/image in front of property
-    #define wxPG_CUSTOM_IMAGE_WIDTH     20
-
-    // 1 to create controls out of sight, hide them, and then move them into
-    // correct position
-    #define wxPG_CREATE_CONTROLS_HIDDEN 0
-
-    // 1 if splitter drag detect margin and control cannot overlap
-    #define wxPG_NO_CHILD_EVT_MOTION    1
-
-    // If 1, then setting empty tooltip actually hides it
-    #define wxPG_ALLOW_EMPTY_TOOLTIPS   0
-
-    #define wxPG_NAT_BUTTON_BORDER_ANY      1
-    #define wxPG_NAT_BUTTON_BORDER_X        1
-    #define wxPG_NAT_BUTTON_BORDER_Y        1
-
-    // If 1 then controls are refreshed after selected was drawn.
-    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 1
-
-#elif defined(__WXMAC__)
-
-    // space between vertical line and value text
-    #define wxPG_XBEFORETEXT            4
-    // space between vertical line and value editor widget
-    #define wxPG_XBEFOREWIDGET          1
-
-    // x position adjustment for wxTextCtrl (and like)
-    #define wxPG_TEXTCTRLXADJUST        0
-
-    // comment to use bitmap buttons
-    #define wxPG_ICON_WIDTH             11
-    // 1 if wxRendererNative should be employed
-    #define wxPG_USE_RENDERER_NATIVE    1
-
-    // 1 to use double-buffer that guarantees flicker-free painting
-    #define wxPG_DOUBLE_BUFFER          0
-
-    // Enable tooltips
-    #define wxPG_SUPPORT_TOOLTIPS       1
-
-    // width of optional bitmap/image in front of property
-    #define wxPG_CUSTOM_IMAGE_WIDTH     20
-
-    // 1 to create controls out of sight, hide them, and then move them into
-    // correct position
-    #define wxPG_CREATE_CONTROLS_HIDDEN 0
-
-    // 1 if splitter drag detect margin and control cannot overlap
-    #define wxPG_NO_CHILD_EVT_MOTION    0
-
-    // If 1, then setting empty tooltip actually hides it
-    #define wxPG_ALLOW_EMPTY_TOOLTIPS   1
-
-    #define wxPG_NAT_BUTTON_BORDER_ANY      0
-    #define wxPG_NAT_BUTTON_BORDER_X        0
-    #define wxPG_NAT_BUTTON_BORDER_Y        0
-
-    // If 1 then controls are refreshed after selected was drawn.
-    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 0
-
-#else // defaults
-
-    // space between vertical line and value text
-    #define wxPG_XBEFORETEXT            5
-    // space between vertical line and value editor widget
-    #define wxPG_XBEFOREWIDGET          1
-
-    // x position adjustment for wxTextCtrl (and like)
-    #define wxPG_TEXTCTRLXADJUST        3
-
-    // comment to use bitmap buttons
-    #define wxPG_ICON_WIDTH             9
-    // 1 if wxRendererNative should be employed
-    #define wxPG_USE_RENDERER_NATIVE    0
-
-    // 1 to use double-buffer that guarantees flicker-free painting
-    #define wxPG_DOUBLE_BUFFER          0
-
-    // Enable tooltips
-    #define wxPG_SUPPORT_TOOLTIPS       0
-
-    // width of optional bitmap/image in front of property
-    #define wxPG_CUSTOM_IMAGE_WIDTH     20
-
-    // 1 to create controls out of sight, hide them, and then move them into
-    // correct position
-    #define wxPG_CREATE_CONTROLS_HIDDEN 0
-
-    // 1 if splitter drag detect margin and control cannot overlap
-    #define wxPG_NO_CHILD_EVT_MOTION    1
-
-    // If 1, then setting empty tooltip actually hides it
-    #define wxPG_ALLOW_EMPTY_TOOLTIPS   0
-
-    #define wxPG_NAT_BUTTON_BORDER_ANY      0
-    #define wxPG_NAT_BUTTON_BORDER_X        0
-    #define wxPG_NAT_BUTTON_BORDER_Y        0
-
-    // If 1 then controls are refreshed after selected was drawn.
-    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 1
-#endif // platform
-
-
-#define wxPG_CONTROL_MARGIN             0 // space between splitter and control
-
-#define wxCC_CUSTOM_IMAGE_MARGIN1       4  // before image
-#define wxCC_CUSTOM_IMAGE_MARGIN2       5  // after image
-
-#define DEFAULT_IMAGE_OFFSET_INCREMENT \
-    (wxCC_CUSTOM_IMAGE_MARGIN1 + wxCC_CUSTOM_IMAGE_MARGIN2)
-
-#define wxPG_DRAG_MARGIN                30
-
-#if wxPG_NO_CHILD_EVT_MOTION
-    #define wxPG_SPLITTERX_DETECTMARGIN1    3 // this much on left
-    #define wxPG_SPLITTERX_DETECTMARGIN2    2 // this much on right
-#else
-    #define wxPG_SPLITTERX_DETECTMARGIN1    3 // this much on left
-    #define wxPG_SPLITTERX_DETECTMARGIN2    2 // this much on right
-#endif
-
-// Use this macro to generate standard custom image height from
-#define wxPG_STD_CUST_IMAGE_HEIGHT(LINEHEIGHT)  (LINEHEIGHT-3)
-
-
-#if defined(__WXWINCE__)
-    #define wxPG_SMALL_SCREEN       1
-    #undef wxPG_DOUBLE_BUFFER
-    #define wxPG_DOUBLE_BUFFER      0
-#else
-    #define wxPG_SMALL_SCREEN       0
-#endif
-
-#endif // #ifndef SWIG
-
-// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead
-// (for tree buttons)
-//#undef wxPG_ICON_WIDTH
-
-#if WXWIN_COMPATIBILITY_2_6 || WXWIN_COMPATIBILITY_2_8
-    #define wxPG_COMPATIBILITY_1_4      1
-#else
-    #define wxPG_COMPATIBILITY_1_4      0
-#endif
-
-// Need to force disable tooltips?
-#if !wxUSE_TOOLTIPS
-    #undef wxPG_SUPPORT_TOOLTIPS
-    #define wxPG_SUPPORT_TOOLTIPS       0
-#endif
-
-// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.)
-#ifndef wxPG_INCLUDE_ADVPROPS
-    #define wxPG_INCLUDE_ADVPROPS           1
-#endif
-
-// Set 1 to include checkbox editor class
-#define wxPG_INCLUDE_CHECKBOX           1
-
-// -----------------------------------------------------------------------
-
-
-class wxPGEditor;
-class wxPGProperty;
-class wxPropertyCategory;
-class wxPGChoices;
-class wxPropertyGridPageState;
-class wxPGCell;
-class wxPGCellRenderer;
-class wxPGChoiceEntry;
-class wxPGPropArgCls;
-class wxPropertyGridInterface;
-class wxPropertyGrid;
-class wxPropertyGridEvent;
-class wxPropertyGridManager;
-class wxPGOwnerDrawnComboBox;
-class wxPGEditorDialogAdapter;
-class wxPGValidationInfo;
-
-
-// -----------------------------------------------------------------------
-
-/** @section propgrid_misc wxPropertyGrid Miscellanous
-
-    This section describes some miscellanous values, types and macros.
-    @{
-*/
-
-#ifndef SWIG
-    // Used to tell wxPGProperty to use label as name as well
-    #define wxPG_LABEL              (*wxPGProperty::sm_wxPG_LABEL)
-    // This is the value placed in wxPGProperty::sm_wxPG_LABEL
-    #define wxPG_LABEL_STRING       wxS("@!")
-    #define wxPG_NULL_BITMAP        wxNullBitmap
-    #define wxPG_COLOUR_BLACK       (*wxBLACK)
-#else
-    #define wxPG_NULL_BITMAP        wxBitmap_NULL
-    #define wxPG_COLOUR_BLACK       wxColour_BLACK
-#endif // #ifndef SWIG
-
-/** Convert Red, Green and Blue to a single 32-bit value.
-*/
-#define wxPG_COLOUR(R,G,B) ((wxUint32)(R+(G<<8)+(B<<16)))
-
-
-/** If property is supposed to have custom-painted image, then returning
-    this in OnMeasureImage() will usually be enough.
-*/
-#define wxPG_DEFAULT_IMAGE_SIZE             wxSize(-1, -1)
-
-
-/** This callback function is used for sorting properties.
-
-    Call wxPropertyGrid::SetSortFunction() to set it.
-
-    Sort function should return a value greater than 0 if position of p1 is
-    after p2. So, for instance, when comparing property names, you can use
-    following implementation:
-
-        @code
-            int MyPropertySortFunction(wxPropertyGrid* propGrid,
-                                       wxPGProperty* p1,
-                                       wxPGProperty* p2)
-            {
-                return p1->GetBaseName().compare( p2->GetBaseName() );
-            }
-        @endcode
-*/
-typedef int (*wxPGSortCallback)(wxPropertyGrid* propGrid,
-                                wxPGProperty* p1,
-                                wxPGProperty* p2);
-
-
-
-typedef wxString wxPGCachedString;
-
-/** @}
-*/
-
-// -----------------------------------------------------------------------
-
-// Used to indicate wxPGChoices::Add etc that the value is actually not given
-// by the caller.
-#define wxPG_INVALID_VALUE      INT_MAX
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-#if wxUSE_STL
-typedef std::vector<wxPGProperty*> wxArrayPGProperty;
-#else
-WX_DEFINE_TYPEARRAY_WITH_DECL_PTR(wxPGProperty*, wxArrayPGProperty,
-                                  wxBaseArrayPtrVoid,
-                                  class WXDLLIMPEXP_PROPGRID);
-#endif
-
-// Always use wxString based hashmap with unicode, stl, swig and GCC 4.0+
-WX_DECLARE_STRING_HASH_MAP_WITH_DECL(void*,
-                                     wxPGHashMapS2P,
-                                     class WXDLLIMPEXP_PROPGRID);
-
-WX_DECLARE_STRING_HASH_MAP_WITH_DECL(wxString,
-                                     wxPGHashMapS2S,
-                                     class WXDLLIMPEXP_PROPGRID);
- 
-WX_DECLARE_VOIDPTR_HASH_MAP_WITH_DECL(void*,
-                                      wxPGHashMapP2P,
-                                      class WXDLLIMPEXP_PROPGRID);
-
-WX_DECLARE_HASH_MAP_WITH_DECL(wxInt32,
-                              wxInt32,
-                              wxIntegerHash,
-                              wxIntegerEqual,
-                              wxPGHashMapI2I,
-                              class WXDLLIMPEXP_PROPGRID);
-
-#endif // #ifndef SWIG
-
-// -----------------------------------------------------------------------
-
-enum wxPG_GETPROPERTYVALUES_FLAGS
-{
-
-/** Flags for wxPropertyGridInterface::GetPropertyValues */
-wxPG_KEEP_STRUCTURE               = 0x00000010,
-
-/** Flags for wxPropertyGrid::SetPropertyAttribute() etc */
-wxPG_RECURSE                      = 0x00000020,
-
-/** Include attributes for GetPropertyValues. */
-wxPG_INC_ATTRIBUTES               = 0x00000040,
-
-/** Used when first starting recursion. */
-wxPG_RECURSE_STARTS               = 0x00000080,
-
-/** Force value change. */
-wxPG_FORCE                        = 0x00000100,
-
-/** Only sort categories and their immediate children.
-    Sorting done by wxPG_AUTO_SORT option uses this.
-*/
-wxPG_SORT_TOP_LEVEL_ONLY          = 0x00000200
-
-};
-
-/** Flags for wxPropertyGrid::SetPropertyAttribute() etc */
-#define wxPG_DONT_RECURSE         0x00000000
-
-// -----------------------------------------------------------------------
-
-// Misc argument flags.
-enum wxPG_MISC_ARG_FLAGS
-{
-    // Get/Store full value instead of displayed value.
-    wxPG_FULL_VALUE                     = 0x00000001,
-
-    wxPG_REPORT_ERROR                   = 0x00000002,
-
-    wxPG_PROPERTY_SPECIFIC              = 0x00000004,
-
-    // Get/Store editable value instead of displayed one (should only be
-    // different in the case of common values)
-    wxPG_EDITABLE_VALUE                 = 0x00000008,
-
-    // Used when dealing with fragments of composite string value
-    wxPG_COMPOSITE_FRAGMENT             = 0x00000010,
-
-    // Means property for which final string value is for can not really be
-    // edited.
-    wxPG_UNEDITABLE_COMPOSITE_FRAGMENT  = 0x00000020,
-
-    // ValueToString() called from GetValueAsString()
-    // (guarantees that input wxVariant value is current own value)
-    wxPG_VALUE_IS_CURRENT               = 0x00000040,
-
-    // Value is being set programmatically (ie. not by user)
-    wxPG_PROGRAMMATIC_VALUE             = 0x00000080
-};
-
-// -----------------------------------------------------------------------
-
-// wxPGProperty::SetValue() flags
-enum wxPG_SETVALUE_FLAGS
-{
-    wxPG_SETVAL_REFRESH_EDITOR      = 0x0001,
-    wxPG_SETVAL_AGGREGATED          = 0x0002,
-    wxPG_SETVAL_FROM_PARENT         = 0x0004,
-    wxPG_SETVAL_BY_USER             = 0x0008  // Set if value changed by user
-};
-
-// -----------------------------------------------------------------------
-
-//
-// Valid constants for wxPG_UINT_BASE attribute
-// (long because of wxVariant constructor)
-#define wxPG_BASE_OCT                       (long)8
-#define wxPG_BASE_DEC                       (long)10
-#define wxPG_BASE_HEX                       (long)16
-#define wxPG_BASE_HEXL                      (long)32
-
-//
-// Valid constants for wxPG_UINT_PREFIX attribute
-#define wxPG_PREFIX_NONE                    (long)0
-#define wxPG_PREFIX_0x                      (long)1
-#define wxPG_PREFIX_DOLLAR_SIGN             (long)2
-
-// -----------------------------------------------------------------------
-// Editor class.
-
-#ifndef SWIG
-
-// Editor accessor (for backwards compatiblity use only).
-#define wxPG_EDITOR(T)          wxPGEditor_##T
-
-// Declare editor class, with optional part.
-#define WX_PG_DECLARE_EDITOR_WITH_DECL(EDITOR,DECL) \
-extern DECL wxPGEditor* wxPGEditor_##EDITOR; \
-extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();
-
-// Declare editor class.
-#define WX_PG_DECLARE_EDITOR(EDITOR) \
-extern wxPGEditor* wxPGEditor_##EDITOR; \
-extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();
-
-// Declare builtin editor classes.
-WX_PG_DECLARE_EDITOR_WITH_DECL(TextCtrl,WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_EDITOR_WITH_DECL(Choice,WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_EDITOR_WITH_DECL(ComboBox,WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_EDITOR_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PROPGRID)
-#if wxPG_INCLUDE_CHECKBOX
-WX_PG_DECLARE_EDITOR_WITH_DECL(CheckBox,WXDLLIMPEXP_PROPGRID)
-#endif
-WX_PG_DECLARE_EDITOR_WITH_DECL(ChoiceAndButton,WXDLLIMPEXP_PROPGRID)
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-//
-// Macro WXVARIANT allows creation of wxVariant from any type supported by
-// wxWidgets internally, and of all types created using
-// WX_PG_DECLARE_VARIANT_DATA.
-template<class T>
-wxVariant WXVARIANT( const T& WXUNUSED(value) )
-{
-    wxFAIL_MSG("Code should always call specializations of this template");
-    return wxVariant();
-}
-
-template<> inline wxVariant WXVARIANT( const int& value )
-    { return wxVariant((long)value); }
-template<> inline wxVariant WXVARIANT( const long& value )
-    { return wxVariant(value); }
-template<> inline wxVariant WXVARIANT( const bool& value )
-    { return wxVariant(value); }
-template<> inline wxVariant WXVARIANT( const double& value )
-    { return wxVariant(value); }
-template<> inline wxVariant WXVARIANT( const wxArrayString& value )
-    { return wxVariant(value); }
-template<> inline wxVariant WXVARIANT( const wxString& value )
-    { return wxVariant(value); }
-#if wxUSE_DATETIME
-template<> inline wxVariant WXVARIANT( const wxDateTime& value )
-    { return wxVariant(value); }
-#endif
-
-
-//
-// These are modified versions of DECLARE/WX_PG_IMPLEMENT_VARIANT_DATA
-// macros found in variant.h. Difference are as follows:
-//   * These support non-wxObject data
-//   * These implement classname##RefFromVariant function which returns
-//     reference to data within.
-//   * const char* classname##_VariantType which equals classname.
-//   * WXVARIANT
-//
-#define WX_PG_DECLARE_VARIANT_DATA(classname) \
-    WX_PG_DECLARE_VARIANT_DATA_EXPORTED(classname, wxEMPTY_PARAMETER_VALUE)
-
-#define WX_PG_DECLARE_VARIANT_DATA_EXPORTED(classname,expdecl) \
-expdecl classname& operator << ( classname &object, const wxVariant &variant ); \
-expdecl wxVariant& operator << ( wxVariant &variant, const classname &object ); \
-expdecl const classname& classname##RefFromVariant( const wxVariant& variant ); \
-expdecl classname& classname##RefFromVariant( wxVariant& variant ); \
-template<> inline wxVariant WXVARIANT( const classname& value ) \
-{ \
-    wxVariant variant; \
-    variant << value; \
-    return variant; \
-} \
-extern expdecl const char* classname##_VariantType;
-
-
-#define WX_PG_IMPLEMENT_VARIANT_DATA(classname) \
-    WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED(classname, wxEMPTY_PARAMETER_VALUE)
-
-// Add getter (ie. classname << variant) separately to allow
-// custom implementations.
-#define WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_NO_EQ_NO_GETTER(classname,expdecl) \
-const char* classname##_VariantType = #classname; \
-class classname##VariantData: public wxVariantData \
-{ \
-public:\
-    classname##VariantData() {} \
-    classname##VariantData( const classname &value ) { m_value = value; } \
-\
-    classname &GetValue() { return m_value; } \
-\
-    const classname &GetValue() const { return m_value; } \
-\
-    virtual bool Eq(wxVariantData& data) const; \
-\
-    virtual wxString GetType() const; \
-\
-    virtual wxVariantData* Clone() const { return new classname##VariantData(m_value); } \
-\
-protected:\
-    classname m_value; \
-};\
-\
-wxString classname##VariantData::GetType() const\
-{\
-    return wxS(#classname);\
-}\
-\
-expdecl wxVariant& operator << ( wxVariant &variant, const classname &value )\
-{\
-    classname##VariantData *data = new classname##VariantData( value );\
-    variant.SetData( data );\
-    return variant;\
-} \
-expdecl classname& classname##RefFromVariant( wxVariant& variant ) \
-{ \
-    wxASSERT( variant.GetType() == #classname );\
-    classname##VariantData *data = (classname##VariantData*) variant.GetData();\
-    return data->GetValue();\
-} \
-expdecl const classname& classname##RefFromVariant( const wxVariant& variant ) \
-{ \
-    wxASSERT( variant.GetType() == #classname );\
-    classname##VariantData *data = (classname##VariantData*) variant.GetData();\
-    return data->GetValue();\
-}
-
-#define WX_PG_IMPLEMENT_VARIANT_DATA_GETTER(classname, expdecl) \
-expdecl classname& operator << ( classname &value, const wxVariant &variant )\
-{\
-    wxASSERT( variant.GetType() == #classname );\
-    \
-    classname##VariantData *data = (classname##VariantData*) variant.GetData();\
-    value = data->GetValue();\
-    return value;\
-}
-
-#define WX_PG_IMPLEMENT_VARIANT_DATA_EQ(classname, expdecl) \
-bool classname##VariantData::Eq(wxVariantData& data) const \
-{\
-    wxASSERT( GetType() == data.GetType() );\
-\
-    classname##VariantData & otherData = (classname##VariantData &) data;\
-\
-    return otherData.m_value == m_value;\
-}
-
-// implements a wxVariantData-derived class using for the Eq() method the
-// operator== which must have been provided by "classname"
-#define WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED(classname,expdecl) \
-WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_NO_EQ_NO_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
-WX_PG_IMPLEMENT_VARIANT_DATA_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
-WX_PG_IMPLEMENT_VARIANT_DATA_EQ(classname,wxEMPTY_PARAMETER_VALUE expdecl)
-
-#define WX_PG_IMPLEMENT_VARIANT_DATA(classname) \
-WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED(classname, wxEMPTY_PARAMETER_VALUE)
-
-// with Eq() implementation that always returns false
-#define WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_DUMMY_EQ(classname,expdecl) \
-WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_NO_EQ_NO_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
-WX_PG_IMPLEMENT_VARIANT_DATA_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
-\
-bool classname##VariantData::Eq(wxVariantData& WXUNUSED(data)) const \
-{\
-    return false; \
-}
-
-#define WX_PG_IMPLEMENT_VARIANT_DATA_DUMMY_EQ(classname) \
-WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_DUMMY_EQ(classname, wxEMPTY_PARAMETER_VALUE)
-
-WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxPoint, WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxSize, WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxArrayInt, WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxLongLong, WXDLLIMPEXP_PROPGRID)
-WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxULongLong, WXDLLIMPEXP_PROPGRID)
-DECLARE_VARIANT_OBJECT_EXPORTED(wxFont, WXDLLIMPEXP_PROPGRID)
-template<> inline wxVariant WXVARIANT( const wxFont& value )
-{
-    wxVariant variant;
-    variant << value;
-    return variant;
-}
-
-template<> inline wxVariant WXVARIANT( const wxColour& value )
-{
-    wxVariant variant;
-    variant << value;
-    return variant;
-}
-
-#if wxUSE_LONGLONG_NATIVE
-
-template<> inline wxVariant WXVARIANT( const wxLongLong_t& value )
-{
-    wxVariant variant;
-    variant << wxLongLong(value);
-    return variant;
-}
-
-template<> inline wxVariant WXVARIANT( const wxULongLong_t& value )
-{
-    wxVariant variant;
-    variant << wxULongLong(value);
-    return variant;
-}
-
-WXDLLIMPEXP_PROPGRID wxLongLong_t& operator << ( wxLongLong_t &value, const wxVariant &variant );
-WXDLLIMPEXP_PROPGRID wxULongLong_t& operator << ( wxULongLong_t &value, const wxVariant &variant );
-
-#endif  // wxUSE_LONGLONG_NATIVE
-
-// Define constants for common wxVariant type strings
-
-#define wxPG_VARIANT_TYPE_STRING        wxPGGlobalVars->m_strstring
-#define wxPG_VARIANT_TYPE_LONG          wxPGGlobalVars->m_strlong
-#define wxPG_VARIANT_TYPE_BOOL          wxPGGlobalVars->m_strbool
-#define wxPG_VARIANT_TYPE_LIST          wxPGGlobalVars->m_strlist
-#define wxPG_VARIANT_TYPE_DOUBLE        wxS("double")
-#define wxPG_VARIANT_TYPE_ARRSTRING     wxS("arrstring")
-#define wxPG_VARIANT_TYPE_DATETIME      wxS("datetime")
-
-// Safely converts a wxVariant to (long) int. Supports converting from string
-// and boolean as well.
-WXDLLIMPEXP_PROPGRID
-long wxPGVariantToInt( const wxVariant& variant, long defVal = 1 );
-
-// Safely converts a wxVariant to wxLongLong_t. Returns true on success.
-WXDLLIMPEXP_PROPGRID
-bool wxPGVariantToLongLong( const wxVariant& variant, wxLongLong_t* pResult );
-
-// Safely converts a wxVariant to wxULongLong_t. Returns true on success.
-WXDLLIMPEXP_PROPGRID
-bool wxPGVariantToULongLong( const wxVariant& variant, wxULongLong_t* pResult );
-
-// Safely converts a wxVariant to double. Supports converting from string and
-// wxLongLong as well.
-WXDLLIMPEXP_PROPGRID
-bool wxPGVariantToDouble( const wxVariant& variant, double* pResult );
-
-#endif // !SWIG
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-//
-// Tokenizer macros.
-// NOTE: I have made two versions - worse ones (performance and consistency
-//   wise) use wxStringTokenizer and better ones (may have unfound bugs)
-//   use custom code.
-//
-
-#include "wx/tokenzr.h"
-
-// TOKENIZER1 can be done with wxStringTokenizer
-#define WX_PG_TOKENIZER1_BEGIN(WXSTRING,DELIMITER) \
-    wxStringTokenizer tkz(WXSTRING,DELIMITER,wxTOKEN_RET_EMPTY); \
-    while ( tkz.HasMoreTokens() ) \
-    { \
-        wxString token = tkz.GetNextToken(); \
-        token.Trim(true); \
-        token.Trim(false);
-
-#define WX_PG_TOKENIZER1_END() \
-    }
-
-
-//
-// 2nd version: tokens are surrounded by DELIMITERs (for example, C-style
-// strings). TOKENIZER2 must use custom code (a class) for full compliance with
-// " surrounded strings with \" inside.
-//
-// class implementation is in propgrid.cpp
-//
-
-class WXDLLIMPEXP_PROPGRID wxPGStringTokenizer
-{
-public:
-    wxPGStringTokenizer( const wxString& str, wxChar delimeter );
-    ~wxPGStringTokenizer();
-
-    bool HasMoreTokens(); // not const so we can do some stuff in it
-    wxString GetNextToken();
-
-protected:
-    const wxString*             m_str;
-    wxString::const_iterator    m_curPos;
-    wxString                    m_readyToken;
-    wxUniChar                   m_delimeter;
-};
-
-#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \
-    wxPGStringTokenizer tkz(WXSTRING,DELIMITER); \
-    while ( tkz.HasMoreTokens() ) \
-    { \
-        wxString token = tkz.GetNextToken();
-
-#define WX_PG_TOKENIZER2_END() \
-    }
-
-#endif
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_PROPGRIDDEFS_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/propgriddefs.h
+// Purpose:     wxPropertyGrid miscellaneous definitions
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2008-08-31
+// RCS-ID:      $Id: propgriddefs.h 59374 2009-03-06 17:32:28Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_PROPGRIDDEFS_H_
+#define _WX_PROPGRID_PROPGRIDDEFS_H_
+
+#if wxUSE_PROPGRID
+
+#include "wx/dynarray.h"
+#include "wx/vector.h"
+#include "wx/hashmap.h"
+#include "wx/variant.h"
+#include "wx/longlong.h"
+#include "wx/clntdata.h"
+
+// -----------------------------------------------------------------------
+
+//
+// Here are some platform dependent defines
+// NOTE: More in propertygrid.cpp
+//
+
+#ifndef SWIG
+
+#if defined(__WXMSW__)
+
+    // space between vertical line and value text
+    #define wxPG_XBEFORETEXT            4
+    // space between vertical line and value editor control
+    #define wxPG_XBEFOREWIDGET          1
+
+    // x position adjustment for wxTextCtrl (and like)
+    #define wxPG_TEXTCTRLXADJUST        3
+
+    // comment to use bitmap buttons
+    #define wxPG_ICON_WIDTH             9
+    // 1 if wxRendererNative should be employed
+    #define wxPG_USE_RENDERER_NATIVE    0
+
+    // 1 to use double-buffer that guarantees flicker-free painting
+    #define wxPG_DOUBLE_BUFFER          1
+
+    // Enable tooltips
+    #define wxPG_SUPPORT_TOOLTIPS       1
+
+    // width of optional bitmap/image in front of property
+    #define wxPG_CUSTOM_IMAGE_WIDTH     20
+
+    // 1 to create controls out of sight, hide them, and then move them into
+    // correct position
+    #define wxPG_CREATE_CONTROLS_HIDDEN 0
+
+    // 1 if splitter drag detect margin and control cannot overlap
+    #define wxPG_NO_CHILD_EVT_MOTION    0
+
+    // If 1, then setting empty tooltip actually hides it
+    #define wxPG_ALLOW_EMPTY_TOOLTIPS   1
+
+    #define wxPG_NAT_BUTTON_BORDER_ANY          1
+    #define wxPG_NAT_BUTTON_BORDER_X            1
+    #define wxPG_NAT_BUTTON_BORDER_Y            1
+
+    // If 1 then controls are refreshed after selected was drawn.
+    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 0
+
+#elif defined(__WXGTK__)
+
+    // space between vertical line and value text
+    #define wxPG_XBEFORETEXT            5
+    // space between vertical line and value editor control
+    #define wxPG_XBEFOREWIDGET          1
+
+    // x position adjustment for wxTextCtrl (and like)
+    #define wxPG_TEXTCTRLXADJUST        3
+
+    // comment to use bitmap buttons
+    #define wxPG_ICON_WIDTH             9
+    // 1 if wxRendererNative should be employed
+    #define wxPG_USE_RENDERER_NATIVE    1
+
+    // 1 to use double-buffer that guarantees flicker-free painting
+    #define wxPG_DOUBLE_BUFFER          1
+
+    // Enable tooltips
+    #define wxPG_SUPPORT_TOOLTIPS       1
+
+    // width of optional bitmap/image in front of property
+    #define wxPG_CUSTOM_IMAGE_WIDTH     20
+
+    // 1 to create controls out of sight, hide them, and then move them into
+    // correct position
+    #define wxPG_CREATE_CONTROLS_HIDDEN 0
+
+    // 1 if splitter drag detect margin and control cannot overlap
+    #define wxPG_NO_CHILD_EVT_MOTION    1
+
+    // If 1, then setting empty tooltip actually hides it
+    #define wxPG_ALLOW_EMPTY_TOOLTIPS   0
+
+    #define wxPG_NAT_BUTTON_BORDER_ANY      1
+    #define wxPG_NAT_BUTTON_BORDER_X        1
+    #define wxPG_NAT_BUTTON_BORDER_Y        1
+
+    // If 1 then controls are refreshed after selected was drawn.
+    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 1
+
+#elif defined(__WXMAC__)
+
+    // space between vertical line and value text
+    #define wxPG_XBEFORETEXT            4
+    // space between vertical line and value editor widget
+    #define wxPG_XBEFOREWIDGET          1
+
+    // x position adjustment for wxTextCtrl (and like)
+    #define wxPG_TEXTCTRLXADJUST        0
+
+    // comment to use bitmap buttons
+    #define wxPG_ICON_WIDTH             11
+    // 1 if wxRendererNative should be employed
+    #define wxPG_USE_RENDERER_NATIVE    1
+
+    // 1 to use double-buffer that guarantees flicker-free painting
+    #define wxPG_DOUBLE_BUFFER          0
+
+    // Enable tooltips
+    #define wxPG_SUPPORT_TOOLTIPS       1
+
+    // width of optional bitmap/image in front of property
+    #define wxPG_CUSTOM_IMAGE_WIDTH     20
+
+    // 1 to create controls out of sight, hide them, and then move them into
+    // correct position
+    #define wxPG_CREATE_CONTROLS_HIDDEN 0
+
+    // 1 if splitter drag detect margin and control cannot overlap
+    #define wxPG_NO_CHILD_EVT_MOTION    0
+
+    // If 1, then setting empty tooltip actually hides it
+    #define wxPG_ALLOW_EMPTY_TOOLTIPS   1
+
+    #define wxPG_NAT_BUTTON_BORDER_ANY      0
+    #define wxPG_NAT_BUTTON_BORDER_X        0
+    #define wxPG_NAT_BUTTON_BORDER_Y        0
+
+    // If 1 then controls are refreshed after selected was drawn.
+    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 0
+
+#else // defaults
+
+    // space between vertical line and value text
+    #define wxPG_XBEFORETEXT            5
+    // space between vertical line and value editor widget
+    #define wxPG_XBEFOREWIDGET          1
+
+    // x position adjustment for wxTextCtrl (and like)
+    #define wxPG_TEXTCTRLXADJUST        3
+
+    // comment to use bitmap buttons
+    #define wxPG_ICON_WIDTH             9
+    // 1 if wxRendererNative should be employed
+    #define wxPG_USE_RENDERER_NATIVE    0
+
+    // 1 to use double-buffer that guarantees flicker-free painting
+    #define wxPG_DOUBLE_BUFFER          0
+
+    // Enable tooltips
+    #define wxPG_SUPPORT_TOOLTIPS       0
+
+    // width of optional bitmap/image in front of property
+    #define wxPG_CUSTOM_IMAGE_WIDTH     20
+
+    // 1 to create controls out of sight, hide them, and then move them into
+    // correct position
+    #define wxPG_CREATE_CONTROLS_HIDDEN 0
+
+    // 1 if splitter drag detect margin and control cannot overlap
+    #define wxPG_NO_CHILD_EVT_MOTION    1
+
+    // If 1, then setting empty tooltip actually hides it
+    #define wxPG_ALLOW_EMPTY_TOOLTIPS   0
+
+    #define wxPG_NAT_BUTTON_BORDER_ANY      0
+    #define wxPG_NAT_BUTTON_BORDER_X        0
+    #define wxPG_NAT_BUTTON_BORDER_Y        0
+
+    // If 1 then controls are refreshed after selected was drawn.
+    #define wxPG_REFRESH_CONTROLS_AFTER_REPAINT 1
+#endif // platform
+
+
+#define wxPG_CONTROL_MARGIN             0 // space between splitter and control
+
+#define wxCC_CUSTOM_IMAGE_MARGIN1       4  // before image
+#define wxCC_CUSTOM_IMAGE_MARGIN2       5  // after image
+
+#define DEFAULT_IMAGE_OFFSET_INCREMENT \
+    (wxCC_CUSTOM_IMAGE_MARGIN1 + wxCC_CUSTOM_IMAGE_MARGIN2)
+
+#define wxPG_DRAG_MARGIN                30
+
+#if wxPG_NO_CHILD_EVT_MOTION
+    #define wxPG_SPLITTERX_DETECTMARGIN1    3 // this much on left
+    #define wxPG_SPLITTERX_DETECTMARGIN2    2 // this much on right
+#else
+    #define wxPG_SPLITTERX_DETECTMARGIN1    3 // this much on left
+    #define wxPG_SPLITTERX_DETECTMARGIN2    2 // this much on right
+#endif
+
+// Use this macro to generate standard custom image height from
+#define wxPG_STD_CUST_IMAGE_HEIGHT(LINEHEIGHT)  (LINEHEIGHT-3)
+
+
+#if defined(__WXWINCE__)
+    #define wxPG_SMALL_SCREEN       1
+    #undef wxPG_DOUBLE_BUFFER
+    #define wxPG_DOUBLE_BUFFER      0
+#else
+    #define wxPG_SMALL_SCREEN       0
+#endif
+
+#endif // #ifndef SWIG
+
+// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead
+// (for tree buttons)
+//#undef wxPG_ICON_WIDTH
+
+#if WXWIN_COMPATIBILITY_2_6 || WXWIN_COMPATIBILITY_2_8
+    #define wxPG_COMPATIBILITY_1_4      1
+#else
+    #define wxPG_COMPATIBILITY_1_4      0
+#endif
+
+// Need to force disable tooltips?
+#if !wxUSE_TOOLTIPS
+    #undef wxPG_SUPPORT_TOOLTIPS
+    #define wxPG_SUPPORT_TOOLTIPS       0
+#endif
+
+// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.)
+#ifndef wxPG_INCLUDE_ADVPROPS
+    #define wxPG_INCLUDE_ADVPROPS           1
+#endif
+
+// Set 1 to include checkbox editor class
+#define wxPG_INCLUDE_CHECKBOX           1
+
+// -----------------------------------------------------------------------
+
+
+class wxPGEditor;
+class wxPGProperty;
+class wxPropertyCategory;
+class wxPGChoices;
+class wxPropertyGridPageState;
+class wxPGCell;
+class wxPGCellRenderer;
+class wxPGChoiceEntry;
+class wxPGPropArgCls;
+class wxPropertyGridInterface;
+class wxPropertyGrid;
+class wxPropertyGridEvent;
+class wxPropertyGridManager;
+class wxPGOwnerDrawnComboBox;
+class wxPGEditorDialogAdapter;
+class wxPGValidationInfo;
+
+
+// -----------------------------------------------------------------------
+
+/** @section propgrid_misc wxPropertyGrid Miscellanous
+
+    This section describes some miscellanous values, types and macros.
+    @{
+*/
+
+#ifndef SWIG
+    // Used to tell wxPGProperty to use label as name as well
+    #define wxPG_LABEL              (*wxPGProperty::sm_wxPG_LABEL)
+    // This is the value placed in wxPGProperty::sm_wxPG_LABEL
+    #define wxPG_LABEL_STRING       wxS("@!")
+    #define wxPG_NULL_BITMAP        wxNullBitmap
+    #define wxPG_COLOUR_BLACK       (*wxBLACK)
+#else
+    #define wxPG_NULL_BITMAP        wxBitmap_NULL
+    #define wxPG_COLOUR_BLACK       wxColour_BLACK
+#endif // #ifndef SWIG
+
+/** Convert Red, Green and Blue to a single 32-bit value.
+*/
+#define wxPG_COLOUR(R,G,B) ((wxUint32)(R+(G<<8)+(B<<16)))
+
+
+/** If property is supposed to have custom-painted image, then returning
+    this in OnMeasureImage() will usually be enough.
+*/
+#define wxPG_DEFAULT_IMAGE_SIZE             wxSize(-1, -1)
+
+
+/** This callback function is used for sorting properties.
+
+    Call wxPropertyGrid::SetSortFunction() to set it.
+
+    Sort function should return a value greater than 0 if position of p1 is
+    after p2. So, for instance, when comparing property names, you can use
+    following implementation:
+
+        @code
+            int MyPropertySortFunction(wxPropertyGrid* propGrid,
+                                       wxPGProperty* p1,
+                                       wxPGProperty* p2)
+            {
+                return p1->GetBaseName().compare( p2->GetBaseName() );
+            }
+        @endcode
+*/
+typedef int (*wxPGSortCallback)(wxPropertyGrid* propGrid,
+                                wxPGProperty* p1,
+                                wxPGProperty* p2);
+
+
+
+typedef wxString wxPGCachedString;
+
+/** @}
+*/
+
+// -----------------------------------------------------------------------
+
+// Used to indicate wxPGChoices::Add etc that the value is actually not given
+// by the caller.
+#define wxPG_INVALID_VALUE      INT_MAX
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+#if wxUSE_STL
+typedef std::vector<wxPGProperty*> wxArrayPGProperty;
+#else
+WX_DEFINE_TYPEARRAY_WITH_DECL_PTR(wxPGProperty*, wxArrayPGProperty,
+                                  wxBaseArrayPtrVoid,
+                                  class WXDLLIMPEXP_PROPGRID);
+#endif
+
+// Always use wxString based hashmap with unicode, stl, swig and GCC 4.0+
+WX_DECLARE_STRING_HASH_MAP_WITH_DECL(void*,
+                                     wxPGHashMapS2P,
+                                     class WXDLLIMPEXP_PROPGRID);
+
+WX_DECLARE_STRING_HASH_MAP_WITH_DECL(wxString,
+                                     wxPGHashMapS2S,
+                                     class WXDLLIMPEXP_PROPGRID);
+ 
+WX_DECLARE_VOIDPTR_HASH_MAP_WITH_DECL(void*,
+                                      wxPGHashMapP2P,
+                                      class WXDLLIMPEXP_PROPGRID);
+
+WX_DECLARE_HASH_MAP_WITH_DECL(wxInt32,
+                              wxInt32,
+                              wxIntegerHash,
+                              wxIntegerEqual,
+                              wxPGHashMapI2I,
+                              class WXDLLIMPEXP_PROPGRID);
+
+#endif // #ifndef SWIG
+
+// -----------------------------------------------------------------------
+
+enum wxPG_GETPROPERTYVALUES_FLAGS
+{
+
+/** Flags for wxPropertyGridInterface::GetPropertyValues */
+wxPG_KEEP_STRUCTURE               = 0x00000010,
+
+/** Flags for wxPropertyGrid::SetPropertyAttribute() etc */
+wxPG_RECURSE                      = 0x00000020,
+
+/** Include attributes for GetPropertyValues. */
+wxPG_INC_ATTRIBUTES               = 0x00000040,
+
+/** Used when first starting recursion. */
+wxPG_RECURSE_STARTS               = 0x00000080,
+
+/** Force value change. */
+wxPG_FORCE                        = 0x00000100,
+
+/** Only sort categories and their immediate children.
+    Sorting done by wxPG_AUTO_SORT option uses this.
+*/
+wxPG_SORT_TOP_LEVEL_ONLY          = 0x00000200
+
+};
+
+/** Flags for wxPropertyGrid::SetPropertyAttribute() etc */
+#define wxPG_DONT_RECURSE         0x00000000
+
+// -----------------------------------------------------------------------
+
+// Misc argument flags.
+enum wxPG_MISC_ARG_FLAGS
+{
+    // Get/Store full value instead of displayed value.
+    wxPG_FULL_VALUE                     = 0x00000001,
+
+    wxPG_REPORT_ERROR                   = 0x00000002,
+
+    wxPG_PROPERTY_SPECIFIC              = 0x00000004,
+
+    // Get/Store editable value instead of displayed one (should only be
+    // different in the case of common values)
+    wxPG_EDITABLE_VALUE                 = 0x00000008,
+
+    // Used when dealing with fragments of composite string value
+    wxPG_COMPOSITE_FRAGMENT             = 0x00000010,
+
+    // Means property for which final string value is for can not really be
+    // edited.
+    wxPG_UNEDITABLE_COMPOSITE_FRAGMENT  = 0x00000020,
+
+    // ValueToString() called from GetValueAsString()
+    // (guarantees that input wxVariant value is current own value)
+    wxPG_VALUE_IS_CURRENT               = 0x00000040,
+
+    // Value is being set programmatically (ie. not by user)
+    wxPG_PROGRAMMATIC_VALUE             = 0x00000080
+};
+
+// -----------------------------------------------------------------------
+
+// wxPGProperty::SetValue() flags
+enum wxPG_SETVALUE_FLAGS
+{
+    wxPG_SETVAL_REFRESH_EDITOR      = 0x0001,
+    wxPG_SETVAL_AGGREGATED          = 0x0002,
+    wxPG_SETVAL_FROM_PARENT         = 0x0004,
+    wxPG_SETVAL_BY_USER             = 0x0008  // Set if value changed by user
+};
+
+// -----------------------------------------------------------------------
+
+//
+// Valid constants for wxPG_UINT_BASE attribute
+// (long because of wxVariant constructor)
+#define wxPG_BASE_OCT                       (long)8
+#define wxPG_BASE_DEC                       (long)10
+#define wxPG_BASE_HEX                       (long)16
+#define wxPG_BASE_HEXL                      (long)32
+
+//
+// Valid constants for wxPG_UINT_PREFIX attribute
+#define wxPG_PREFIX_NONE                    (long)0
+#define wxPG_PREFIX_0x                      (long)1
+#define wxPG_PREFIX_DOLLAR_SIGN             (long)2
+
+// -----------------------------------------------------------------------
+// Editor class.
+
+#ifndef SWIG
+
+// Editor accessor (for backwards compatiblity use only).
+#define wxPG_EDITOR(T)          wxPGEditor_##T
+
+// Declare editor class, with optional part.
+#define WX_PG_DECLARE_EDITOR_WITH_DECL(EDITOR,DECL) \
+extern DECL wxPGEditor* wxPGEditor_##EDITOR; \
+extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();
+
+// Declare editor class.
+#define WX_PG_DECLARE_EDITOR(EDITOR) \
+extern wxPGEditor* wxPGEditor_##EDITOR; \
+extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();
+
+// Declare builtin editor classes.
+WX_PG_DECLARE_EDITOR_WITH_DECL(TextCtrl,WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_EDITOR_WITH_DECL(Choice,WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_EDITOR_WITH_DECL(ComboBox,WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_EDITOR_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PROPGRID)
+#if wxPG_INCLUDE_CHECKBOX
+WX_PG_DECLARE_EDITOR_WITH_DECL(CheckBox,WXDLLIMPEXP_PROPGRID)
+#endif
+WX_PG_DECLARE_EDITOR_WITH_DECL(ChoiceAndButton,WXDLLIMPEXP_PROPGRID)
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+//
+// Macro WXVARIANT allows creation of wxVariant from any type supported by
+// wxWidgets internally, and of all types created using
+// WX_PG_DECLARE_VARIANT_DATA.
+template<class T>
+wxVariant WXVARIANT( const T& WXUNUSED(value) )
+{
+    wxFAIL_MSG("Code should always call specializations of this template");
+    return wxVariant();
+}
+
+template<> inline wxVariant WXVARIANT( const int& value )
+    { return wxVariant((long)value); }
+template<> inline wxVariant WXVARIANT( const long& value )
+    { return wxVariant(value); }
+template<> inline wxVariant WXVARIANT( const bool& value )
+    { return wxVariant(value); }
+template<> inline wxVariant WXVARIANT( const double& value )
+    { return wxVariant(value); }
+template<> inline wxVariant WXVARIANT( const wxArrayString& value )
+    { return wxVariant(value); }
+template<> inline wxVariant WXVARIANT( const wxString& value )
+    { return wxVariant(value); }
+#if wxUSE_DATETIME
+template<> inline wxVariant WXVARIANT( const wxDateTime& value )
+    { return wxVariant(value); }
+#endif
+
+
+//
+// These are modified versions of DECLARE/WX_PG_IMPLEMENT_VARIANT_DATA
+// macros found in variant.h. Difference are as follows:
+//   * These support non-wxObject data
+//   * These implement classname##RefFromVariant function which returns
+//     reference to data within.
+//   * const char* classname##_VariantType which equals classname.
+//   * WXVARIANT
+//
+#define WX_PG_DECLARE_VARIANT_DATA(classname) \
+    WX_PG_DECLARE_VARIANT_DATA_EXPORTED(classname, wxEMPTY_PARAMETER_VALUE)
+
+#define WX_PG_DECLARE_VARIANT_DATA_EXPORTED(classname,expdecl) \
+expdecl classname& operator << ( classname &object, const wxVariant &variant ); \
+expdecl wxVariant& operator << ( wxVariant &variant, const classname &object ); \
+expdecl const classname& classname##RefFromVariant( const wxVariant& variant ); \
+expdecl classname& classname##RefFromVariant( wxVariant& variant ); \
+template<> inline wxVariant WXVARIANT( const classname& value ) \
+{ \
+    wxVariant variant; \
+    variant << value; \
+    return variant; \
+} \
+extern expdecl const char* classname##_VariantType;
+
+
+#define WX_PG_IMPLEMENT_VARIANT_DATA(classname) \
+    WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED(classname, wxEMPTY_PARAMETER_VALUE)
+
+// Add getter (ie. classname << variant) separately to allow
+// custom implementations.
+#define WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_NO_EQ_NO_GETTER(classname,expdecl) \
+const char* classname##_VariantType = #classname; \
+class classname##VariantData: public wxVariantData \
+{ \
+public:\
+    classname##VariantData() {} \
+    classname##VariantData( const classname &value ) { m_value = value; } \
+\
+    classname &GetValue() { return m_value; } \
+\
+    const classname &GetValue() const { return m_value; } \
+\
+    virtual bool Eq(wxVariantData& data) const; \
+\
+    virtual wxString GetType() const; \
+\
+    virtual wxVariantData* Clone() const { return new classname##VariantData(m_value); } \
+\
+protected:\
+    classname m_value; \
+};\
+\
+wxString classname##VariantData::GetType() const\
+{\
+    return wxS(#classname);\
+}\
+\
+expdecl wxVariant& operator << ( wxVariant &variant, const classname &value )\
+{\
+    classname##VariantData *data = new classname##VariantData( value );\
+    variant.SetData( data );\
+    return variant;\
+} \
+expdecl classname& classname##RefFromVariant( wxVariant& variant ) \
+{ \
+    wxASSERT( variant.GetType() == #classname );\
+    classname##VariantData *data = (classname##VariantData*) variant.GetData();\
+    return data->GetValue();\
+} \
+expdecl const classname& classname##RefFromVariant( const wxVariant& variant ) \
+{ \
+    wxASSERT( variant.GetType() == #classname );\
+    classname##VariantData *data = (classname##VariantData*) variant.GetData();\
+    return data->GetValue();\
+}
+
+#define WX_PG_IMPLEMENT_VARIANT_DATA_GETTER(classname, expdecl) \
+expdecl classname& operator << ( classname &value, const wxVariant &variant )\
+{\
+    wxASSERT( variant.GetType() == #classname );\
+    \
+    classname##VariantData *data = (classname##VariantData*) variant.GetData();\
+    value = data->GetValue();\
+    return value;\
+}
+
+#define WX_PG_IMPLEMENT_VARIANT_DATA_EQ(classname, expdecl) \
+bool classname##VariantData::Eq(wxVariantData& data) const \
+{\
+    wxASSERT( GetType() == data.GetType() );\
+\
+    classname##VariantData & otherData = (classname##VariantData &) data;\
+\
+    return otherData.m_value == m_value;\
+}
+
+// implements a wxVariantData-derived class using for the Eq() method the
+// operator== which must have been provided by "classname"
+#define WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED(classname,expdecl) \
+WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_NO_EQ_NO_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
+WX_PG_IMPLEMENT_VARIANT_DATA_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
+WX_PG_IMPLEMENT_VARIANT_DATA_EQ(classname,wxEMPTY_PARAMETER_VALUE expdecl)
+
+#define WX_PG_IMPLEMENT_VARIANT_DATA(classname) \
+WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED(classname, wxEMPTY_PARAMETER_VALUE)
+
+// with Eq() implementation that always returns false
+#define WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_DUMMY_EQ(classname,expdecl) \
+WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_NO_EQ_NO_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
+WX_PG_IMPLEMENT_VARIANT_DATA_GETTER(classname,wxEMPTY_PARAMETER_VALUE expdecl) \
+\
+bool classname##VariantData::Eq(wxVariantData& WXUNUSED(data)) const \
+{\
+    return false; \
+}
+
+#define WX_PG_IMPLEMENT_VARIANT_DATA_DUMMY_EQ(classname) \
+WX_PG_IMPLEMENT_VARIANT_DATA_EXPORTED_DUMMY_EQ(classname, wxEMPTY_PARAMETER_VALUE)
+
+WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxPoint, WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxSize, WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxArrayInt, WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxLongLong, WXDLLIMPEXP_PROPGRID)
+WX_PG_DECLARE_VARIANT_DATA_EXPORTED(wxULongLong, WXDLLIMPEXP_PROPGRID)
+DECLARE_VARIANT_OBJECT_EXPORTED(wxFont, WXDLLIMPEXP_PROPGRID)
+template<> inline wxVariant WXVARIANT( const wxFont& value )
+{
+    wxVariant variant;
+    variant << value;
+    return variant;
+}
+
+template<> inline wxVariant WXVARIANT( const wxColour& value )
+{
+    wxVariant variant;
+    variant << value;
+    return variant;
+}
+
+#if wxUSE_LONGLONG_NATIVE
+
+template<> inline wxVariant WXVARIANT( const wxLongLong_t& value )
+{
+    wxVariant variant;
+    variant << wxLongLong(value);
+    return variant;
+}
+
+template<> inline wxVariant WXVARIANT( const wxULongLong_t& value )
+{
+    wxVariant variant;
+    variant << wxULongLong(value);
+    return variant;
+}
+
+WXDLLIMPEXP_PROPGRID wxLongLong_t& operator << ( wxLongLong_t &value, const wxVariant &variant );
+WXDLLIMPEXP_PROPGRID wxULongLong_t& operator << ( wxULongLong_t &value, const wxVariant &variant );
+
+#endif  // wxUSE_LONGLONG_NATIVE
+
+// Define constants for common wxVariant type strings
+
+#define wxPG_VARIANT_TYPE_STRING        wxPGGlobalVars->m_strstring
+#define wxPG_VARIANT_TYPE_LONG          wxPGGlobalVars->m_strlong
+#define wxPG_VARIANT_TYPE_BOOL          wxPGGlobalVars->m_strbool
+#define wxPG_VARIANT_TYPE_LIST          wxPGGlobalVars->m_strlist
+#define wxPG_VARIANT_TYPE_DOUBLE        wxS("double")
+#define wxPG_VARIANT_TYPE_ARRSTRING     wxS("arrstring")
+#define wxPG_VARIANT_TYPE_DATETIME      wxS("datetime")
+
+// Safely converts a wxVariant to (long) int. Supports converting from string
+// and boolean as well.
+WXDLLIMPEXP_PROPGRID
+long wxPGVariantToInt( const wxVariant& variant, long defVal = 1 );
+
+// Safely converts a wxVariant to wxLongLong_t. Returns true on success.
+WXDLLIMPEXP_PROPGRID
+bool wxPGVariantToLongLong( const wxVariant& variant, wxLongLong_t* pResult );
+
+// Safely converts a wxVariant to wxULongLong_t. Returns true on success.
+WXDLLIMPEXP_PROPGRID
+bool wxPGVariantToULongLong( const wxVariant& variant, wxULongLong_t* pResult );
+
+// Safely converts a wxVariant to double. Supports converting from string and
+// wxLongLong as well.
+WXDLLIMPEXP_PROPGRID
+bool wxPGVariantToDouble( const wxVariant& variant, double* pResult );
+
+#endif // !SWIG
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+//
+// Tokenizer macros.
+// NOTE: I have made two versions - worse ones (performance and consistency
+//   wise) use wxStringTokenizer and better ones (may have unfound bugs)
+//   use custom code.
+//
+
+#include "wx/tokenzr.h"
+
+// TOKENIZER1 can be done with wxStringTokenizer
+#define WX_PG_TOKENIZER1_BEGIN(WXSTRING,DELIMITER) \
+    wxStringTokenizer tkz(WXSTRING,DELIMITER,wxTOKEN_RET_EMPTY); \
+    while ( tkz.HasMoreTokens() ) \
+    { \
+        wxString token = tkz.GetNextToken(); \
+        token.Trim(true); \
+        token.Trim(false);
+
+#define WX_PG_TOKENIZER1_END() \
+    }
+
+
+//
+// 2nd version: tokens are surrounded by DELIMITERs (for example, C-style
+// strings). TOKENIZER2 must use custom code (a class) for full compliance with
+// " surrounded strings with \" inside.
+//
+// class implementation is in propgrid.cpp
+//
+
+class WXDLLIMPEXP_PROPGRID wxPGStringTokenizer
+{
+public:
+    wxPGStringTokenizer( const wxString& str, wxChar delimeter );
+    ~wxPGStringTokenizer();
+
+    bool HasMoreTokens(); // not const so we can do some stuff in it
+    wxString GetNextToken();
+
+protected:
+    const wxString*             m_str;
+    wxString::const_iterator    m_curPos;
+    wxString                    m_readyToken;
+    wxUniChar                   m_delimeter;
+};
+
+#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \
+    wxPGStringTokenizer tkz(WXSTRING,DELIMITER); \
+    while ( tkz.HasMoreTokens() ) \
+    { \
+        wxString token = tkz.GetNextToken();
+
+#define WX_PG_TOKENIZER2_END() \
+    }
+
+#endif
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_PROPGRIDDEFS_H_
Index: propgridiface.h
===================================================================
--- propgridiface.h	(revision 102)
+++ propgridiface.h	(working copy)
@@ -1,1339 +1,1339 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgeid/propgridiface.h
-// Purpose:     wxPropertyGridInterface class
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2008-08-24
-// RCS-ID:      $Id: propgridiface.h 60793 2009-05-29 16:04:22Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef __WX_PROPGRID_PROPGRIDIFACE_H__
-#define __WX_PROPGRID_PROPGRIDIFACE_H__
-
-#if wxUSE_PROPGRID
-
-#include "wx/propgrid/property.h"
-#include "wx/propgrid/propgridpagestate.h"
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-/** @section wxPGPropArgCls
-
-    Most property grid functions have this type as their argument, as it can
-    convey a property by either a pointer or name.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGPropArgCls
-{
-public:
-    wxPGPropArgCls() { }
-    wxPGPropArgCls( const wxPGProperty* property )
-    {
-        m_ptr.property = (wxPGProperty*) property;
-        m_flags = IsProperty;
-    }
-    wxPGPropArgCls( const wxString& str )
-    {
-        m_ptr.stringName = &str;
-        m_flags = IsWxString;
-    }
-    wxPGPropArgCls( const wxPGPropArgCls& id )
-    {
-        m_ptr = id.m_ptr;
-        m_flags = id.m_flags;
-    }
-    // This is only needed for wxPython bindings
-    wxPGPropArgCls( wxString* str, bool WXUNUSED(deallocPtr) )
-    {
-        m_ptr.stringName = str;
-        m_flags = IsWxString | OwnsWxString;
-    }
-    ~wxPGPropArgCls()
-    {
-        if ( m_flags & OwnsWxString )
-            delete m_ptr.stringName;
-    }
-    wxPGProperty* GetPtr() const
-    {
-        wxCHECK( m_flags == IsProperty, NULL );
-        return m_ptr.property;
-    }
-    wxPGPropArgCls( const char* str )
-    {
-        m_ptr.charName = str;
-        m_flags = IsCharPtr;
-    }
-#if wxUSE_WCHAR_T
-    wxPGPropArgCls( const wchar_t* str )
-    {
-        m_ptr.wcharName = str;
-        m_flags = IsWCharPtr;
-    }
-#endif
-    /** This constructor is required for NULL. */
-    wxPGPropArgCls( int )
-    {
-        m_ptr.property = NULL;
-        m_flags = IsProperty;
-    }
-    wxPGProperty* GetPtr( wxPropertyGridInterface* iface ) const;
-    wxPGProperty* GetPtr( const wxPropertyGridInterface* iface ) const
-    {
-        return GetPtr((wxPropertyGridInterface*)iface);
-    }
-    wxPGProperty* GetPtr0() const { return m_ptr.property; }
-    bool HasName() const { return (m_flags != IsProperty); }
-    const wxString& GetName() const { return *m_ptr.stringName; }
-private:
-
-    enum
-    {
-        IsProperty      = 0x00,
-        IsWxString      = 0x01,
-        IsCharPtr       = 0x02,
-        IsWCharPtr      = 0x04,
-        OwnsWxString    = 0x10
-    };
-
-    union
-    {
-        wxPGProperty* property;
-        const char* charName;
-#if wxUSE_WCHAR_T
-        const wchar_t* wcharName;
-#endif
-        const wxString* stringName;
-    } m_ptr;
-    unsigned char m_flags;
-};
-
-#endif
-
-typedef const wxPGPropArgCls& wxPGPropArg;
-
-// -----------------------------------------------------------------------
-
-WXDLLIMPEXP_PROPGRID
-void wxPGTypeOperationFailed( const wxPGProperty* p,
-                              const wxString& typestr,
-                              const wxString& op );
-WXDLLIMPEXP_PROPGRID
-void wxPGGetFailed( const wxPGProperty* p, const wxString& typestr );
-
-// -----------------------------------------------------------------------
-
-// Helper macro that does necessary preparations when calling
-// some wxPGProperty's member function.
-#define wxPG_PROP_ARG_CALL_PROLOG_0(PROPERTY) \
-    PROPERTY *p = (PROPERTY*)id.GetPtr(this); \
-    if ( !p ) return;
-
-#define wxPG_PROP_ARG_CALL_PROLOG_RETVAL_0(PROPERTY, RETVAL) \
-    PROPERTY *p = (PROPERTY*)id.GetPtr(this); \
-    if ( !p ) return RETVAL;
-
-#define wxPG_PROP_ARG_CALL_PROLOG() \
-    wxPG_PROP_ARG_CALL_PROLOG_0(wxPGProperty)
-
-#define wxPG_PROP_ARG_CALL_PROLOG_RETVAL(RVAL) \
-    wxPG_PROP_ARG_CALL_PROLOG_RETVAL_0(wxPGProperty, RVAL)
-
-#define wxPG_PROP_ID_CONST_CALL_PROLOG() \
-    wxPG_PROP_ARG_CALL_PROLOG_0(const wxPGProperty)
-
-#define wxPG_PROP_ID_CONST_CALL_PROLOG_RETVAL(RVAL) \
-    wxPG_PROP_ARG_CALL_PROLOG_RETVAL_0(const wxPGProperty, RVAL)
-
-// -----------------------------------------------------------------------
-
-
-/** @class wxPropertyGridInterface
-
-    Most of the shared property manipulation interface shared by wxPropertyGrid,
-    wxPropertyGridPage, and wxPropertyGridManager is defined in this class.
-
-    @remarks
-    - In separate wxPropertyGrid component this class was known as
-    wxPropertyContainerMethods.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPropertyGridInterface
-{
-public:
-
-    /** Destructor */
-    virtual ~wxPropertyGridInterface() { }
-
-    /**
-        Appends property to the list.
-
-        wxPropertyGrid assumes ownership of the object.
-        Becomes child of most recently added category.
-        @remarks
-        - wxPropertyGrid takes the ownership of the property pointer.
-        - If appending a category with name identical to a category already in
-          the wxPropertyGrid, then newly created category is deleted, and most
-          recently added category (under which properties are appended) is set
-          to the one with same name. This allows easier adding of items to same
-          categories in multiple passes.
-        - Does not automatically redraw the control, so you may need to call
-          Refresh when calling this function after control has been shown for
-          the first time.
-    */
-    wxPGProperty* Append( wxPGProperty* property );
-
-    wxPGProperty* AppendIn( wxPGPropArg id, wxPGProperty* newproperty );
-
-    /**
-        In order to add new items into a property with fixed children (for
-        instance, wxFlagsProperty), you need to call this method. After
-        populating has been finished, you need to call EndAddChildren.
-    */
-    void BeginAddChildren( wxPGPropArg id );
-
-    /** Deletes all properties.
-    */
-    virtual void Clear() = 0;
-
-    /**
-        Clears current selection, if any.
-
-        @param validation
-            If set to @false, deselecting the property will always work,
-            even if its editor had invalid value in it.
-
-        @return Returns @true if successful or if there was no selection. May
-                fail if validation was enabled and active editor had invalid
-                value.
-    */
-    bool ClearSelection( bool validation = false);
-
-    /** Resets modified status of all properties.
-    */
-    void ClearModifiedStatus();
-
-    /** Collapses given category or property with children.
-        Returns true if actually collapses.
-    */
-    bool Collapse( wxPGPropArg id );
-
-    /** Collapses all items that can be collapsed.
-
-        @return
-        Return false if failed (may fail if editor value cannot be validated).
-    */
-    bool CollapseAll() { return ExpandAll(false); }
-
-    /**
-        Changes value of a property, as if from an editor.
-        Use this instead of SetPropertyValue() if you need the value to run
-        through validation process, and also send the property change event.
-
-        @return
-        Returns true if value was successfully changed.
-    */
-    bool ChangePropertyValue( wxPGPropArg id, wxVariant newValue );
-
-    /**
-        Deletes a property by id. If category is deleted, all children are
-        automatically deleted as well.
-     */
-    void DeleteProperty( wxPGPropArg id );
-
-    /**
-        Removes and returns a property.
-
-        @param id
-            Pointer or name of a property.
-
-        @remarks Removed property cannot have any children.
-    */
-    wxPGProperty* RemoveProperty( wxPGPropArg id );
-
-    /** Disables property. */
-    bool DisableProperty( wxPGPropArg id ) { return EnableProperty(id,false); }
-
-    /**
-        Returns true if all property grid data changes have been committed.
-
-        Usually only returns false if value in active editor has been
-        invalidated by a wxValidator.
-    */
-    bool EditorValidate();
-
-    /**
-        Enables or disables property, depending on whether enable is true or
-        false.
-     */
-    bool EnableProperty( wxPGPropArg id, bool enable = true );
-
-    /** Called after population of property with fixed children has finished.
-    */
-    void EndAddChildren( wxPGPropArg id );
-
-    /** Expands given category or property with children.
-        Returns true if actually expands.
-    */
-    bool Expand( wxPGPropArg id );
-
-    /** Expands all items that can be expanded.
-    */
-    bool ExpandAll( bool expand = true );
-
-    /** Returns id of first child of given property.
-        @remarks
-        Does not return sub-properties!
-    */
-    wxPGProperty* GetFirstChild( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxNullProperty)
-
-        if ( !p->GetChildCount() || p->HasFlag(wxPG_PROP_AGGREGATE) )
-            return wxNullProperty;
-
-        return p->Item(0);
-    }
-
-    //@{
-    /** Returns iterator class instance.
-        @param flags
-        See @ref propgrid_iterator_flags. Value wxPG_ITERATE_DEFAULT causes
-        iteration over everything except private child properties.
-        @param firstProp
-            Property to start iteration from. If NULL, then first child of root
-            is used.
-        @param startPos
-            Either wxTOP or wxBOTTOM. wxTOP will indicate that iterations start
-            from the first property from the top, and wxBOTTOM means that the
-            iteration will instead begin from bottommost valid item.
-    */
-    wxPropertyGridIterator GetIterator( int flags = wxPG_ITERATE_DEFAULT,
-                                        wxPGProperty* firstProp = NULL )
-    {
-        return wxPropertyGridIterator( m_pState, flags, firstProp );
-    }
-
-    wxPropertyGridConstIterator
-    GetIterator( int flags = wxPG_ITERATE_DEFAULT,
-                 wxPGProperty* firstProp = NULL ) const
-    {
-        return wxPropertyGridConstIterator( m_pState, flags, firstProp );
-    }
-
-    wxPropertyGridIterator GetIterator( int flags, int startPos )
-    {
-        return wxPropertyGridIterator( m_pState, flags, startPos );
-    }
-
-    wxPropertyGridConstIterator GetIterator( int flags, int startPos ) const
-    {
-        return wxPropertyGridConstIterator( m_pState, flags, startPos );
-    }
-    //@}
-
-    /** Returns id of first item, whether it is a category or property.
-        @param flags
-        @link iteratorflags List of iterator flags@endlink
-    */
-    wxPGProperty* GetFirst( int flags = wxPG_ITERATE_ALL )
-    {
-        wxPropertyGridIterator it( m_pState, flags, wxNullProperty, 1 );
-        return *it;
-    }
-
-    const wxPGProperty* GetFirst( int flags = wxPG_ITERATE_ALL ) const
-    {
-        return ((wxPropertyGridInterface*)this)->GetFirst(flags);
-    }
-
-    /**
-        Returns pointer to a property with given name (case-sensitive).
-        If there is no property with such name, @NULL pointer is returned.
-
-        @remarks Properties which have non-category, non-root parent
-                 can not be accessed globally by their name. Instead, use
-                 "<property>.<subproperty>" instead of "<subproperty>".
-    */
-    wxPGProperty* GetProperty( const wxString& name ) const
-    {
-        return GetPropertyByName(name);
-    }
-
-    /** Returns map-like storage of property's attributes.
-        @remarks
-        Note that if extra style wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES is set,
-        then builtin-attributes are not included in the storage.
-    */
-    const wxPGAttributeStorage& GetPropertyAttributes( wxPGPropArg id ) const
-    {
-        // If 'id' refers to invalid property, then we will return dummy
-        // attributes (ie. root property's attributes, which contents should
-        // should always be empty and of no consequence).
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(m_pState->DoGetRoot()->GetAttributes());
-        return p->GetAttributes();
-    }
-
-    /** Adds to 'targetArr' pointers to properties that have given
-        flags 'flags' set. However, if 'inverse' is set to true, then
-        only properties without given flags are stored.
-        @param flags
-        Property flags to use.
-        @param iterFlags
-        Iterator flags to use. Default is everything expect private children.
-    */
-    void GetPropertiesWithFlag( wxArrayPGProperty* targetArr,
-                                wxPGProperty::FlagType flags,
-                                bool inverse = false,
-                                int iterFlags = wxPG_ITERATE_PROPERTIES |
-                                                wxPG_ITERATE_HIDDEN |
-                                                wxPG_ITERATE_CATEGORIES) const;
-
-    /** Returns value of given attribute. If none found, returns NULL-variant.
-    */
-    wxVariant GetPropertyAttribute( wxPGPropArg id,
-                                    const wxString& attrName ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxNullVariant)
-        return p->GetAttribute(attrName);
-    }
-
-    /** Returns pointer of property's nearest parent category. If no category
-        found, returns NULL.
-    */
-    wxPropertyCategory* GetPropertyCategory( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ID_CONST_CALL_PROLOG_RETVAL(NULL)
-        return m_pState->GetPropertyCategory(p);
-    }
-
-#ifndef SWIG
-    /** Returns client data (void*) of a property. */
-    void* GetPropertyClientData( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
-        return p->GetClientData();
-    }
-#endif
-
-    /**
-        Returns first property which label matches given string.
-
-        NULL if none found. Note that this operation is extremely slow when
-        compared to GetPropertyByName().
-    */
-    wxPGProperty* GetPropertyByLabel( const wxString& label ) const;
-
-    /** Returns property with given name. NULL if none found.
-    */
-    wxPGProperty* GetPropertyByName( const wxString& name ) const;
-
-    /** Returns child property 'subname' of property 'name'. Same as
-        calling GetPropertyByName("name.subname"), albeit slightly faster.
-    */
-    wxPGProperty* GetPropertyByName( const wxString& name,
-                                     const wxString& subname ) const;
-
-    /** Returns property's editor. */
-    const wxPGEditor* GetPropertyEditor( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
-        return p->GetEditorClass();
-    }
-
-    /** Returns help string associated with a property. */
-    wxString GetPropertyHelpString( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(m_emptyString)
-        return p->GetHelpString();
-    }
-
-    /** Returns property's custom value image (NULL of none). */
-    wxBitmap* GetPropertyImage( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
-        return p->GetValueImage();
-    }
-
-    /** Returns label of a property. */
-    const wxString& GetPropertyLabel( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(m_emptyString)
-        return p->GetLabel();
-    }
-
-    /** Returns name of a property, by which it is globally accessible. */
-    wxString GetPropertyName( wxPGProperty* property )
-    {
-        return property->GetName();
-    }
-
-    /** Returns parent item of a property. */
-    wxPGProperty* GetPropertyParent( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxNullProperty)
-        return p->GetParent();
-    }
-
-#if wxUSE_VALIDATORS
-    /** Returns validator of a property as a reference, which you
-        can pass to any number of SetPropertyValidator.
-    */
-    wxValidator* GetPropertyValidator( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
-        return p->GetValidator();
-    }
-#endif
-
-    /** Returns value as wxVariant. To get wxObject pointer from it,
-        you will have to use WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) macro.
-
-        If property value is unspecified, Null variant is returned.
-    */
-    wxVariant GetPropertyValue( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxVariant())
-        return p->GetValue();
-    }
-
-    wxString GetPropertyValueAsString( wxPGPropArg id ) const;
-    long GetPropertyValueAsLong( wxPGPropArg id ) const;
-    unsigned long GetPropertyValueAsULong( wxPGPropArg id ) const
-    {
-        return (unsigned long) GetPropertyValueAsLong(id);
-    }
-#ifndef SWIG
-    int GetPropertyValueAsInt( wxPGPropArg id ) const
-        { return (int)GetPropertyValueAsLong(id); }
-#endif
-    bool GetPropertyValueAsBool( wxPGPropArg id ) const;
-    double GetPropertyValueAsDouble( wxPGPropArg id ) const;
-
-#define wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL(TYPENAME, DEFVAL) \
-    wxPG_PROP_ARG_CALL_PROLOG_RETVAL(DEFVAL) \
-    wxString typeName(wxS(TYPENAME)); \
-    wxVariant value = p->GetValue(); \
-    if ( value.GetType() != typeName ) \
-    { \
-        wxPGGetFailed(p, typeName); \
-        return DEFVAL; \
-    }
-
-#define wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL_WFALLBACK(TYPENAME, DEFVAL) \
-    wxPG_PROP_ARG_CALL_PROLOG_RETVAL(DEFVAL) \
-    wxVariant value = p->GetValue(); \
-    if ( value.GetType() != wxS(TYPENAME) ) \
-        return DEFVAL; \
-
-    wxArrayString GetPropertyValueAsArrayString( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL("arrstring",
-                                                   wxArrayString())
-        return value.GetArrayString();
-    }
-
-#if wxUSE_LONGLONG_NATIVE
-    wxLongLong_t GetPropertyValueAsLongLong( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL_WFALLBACK("wxLongLong",
-                                             (long) GetPropertyValueAsLong(id))
-        wxLongLong ll;
-        ll << value;
-        return ll.GetValue();
-    }
-
-    wxULongLong_t GetPropertyValueAsULongLong( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL_WFALLBACK("wxULongLong",
-                                    (unsigned long) GetPropertyValueAsULong(id))
-        wxULongLong ull;
-        ull << value;
-        return ull.GetValue();
-    }
-#endif
-
-    wxArrayInt GetPropertyValueAsArrayInt( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL("wxArrayInt",
-                                                   wxArrayInt())
-        wxArrayInt arr;
-        arr << value;
-        return arr;
-    }
-
-#if wxUSE_DATETIME
-    wxDateTime GetPropertyValueAsDateTime( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL("datetime",
-                                                   wxDateTime())
-        return value.GetDateTime();
-    }
-#endif
-
-#ifndef SWIG
-    /** Returns a wxVariant list containing wxVariant versions of all
-        property values. Order is not guaranteed.
-        @param flags
-        Use wxPG_KEEP_STRUCTURE to retain category structure; each sub
-        category will be its own wxVariantList of wxVariant.
-        Use wxPG_INC_ATTRIBUTES to include property attributes as well.
-        Each attribute will be stored as list variant named
-        "@@<propname>@@attr."
-        @remarks
-    */
-    wxVariant GetPropertyValues( const wxString& listname = wxEmptyString,
-        wxPGProperty* baseparent = NULL, long flags = 0 ) const
-    {
-        return m_pState->DoGetPropertyValues(listname, baseparent, flags);
-    }
-#endif
-
-    /** Returns currently selected property. */
-    wxPGProperty* GetSelection() const
-    {
-        return m_pState->GetSelection();
-    }
-
-#ifndef SWIG
-    wxPropertyGridPageState* GetState() const { return m_pState; }
-#endif
-
-    /** Similar to GetIterator(), but instead returns wxPGVIterator instance,
-        which can be useful for forward-iterating through arbitrary property
-        containers.
-
-        @param flags
-        See @ref propgrid_iterator_flags.
-    */
-    virtual wxPGVIterator GetVIterator( int flags ) const;
-
-    /** Hides or reveals a property.
-        @param hide
-            If true, hides property, otherwise reveals it.
-        @param flags
-            By default changes are applied recursively. Set this paramter
-            wxPG_DONT_RECURSE to prevent this.
-    */
-    bool HideProperty( wxPGPropArg id,
-                       bool hide = true,
-                       int flags = wxPG_RECURSE );
-
-#if wxPG_INCLUDE_ADVPROPS
-    /** Initializes *all* property types. Causes references to most object
-        files in the library, so calling this may cause significant increase
-        in executable size when linking with static library.
-    */
-    static void InitAllTypeHandlers();
-#else
-    static void InitAllTypeHandlers() { }
-#endif
-
-    //@{
-    /** Inserts property to the property container.
-
-        @param priorThis
-        New property is inserted just prior to this. Available only
-        in the first variant. There are two versions of this function
-        to allow this parameter to be either an id or name to
-        a property.
-
-        @param newproperty
-        Pointer to the inserted property. wxPropertyGrid will take
-        ownership of this object.
-
-        @param parent
-        New property is inserted under this category. Available only
-        in the second variant. There are two versions of this function
-        to allow this parameter to be either an id or name to
-        a property.
-
-        @param index
-        Index under category. Available only in the second variant.
-        If index is < 0, property is appended in category.
-
-        @return
-        Returns id for the property,
-
-        @remarks
-
-        - wxPropertyGrid takes the ownership of the property pointer.
-
-        - While Append may be faster way to add items, make note that when
-          both types of data storage (categoric and
-          non-categoric) are active, Insert becomes even more slow. This is
-          especially true if current mode is non-categoric.
-
-        Example of use:
-
-        @code
-
-            // append category
-            wxPGProperty* my_cat_id = propertygrid->Append(
-                new wxPropertyCategory("My Category") );
-
-            ...
-
-            // insert into category - using second variant
-            wxPGProperty* my_item_id_1 = propertygrid->Insert(
-                my_cat_id, 0, new wxStringProperty("My String 1") );
-
-            // insert before to first item - using first variant
-            wxPGProperty* my_item_id_2 = propertygrid->Insert(
-                my_item_id, new wxStringProperty("My String 2") );
-
-        @endcode
-
-    */
-    wxPGProperty* Insert( wxPGPropArg priorThis, wxPGProperty* newproperty );
-    wxPGProperty* Insert( wxPGPropArg parent,
-                          int index,
-                          wxPGProperty* newproperty );
-    //@}
-
-    /** Returns true if property is a category. */
-    bool IsPropertyCategory( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return p->IsCategory();
-    }
-
-    /** Returns true if property is enabled. */
-    bool IsPropertyEnabled( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return (!(p->GetFlags() & wxPG_PROP_DISABLED))?true:false;
-    }
-
-    /**
-        Returns true if given property is expanded.
-
-        Naturally, always returns false for properties that cannot be expanded.
-    */
-    bool IsPropertyExpanded( wxPGPropArg id ) const;
-
-    /**
-        Returns true if property has been modified after value set or modify
-        flag clear by software.
-    */
-    bool IsPropertyModified( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return ( (p->GetFlags() & wxPG_PROP_MODIFIED) ? true : false );
-    }
-
-    /**
-        Returns true if property is shown (ie hideproperty with true not
-        called for it).
-     */
-    bool IsPropertyShown( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return (!(p->GetFlags() & wxPG_PROP_HIDDEN))?true:false;
-    }
-
-    /** Returns true if property value is set to unspecified.
-    */
-    bool IsPropertyValueUnspecified( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
-        return p->IsValueUnspecified();
-    }
-
-    /**
-        Disables (limit = true) or enables (limit = false) wxTextCtrl editor of
-        a property, if it is not the sole mean to edit the value.
-    */
-    void LimitPropertyEditing( wxPGPropArg id, bool limit = true );
-
-    /** If state is shown in it's grid, refresh it now.
-    */
-    virtual void RefreshGrid( wxPropertyGridPageState* state = NULL );
-
-#if wxPG_INCLUDE_ADVPROPS
-    /**
-        Initializes additional property editors (SpinCtrl etc.). Causes
-        references to most object files in the library, so calling this may
-        cause significant increase in executable size when linking with static
-        library.
-    */
-    static void RegisterAdditionalEditors();
-#else
-    static void RegisterAdditionalEditors() { }
-#endif
-
-    /** Replaces property with id with newly created property. For example,
-        this code replaces existing property named "Flags" with one that
-        will have different set of items:
-        @code
-            pg->ReplaceProperty("Flags",
-                wxFlagsProperty("Flags", wxPG_LABEL, newItems))
-        @endcode
-        For more info, see wxPropertyGrid::Insert.
-    */
-    wxPGProperty* ReplaceProperty( wxPGPropArg id, wxPGProperty* property );
-
-    /** @anchor propgridinterface_editablestate_flags
-
-        Flags for wxPropertyGridInterface::SaveEditableState() and
-        wxPropertyGridInterface::RestoreEditableState().
-    */
-    enum EditableStateFlags
-    {
-        /** Include selected property. */
-        SelectionState   = 0x01,
-        /** Include expanded/collapsed property information. */
-        ExpandedState    = 0x02,
-        /** Include scrolled position. */
-        ScrollPosState   = 0x04,
-        /** Include selected page information.
-            Only applies to wxPropertyGridManager. */
-        PageState        = 0x08,
-        /** Include splitter position. Stored for each page. */
-        SplitterPosState = 0x10,
-        /** Include description box size.
-            Only applies to wxPropertyGridManager. */
-        DescBoxState     = 0x20,
-
-        /**
-            Include all supported user editable state information.
-            This is usually the default value. */
-        AllStates        = SelectionState |
-                           ExpandedState |
-                           ScrollPosState |
-                           PageState |
-                           SplitterPosState |
-                           DescBoxState
-    };
-
-    /**
-        Restores user-editable state.
-
-        See also wxPropertyGridInterface::SaveEditableState().
-
-        @param src
-            String generated by SaveEditableState.
-
-        @param restoreStates
-            Which parts to restore from source string. See @ref
-            propgridinterface_editablestate_flags "list of editable state
-            flags".
-
-        @return
-            False if there was problem reading the string.
-
-        @remarks
-        If some parts of state (such as scrolled or splitter position) fail to
-        restore correctly, please make sure that you call this function after
-        wxPropertyGrid size has been set (this may sometimes be tricky when
-        sizers are used).
-    */
-    bool RestoreEditableState( const wxString& src,
-                               int restoreStates = AllStates );
-
-    /**
-        Used to acquire user-editable state (selected property, expanded
-        properties, scrolled position, splitter positions).
-
-        @param includedStates
-        Which parts of state to include. See @ref
-        propgridinterface_editablestate_flags "list of editable state flags".
-    */
-    wxString SaveEditableState( int includedStates = AllStates ) const;
-
-    /**
-        Lets user to set the strings listed in the choice dropdown of a
-        wxBoolProperty. Defaults are "True" and "False", so changing them to,
-        say, "Yes" and "No" may be useful in some less technical applications.
-    */
-    static void SetBoolChoices( const wxString& trueChoice,
-                                const wxString& falseChoice );
-
-    /** Sets an attribute for this property.
-        @param name
-            Text identifier of attribute. See @ref propgrid_property_attributes.
-        @param value
-            Value of attribute.
-        @param argFlags
-            Optional. Use wxPG_RECURSE to set the attribute to child properties
-            recursively.
-    */
-    void SetPropertyAttribute( wxPGPropArg id,
-                               const wxString& attrName,
-                               wxVariant value,
-                               long argFlags = 0 )
-    {
-        DoSetPropertyAttribute(id,attrName,value,argFlags);
-    }
-
-    /** Sets property attribute for all applicapple properties.
-        Be sure to use this method only after all properties have been
-        added to the grid.
-    */
-    void SetPropertyAttributeAll( const wxString& attrName, wxVariant value );
-
-    /**
-        Sets background colour of a property.
-
-        @param id
-            Property name or pointer.
-
-        @param colour
-            New background colour.
-
-        @param recursively
-            If True, child properties are affected recursively. Property
-            categories are skipped if this flag is used.
-    */
-    void SetPropertyBackgroundColour( wxPGPropArg id,
-                                      const wxColour& colour,
-                                      bool recursively = true );
-
-    /** Resets text and background colours of given property.
-    */
-    void SetPropertyColoursToDefault( wxPGPropArg id );
-
-    /**
-        Sets text colour of a property.
-
-        @param id
-            Property name or pointer.
-
-        @param colour
-            New background colour.
-
-        @param recursively
-            If True, child properties are affected recursively. Property
-            categories are skipped if this flag is used.
-    */
-    void SetPropertyTextColour( wxPGPropArg id,
-                                const wxColour& col,
-                                bool recursively = true );
-
-    /**
-        Returns background colour of first cell of a property.
-    */
-    wxColour GetPropertyBackgroundColour( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxColour())
-        return p->GetCell(0).GetBgCol();
-    }
-
-    /**
-        Returns text colour of first cell of a property.
-    */
-    wxColour GetPropertyTextColour( wxPGPropArg id ) const
-    {
-        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxColour())
-        return p->GetCell(0).GetFgCol();
-    }
-
-    /** Sets text, bitmap, and colours for given column's cell.
-
-        @remarks
-        - You can set label cell by setting column to 0.
-        - You can use wxPG_LABEL as text to use default text for column.
-    */
-    void SetPropertyCell( wxPGPropArg id,
-                          int column,
-                          const wxString& text = wxEmptyString,
-                          const wxBitmap& bitmap = wxNullBitmap,
-                          const wxColour& fgCol = wxNullColour,
-                          const wxColour& bgCol = wxNullColour );
-
-#ifndef SWIG
-    /** Sets client data (void*) of a property.
-        @remarks
-        This untyped client data has to be deleted manually.
-    */
-    void SetPropertyClientData( wxPGPropArg id, void* clientData )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        p->SetClientData(clientData);
-    }
-
-    /** Sets editor for a property.
-
-        @param editor
-        For builtin editors, use wxPGEditor_X, where X is builtin editor's
-        name (TextCtrl, Choice, etc. see wxPGEditor documentation for full
-        list).
-
-        For custom editors, use pointer you received from
-        wxPropertyGrid::RegisterEditorClass().
-    */
-    void SetPropertyEditor( wxPGPropArg id, const wxPGEditor* editor )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        wxCHECK_RET( editor, wxT("unknown/NULL editor") );
-        p->SetEditor(editor);
-        RefreshProperty(p);
-    }
-#endif
-
-    /** Sets editor control of a property. As editor argument, use
-        editor name string, such as "TextCtrl" or "Choice".
-    */
-    void SetPropertyEditor( wxPGPropArg id, const wxString& editorName )
-    {
-        SetPropertyEditor(id,GetEditorByName(editorName));
-    }
-
-    /** Sets label of a property.
-    */
-    void SetPropertyLabel( wxPGPropArg id, const wxString& newproplabel );
-
-    /**
-        Sets name of a property.
-
-        @param id
-            Name or pointer of property which name to change.
-
-        @param newName
-            New name for property.
-    */
-    void SetPropertyName( wxPGPropArg id, const wxString& newName )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        m_pState->DoSetPropertyName( p, newName );
-    }
-
-    /**
-        Sets property (and, recursively, its children) to have read-only value.
-        In other words, user cannot change the value in the editor, but they
-        can still copy it.
-        @remarks
-        This is mainly for use with textctrl editor. Not all other editors fully
-        support it.
-        @param flags
-        By default changes are applied recursively. Set this paramter
-        wxPG_DONT_RECURSE to prevent this.
-    */
-    void SetPropertyReadOnly( wxPGPropArg id,
-                              bool set = true,
-                              int flags = wxPG_RECURSE )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        if ( flags & wxPG_RECURSE )
-            p->SetFlagRecursively(wxPG_PROP_READONLY, set);
-        else
-            p->SetFlag(wxPG_PROP_READONLY);
-    }
-
-    /** Sets property's value to unspecified.
-        If it has children (it may be category), then the same thing is done to
-        them.
-    */
-    void SetPropertyValueUnspecified( wxPGPropArg id )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        wxVariant nullVariant;
-        SetPropVal(p, nullVariant);
-    }
-
-#ifndef SWIG
-    /** Sets various property values from a list of wxVariants. If property with
-        name is missing from the grid, new property is created under given
-        default category (or root if omitted).
-    */
-    void SetPropertyValues( const wxVariantList& list,
-                            wxPGPropArg defaultCategory = wxNullProperty )
-    {
-        wxPGProperty *p;
-        if ( defaultCategory.HasName() ) p = defaultCategory.GetPtr(this);
-        else p = defaultCategory.GetPtr0();
-        m_pState->DoSetPropertyValues(list, p);
-    }
-
-    void SetPropertyValues( const wxVariant& list,
-                            wxPGPropArg defaultCategory = wxNullProperty )
-    {
-        SetPropertyValues(list.GetList(),defaultCategory);
-    }
-#endif
-
-    /** Associates the help string with property.
-        @remarks
-        By default, text is shown either in the manager's "description"
-        text box or in the status bar. If extra window style
-        wxPG_EX_HELP_AS_TOOLTIPS is used, then the text will appear as a
-        tooltip.
-    */
-    void SetPropertyHelpString( wxPGPropArg id, const wxString& helpString )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        p->SetHelpString(helpString);
-    }
-
-    /** Set wxBitmap in front of the value.
-        @remarks
-        - Bitmap will be scaled to a size returned by
-        wxPropertyGrid::GetImageSize();
-    */
-    void SetPropertyImage( wxPGPropArg id, wxBitmap& bmp )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        p->SetValueImage(bmp);
-        RefreshProperty(p);
-    }
-
-    /** Sets max length of property's text.
-    */
-    bool SetPropertyMaxLength( wxPGPropArg id, int maxLen );
-
-#if wxUSE_VALIDATORS
-    /** Sets validator of a property.
-    */
-    void SetPropertyValidator( wxPGPropArg id, const wxValidator& validator )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        p->SetValidator(validator);
-    }
-#endif
-
-#ifndef SWIG
-    /** Sets value (long integer) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, long value )
-    {
-        wxVariant v(value);
-        SetPropVal( id, v );
-    }
-
-    /** Sets value (integer) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, int value )
-    {
-        wxVariant v((long)value);
-        SetPropVal( id, v );
-    }
-    /** Sets value (floating point) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, double value )
-    {
-        wxVariant v(value);
-        SetPropVal( id, v );
-    }
-    /** Sets value (bool) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, bool value )
-    {
-        wxVariant v(value);
-        SetPropVal( id, v );
-    }
-#if wxUSE_WCHAR_T
-    void SetPropertyValue( wxPGPropArg id, const wchar_t* value )
-    {
-        SetPropertyValueString( id, wxString(value) );
-    }
-#endif
-    void SetPropertyValue( wxPGPropArg id, const char* value )
-    {
-        SetPropertyValueString( id, wxString(value) );
-    }
-    void SetPropertyValue( wxPGPropArg id, const wxString& value )
-    {
-        SetPropertyValueString( id, value );
-    }
-
-    /** Sets value (wxArrayString) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, const wxArrayString& value )
-    {
-        wxVariant v(value);
-        SetPropVal( id, v );
-    }
-
-#if wxUSE_DATETIME
-    void SetPropertyValue( wxPGPropArg id, const wxDateTime& value )
-    {
-        wxVariant v(value);
-        SetPropVal( id, v );
-    }
-#endif
-
-    /** Sets value (wxObject*) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, wxObject* value )
-    {
-        wxVariant v(value);
-        SetPropVal( id, v );
-    }
-
-    void SetPropertyValue( wxPGPropArg id, wxObject& value )
-    {
-        wxVariant v(&value);
-        SetPropVal( id, v );
-    }
-
-#if wxUSE_LONGLONG_NATIVE
-    /** Sets value (wxLongLong&) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, wxLongLong_t value )
-    {
-        wxVariant v = WXVARIANT(wxLongLong(value));
-        SetPropVal( id, v );
-    }
-    /** Sets value (wxULongLong&) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, wxULongLong_t value )
-    {
-        wxVariant v = WXVARIANT(wxULongLong(value));
-        SetPropVal( id, v );
-    }
-#endif
-
-    /** Sets value (wxArrayInt&) of a property.
-    */
-    void SetPropertyValue( wxPGPropArg id, const wxArrayInt& value )
-    {
-        wxVariant v = WXVARIANT(value);
-        SetPropVal( id, v );
-    }
-#endif  // !SWIG
-
-    /** Sets value (wxString) of a property.
-
-        @remarks
-        This method uses wxPGProperty::SetValueFromString, which all properties
-        should implement. This means that there should not be a type error,
-        and instead the string is converted to property's actual value type.
-    */
-    void SetPropertyValueString( wxPGPropArg id, const wxString& value );
-
-    /** Sets value (wxVariant&) of a property.
-
-        @remarks
-        Use wxPropertyGrid::ChangePropertyValue() instead if you need to run
-        through validation process and send property change event.
-    */
-    void SetPropertyValue( wxPGPropArg id, wxVariant value )
-    {
-        SetPropVal( id, value );
-    }
-
-#ifndef SWIG
-    /** Sets value (wxVariant&) of a property. Same as SetPropertyValue, but
-        accepts reference. */
-    void SetPropVal( wxPGPropArg id, wxVariant& value );
-#endif
-
-    /** Adjusts how wxPropertyGrid behaves when invalid value is entered
-        in a property.
-        @param vfbFlags
-        See @link vfbflags list of valid flags values@endlink
-    */
-    void SetValidationFailureBehavior( int vfbFlags );
-
-    /**
-        Sorts all properties recursively.
-
-        @param flags
-            This can contain any of the following options:
-              wxPG_SORT_TOP_LEVEL_ONLY: Only sort categories and their
-                immediate children. Sorting done by wxPG_AUTO_SORT option
-                uses this.
-
-        @see SortChildren, wxPropertyGrid::SetSortFunction
-    */
-    void Sort( int flags = 0 );
-
-    /**
-        Sorts children of a property.
-
-        @param id
-            Name or pointer to a property.
-
-        @param flags
-            This can contain any of the following options:
-              wxPG_RECURSE: Sorts recursively.
-
-        @see Sort, wxPropertyGrid::SetSortFunction
-    */
-    void SortChildren( wxPGPropArg id, int flags = 0 )
-    {
-        wxPG_PROP_ARG_CALL_PROLOG()
-        m_pState->DoSortChildren(p, flags);
-    }
-
-    // GetPropertyByName With nice assertion error message.
-    wxPGProperty* GetPropertyByNameA( const wxString& name ) const;
-
-    static wxPGEditor* GetEditorByName( const wxString& editorName );
-
-    virtual void RefreshProperty( wxPGProperty* p ) = 0;
-
-protected:
-    /**
-        In derived class, implement to set editable state component with
-        given name to given value.
-    */
-    virtual bool SetEditableStateItem( const wxString& name, wxVariant value )
-    {
-        wxUnusedVar(name);
-        wxUnusedVar(value);
-        return false;
-    }
-
-    /**
-        In derived class, implement to return editable state component with
-        given name.
-    */
-    virtual wxVariant GetEditableStateItem( const wxString& name ) const
-    {
-        wxUnusedVar(name);
-        return wxNullVariant;
-    }
-
-    // Returns page state data for given (sub) page (-1 means current page).
-    virtual wxPropertyGridPageState* GetPageState( int pageIndex ) const
-    {
-        if ( pageIndex <= 0 )
-            return m_pState;
-        return NULL;
-    }
-
-    virtual bool DoSelectPage( int WXUNUSED(index) ) { return true; }
-
-    // Default call's m_pState's BaseGetPropertyByName
-    virtual wxPGProperty* DoGetPropertyByName( const wxString& name ) const;
-
-#ifndef SWIG
-
-    // Deriving classes must set this (it must be only or current page).
-    wxPropertyGridPageState*         m_pState;
-
-    // Intermediate version needed due to wxVariant copying inefficiency
-    void DoSetPropertyAttribute( wxPGPropArg id,
-                                 const wxString& name,
-                                 wxVariant& value, long argFlags );
-
-    // Empty string object to return from member functions returning const
-    // wxString&.
-    wxString                    m_emptyString;
-
-private:
-    // Cannot be GetGrid() due to ambiguity issues.
-    wxPropertyGrid* GetPropertyGrid()
-    {
-        return m_pState->GetGrid();
-    }
-
-    // Cannot be GetGrid() due to ambiguity issues.
-    const wxPropertyGrid* GetPropertyGrid() const
-    {
-        return (const wxPropertyGrid*) m_pState->GetGrid();
-    }
-#endif // #ifndef SWIG
-
-    friend class wxPropertyGrid;
-    friend class wxPropertyGridManager;
-};
-
-#endif // wxUSE_PROPGRID
-
-#endif // __WX_PROPGRID_PROPGRIDIFACE_H__
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgeid/propgridiface.h
+// Purpose:     wxPropertyGridInterface class
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2008-08-24
+// RCS-ID:      $Id: propgridiface.h 60793 2009-05-29 16:04:22Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __WX_PROPGRID_PROPGRIDIFACE_H__
+#define __WX_PROPGRID_PROPGRIDIFACE_H__
+
+#if wxUSE_PROPGRID
+
+#include "wx/propgrid/property.h"
+#include "wx/propgrid/propgridpagestate.h"
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+/** @section wxPGPropArgCls
+
+    Most property grid functions have this type as their argument, as it can
+    convey a property by either a pointer or name.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGPropArgCls
+{
+public:
+    wxPGPropArgCls() { }
+    wxPGPropArgCls( const wxPGProperty* property )
+    {
+        m_ptr.property = (wxPGProperty*) property;
+        m_flags = IsProperty;
+    }
+    wxPGPropArgCls( const wxString& str )
+    {
+        m_ptr.stringName = &str;
+        m_flags = IsWxString;
+    }
+    wxPGPropArgCls( const wxPGPropArgCls& id )
+    {
+        m_ptr = id.m_ptr;
+        m_flags = id.m_flags;
+    }
+    // This is only needed for wxPython bindings
+    wxPGPropArgCls( wxString* str, bool WXUNUSED(deallocPtr) )
+    {
+        m_ptr.stringName = str;
+        m_flags = IsWxString | OwnsWxString;
+    }
+    ~wxPGPropArgCls()
+    {
+        if ( m_flags & OwnsWxString )
+            delete m_ptr.stringName;
+    }
+    wxPGProperty* GetPtr() const
+    {
+        wxCHECK( m_flags == IsProperty, NULL );
+        return m_ptr.property;
+    }
+    wxPGPropArgCls( const char* str )
+    {
+        m_ptr.charName = str;
+        m_flags = IsCharPtr;
+    }
+#if wxUSE_WCHAR_T
+    wxPGPropArgCls( const wchar_t* str )
+    {
+        m_ptr.wcharName = str;
+        m_flags = IsWCharPtr;
+    }
+#endif
+    /** This constructor is required for NULL. */
+    wxPGPropArgCls( int )
+    {
+        m_ptr.property = NULL;
+        m_flags = IsProperty;
+    }
+    wxPGProperty* GetPtr( wxPropertyGridInterface* iface ) const;
+    wxPGProperty* GetPtr( const wxPropertyGridInterface* iface ) const
+    {
+        return GetPtr((wxPropertyGridInterface*)iface);
+    }
+    wxPGProperty* GetPtr0() const { return m_ptr.property; }
+    bool HasName() const { return (m_flags != IsProperty); }
+    const wxString& GetName() const { return *m_ptr.stringName; }
+private:
+
+    enum
+    {
+        IsProperty      = 0x00,
+        IsWxString      = 0x01,
+        IsCharPtr       = 0x02,
+        IsWCharPtr      = 0x04,
+        OwnsWxString    = 0x10
+    };
+
+    union
+    {
+        wxPGProperty* property;
+        const char* charName;
+#if wxUSE_WCHAR_T
+        const wchar_t* wcharName;
+#endif
+        const wxString* stringName;
+    } m_ptr;
+    unsigned char m_flags;
+};
+
+#endif
+
+typedef const wxPGPropArgCls& wxPGPropArg;
+
+// -----------------------------------------------------------------------
+
+WXDLLIMPEXP_PROPGRID
+void wxPGTypeOperationFailed( const wxPGProperty* p,
+                              const wxString& typestr,
+                              const wxString& op );
+WXDLLIMPEXP_PROPGRID
+void wxPGGetFailed( const wxPGProperty* p, const wxString& typestr );
+
+// -----------------------------------------------------------------------
+
+// Helper macro that does necessary preparations when calling
+// some wxPGProperty's member function.
+#define wxPG_PROP_ARG_CALL_PROLOG_0(PROPERTY) \
+    PROPERTY *p = (PROPERTY*)id.GetPtr(this); \
+    if ( !p ) return;
+
+#define wxPG_PROP_ARG_CALL_PROLOG_RETVAL_0(PROPERTY, RETVAL) \
+    PROPERTY *p = (PROPERTY*)id.GetPtr(this); \
+    if ( !p ) return RETVAL;
+
+#define wxPG_PROP_ARG_CALL_PROLOG() \
+    wxPG_PROP_ARG_CALL_PROLOG_0(wxPGProperty)
+
+#define wxPG_PROP_ARG_CALL_PROLOG_RETVAL(RVAL) \
+    wxPG_PROP_ARG_CALL_PROLOG_RETVAL_0(wxPGProperty, RVAL)
+
+#define wxPG_PROP_ID_CONST_CALL_PROLOG() \
+    wxPG_PROP_ARG_CALL_PROLOG_0(const wxPGProperty)
+
+#define wxPG_PROP_ID_CONST_CALL_PROLOG_RETVAL(RVAL) \
+    wxPG_PROP_ARG_CALL_PROLOG_RETVAL_0(const wxPGProperty, RVAL)
+
+// -----------------------------------------------------------------------
+
+
+/** @class wxPropertyGridInterface
+
+    Most of the shared property manipulation interface shared by wxPropertyGrid,
+    wxPropertyGridPage, and wxPropertyGridManager is defined in this class.
+
+    @remarks
+    - In separate wxPropertyGrid component this class was known as
+    wxPropertyContainerMethods.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPropertyGridInterface
+{
+public:
+
+    /** Destructor */
+    virtual ~wxPropertyGridInterface() { }
+
+    /**
+        Appends property to the list.
+
+        wxPropertyGrid assumes ownership of the object.
+        Becomes child of most recently added category.
+        @remarks
+        - wxPropertyGrid takes the ownership of the property pointer.
+        - If appending a category with name identical to a category already in
+          the wxPropertyGrid, then newly created category is deleted, and most
+          recently added category (under which properties are appended) is set
+          to the one with same name. This allows easier adding of items to same
+          categories in multiple passes.
+        - Does not automatically redraw the control, so you may need to call
+          Refresh when calling this function after control has been shown for
+          the first time.
+    */
+    wxPGProperty* Append( wxPGProperty* property );
+
+    wxPGProperty* AppendIn( wxPGPropArg id, wxPGProperty* newproperty );
+
+    /**
+        In order to add new items into a property with fixed children (for
+        instance, wxFlagsProperty), you need to call this method. After
+        populating has been finished, you need to call EndAddChildren.
+    */
+    void BeginAddChildren( wxPGPropArg id );
+
+    /** Deletes all properties.
+    */
+    virtual void Clear() = 0;
+
+    /**
+        Clears current selection, if any.
+
+        @param validation
+            If set to @false, deselecting the property will always work,
+            even if its editor had invalid value in it.
+
+        @return Returns @true if successful or if there was no selection. May
+                fail if validation was enabled and active editor had invalid
+                value.
+    */
+    bool ClearSelection( bool validation = false);
+
+    /** Resets modified status of all properties.
+    */
+    void ClearModifiedStatus();
+
+    /** Collapses given category or property with children.
+        Returns true if actually collapses.
+    */
+    bool Collapse( wxPGPropArg id );
+
+    /** Collapses all items that can be collapsed.
+
+        @return
+        Return false if failed (may fail if editor value cannot be validated).
+    */
+    bool CollapseAll() { return ExpandAll(false); }
+
+    /**
+        Changes value of a property, as if from an editor.
+        Use this instead of SetPropertyValue() if you need the value to run
+        through validation process, and also send the property change event.
+
+        @return
+        Returns true if value was successfully changed.
+    */
+    bool ChangePropertyValue( wxPGPropArg id, wxVariant newValue );
+
+    /**
+        Deletes a property by id. If category is deleted, all children are
+        automatically deleted as well.
+     */
+    void DeleteProperty( wxPGPropArg id );
+
+    /**
+        Removes and returns a property.
+
+        @param id
+            Pointer or name of a property.
+
+        @remarks Removed property cannot have any children.
+    */
+    wxPGProperty* RemoveProperty( wxPGPropArg id );
+
+    /** Disables property. */
+    bool DisableProperty( wxPGPropArg id ) { return EnableProperty(id,false); }
+
+    /**
+        Returns true if all property grid data changes have been committed.
+
+        Usually only returns false if value in active editor has been
+        invalidated by a wxValidator.
+    */
+    bool EditorValidate();
+
+    /**
+        Enables or disables property, depending on whether enable is true or
+        false.
+     */
+    bool EnableProperty( wxPGPropArg id, bool enable = true );
+
+    /** Called after population of property with fixed children has finished.
+    */
+    void EndAddChildren( wxPGPropArg id );
+
+    /** Expands given category or property with children.
+        Returns true if actually expands.
+    */
+    bool Expand( wxPGPropArg id );
+
+    /** Expands all items that can be expanded.
+    */
+    bool ExpandAll( bool expand = true );
+
+    /** Returns id of first child of given property.
+        @remarks
+        Does not return sub-properties!
+    */
+    wxPGProperty* GetFirstChild( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxNullProperty)
+
+        if ( !p->GetChildCount() || p->HasFlag(wxPG_PROP_AGGREGATE) )
+            return wxNullProperty;
+
+        return p->Item(0);
+    }
+
+    //@{
+    /** Returns iterator class instance.
+        @param flags
+        See @ref propgrid_iterator_flags. Value wxPG_ITERATE_DEFAULT causes
+        iteration over everything except private child properties.
+        @param firstProp
+            Property to start iteration from. If NULL, then first child of root
+            is used.
+        @param startPos
+            Either wxTOP or wxBOTTOM. wxTOP will indicate that iterations start
+            from the first property from the top, and wxBOTTOM means that the
+            iteration will instead begin from bottommost valid item.
+    */
+    wxPropertyGridIterator GetIterator( int flags = wxPG_ITERATE_DEFAULT,
+                                        wxPGProperty* firstProp = NULL )
+    {
+        return wxPropertyGridIterator( m_pState, flags, firstProp );
+    }
+
+    wxPropertyGridConstIterator
+    GetIterator( int flags = wxPG_ITERATE_DEFAULT,
+                 wxPGProperty* firstProp = NULL ) const
+    {
+        return wxPropertyGridConstIterator( m_pState, flags, firstProp );
+    }
+
+    wxPropertyGridIterator GetIterator( int flags, int startPos )
+    {
+        return wxPropertyGridIterator( m_pState, flags, startPos );
+    }
+
+    wxPropertyGridConstIterator GetIterator( int flags, int startPos ) const
+    {
+        return wxPropertyGridConstIterator( m_pState, flags, startPos );
+    }
+    //@}
+
+    /** Returns id of first item, whether it is a category or property.
+        @param flags
+        @link iteratorflags List of iterator flags@endlink
+    */
+    wxPGProperty* GetFirst( int flags = wxPG_ITERATE_ALL )
+    {
+        wxPropertyGridIterator it( m_pState, flags, wxNullProperty, 1 );
+        return *it;
+    }
+
+    const wxPGProperty* GetFirst( int flags = wxPG_ITERATE_ALL ) const
+    {
+        return ((wxPropertyGridInterface*)this)->GetFirst(flags);
+    }
+
+    /**
+        Returns pointer to a property with given name (case-sensitive).
+        If there is no property with such name, @NULL pointer is returned.
+
+        @remarks Properties which have non-category, non-root parent
+                 can not be accessed globally by their name. Instead, use
+                 "<property>.<subproperty>" instead of "<subproperty>".
+    */
+    wxPGProperty* GetProperty( const wxString& name ) const
+    {
+        return GetPropertyByName(name);
+    }
+
+    /** Returns map-like storage of property's attributes.
+        @remarks
+        Note that if extra style wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES is set,
+        then builtin-attributes are not included in the storage.
+    */
+    const wxPGAttributeStorage& GetPropertyAttributes( wxPGPropArg id ) const
+    {
+        // If 'id' refers to invalid property, then we will return dummy
+        // attributes (ie. root property's attributes, which contents should
+        // should always be empty and of no consequence).
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(m_pState->DoGetRoot()->GetAttributes());
+        return p->GetAttributes();
+    }
+
+    /** Adds to 'targetArr' pointers to properties that have given
+        flags 'flags' set. However, if 'inverse' is set to true, then
+        only properties without given flags are stored.
+        @param flags
+        Property flags to use.
+        @param iterFlags
+        Iterator flags to use. Default is everything expect private children.
+    */
+    void GetPropertiesWithFlag( wxArrayPGProperty* targetArr,
+                                wxPGProperty::FlagType flags,
+                                bool inverse = false,
+                                int iterFlags = wxPG_ITERATE_PROPERTIES |
+                                                wxPG_ITERATE_HIDDEN |
+                                                wxPG_ITERATE_CATEGORIES) const;
+
+    /** Returns value of given attribute. If none found, returns NULL-variant.
+    */
+    wxVariant GetPropertyAttribute( wxPGPropArg id,
+                                    const wxString& attrName ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxNullVariant)
+        return p->GetAttribute(attrName);
+    }
+
+    /** Returns pointer of property's nearest parent category. If no category
+        found, returns NULL.
+    */
+    wxPropertyCategory* GetPropertyCategory( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ID_CONST_CALL_PROLOG_RETVAL(NULL)
+        return m_pState->GetPropertyCategory(p);
+    }
+
+#ifndef SWIG
+    /** Returns client data (void*) of a property. */
+    void* GetPropertyClientData( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
+        return p->GetClientData();
+    }
+#endif
+
+    /**
+        Returns first property which label matches given string.
+
+        NULL if none found. Note that this operation is extremely slow when
+        compared to GetPropertyByName().
+    */
+    wxPGProperty* GetPropertyByLabel( const wxString& label ) const;
+
+    /** Returns property with given name. NULL if none found.
+    */
+    wxPGProperty* GetPropertyByName( const wxString& name ) const;
+
+    /** Returns child property 'subname' of property 'name'. Same as
+        calling GetPropertyByName("name.subname"), albeit slightly faster.
+    */
+    wxPGProperty* GetPropertyByName( const wxString& name,
+                                     const wxString& subname ) const;
+
+    /** Returns property's editor. */
+    const wxPGEditor* GetPropertyEditor( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
+        return p->GetEditorClass();
+    }
+
+    /** Returns help string associated with a property. */
+    wxString GetPropertyHelpString( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(m_emptyString)
+        return p->GetHelpString();
+    }
+
+    /** Returns property's custom value image (NULL of none). */
+    wxBitmap* GetPropertyImage( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
+        return p->GetValueImage();
+    }
+
+    /** Returns label of a property. */
+    const wxString& GetPropertyLabel( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(m_emptyString)
+        return p->GetLabel();
+    }
+
+    /** Returns name of a property, by which it is globally accessible. */
+    wxString GetPropertyName( wxPGProperty* property )
+    {
+        return property->GetName();
+    }
+
+    /** Returns parent item of a property. */
+    wxPGProperty* GetPropertyParent( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxNullProperty)
+        return p->GetParent();
+    }
+
+#if wxUSE_VALIDATORS
+    /** Returns validator of a property as a reference, which you
+        can pass to any number of SetPropertyValidator.
+    */
+    wxValidator* GetPropertyValidator( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(NULL)
+        return p->GetValidator();
+    }
+#endif
+
+    /** Returns value as wxVariant. To get wxObject pointer from it,
+        you will have to use WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) macro.
+
+        If property value is unspecified, Null variant is returned.
+    */
+    wxVariant GetPropertyValue( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxVariant())
+        return p->GetValue();
+    }
+
+    wxString GetPropertyValueAsString( wxPGPropArg id ) const;
+    long GetPropertyValueAsLong( wxPGPropArg id ) const;
+    unsigned long GetPropertyValueAsULong( wxPGPropArg id ) const
+    {
+        return (unsigned long) GetPropertyValueAsLong(id);
+    }
+#ifndef SWIG
+    int GetPropertyValueAsInt( wxPGPropArg id ) const
+        { return (int)GetPropertyValueAsLong(id); }
+#endif
+    bool GetPropertyValueAsBool( wxPGPropArg id ) const;
+    double GetPropertyValueAsDouble( wxPGPropArg id ) const;
+
+#define wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL(TYPENAME, DEFVAL) \
+    wxPG_PROP_ARG_CALL_PROLOG_RETVAL(DEFVAL) \
+    wxString typeName(wxS(TYPENAME)); \
+    wxVariant value = p->GetValue(); \
+    if ( value.GetType() != typeName ) \
+    { \
+        wxPGGetFailed(p, typeName); \
+        return DEFVAL; \
+    }
+
+#define wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL_WFALLBACK(TYPENAME, DEFVAL) \
+    wxPG_PROP_ARG_CALL_PROLOG_RETVAL(DEFVAL) \
+    wxVariant value = p->GetValue(); \
+    if ( value.GetType() != wxS(TYPENAME) ) \
+        return DEFVAL; \
+
+    wxArrayString GetPropertyValueAsArrayString( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL("arrstring",
+                                                   wxArrayString())
+        return value.GetArrayString();
+    }
+
+#if wxUSE_LONGLONG_NATIVE
+    wxLongLong_t GetPropertyValueAsLongLong( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL_WFALLBACK("wxLongLong",
+                                             (long) GetPropertyValueAsLong(id))
+        wxLongLong ll;
+        ll << value;
+        return ll.GetValue();
+    }
+
+    wxULongLong_t GetPropertyValueAsULongLong( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL_WFALLBACK("wxULongLong",
+                                    (unsigned long) GetPropertyValueAsULong(id))
+        wxULongLong ull;
+        ull << value;
+        return ull.GetValue();
+    }
+#endif
+
+    wxArrayInt GetPropertyValueAsArrayInt( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL("wxArrayInt",
+                                                   wxArrayInt())
+        wxArrayInt arr;
+        arr << value;
+        return arr;
+    }
+
+#if wxUSE_DATETIME
+    wxDateTime GetPropertyValueAsDateTime( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ID_GETPROPVAL_CALL_PROLOG_RETVAL("datetime",
+                                                   wxDateTime())
+        return value.GetDateTime();
+    }
+#endif
+
+#ifndef SWIG
+    /** Returns a wxVariant list containing wxVariant versions of all
+        property values. Order is not guaranteed.
+        @param flags
+        Use wxPG_KEEP_STRUCTURE to retain category structure; each sub
+        category will be its own wxVariantList of wxVariant.
+        Use wxPG_INC_ATTRIBUTES to include property attributes as well.
+        Each attribute will be stored as list variant named
+        "@@<propname>@@attr."
+        @remarks
+    */
+    wxVariant GetPropertyValues( const wxString& listname = wxEmptyString,
+        wxPGProperty* baseparent = NULL, long flags = 0 ) const
+    {
+        return m_pState->DoGetPropertyValues(listname, baseparent, flags);
+    }
+#endif
+
+    /** Returns currently selected property. */
+    wxPGProperty* GetSelection() const
+    {
+        return m_pState->GetSelection();
+    }
+
+#ifndef SWIG
+    wxPropertyGridPageState* GetState() const { return m_pState; }
+#endif
+
+    /** Similar to GetIterator(), but instead returns wxPGVIterator instance,
+        which can be useful for forward-iterating through arbitrary property
+        containers.
+
+        @param flags
+        See @ref propgrid_iterator_flags.
+    */
+    virtual wxPGVIterator GetVIterator( int flags ) const;
+
+    /** Hides or reveals a property.
+        @param hide
+            If true, hides property, otherwise reveals it.
+        @param flags
+            By default changes are applied recursively. Set this paramter
+            wxPG_DONT_RECURSE to prevent this.
+    */
+    bool HideProperty( wxPGPropArg id,
+                       bool hide = true,
+                       int flags = wxPG_RECURSE );
+
+#if wxPG_INCLUDE_ADVPROPS
+    /** Initializes *all* property types. Causes references to most object
+        files in the library, so calling this may cause significant increase
+        in executable size when linking with static library.
+    */
+    static void InitAllTypeHandlers();
+#else
+    static void InitAllTypeHandlers() { }
+#endif
+
+    //@{
+    /** Inserts property to the property container.
+
+        @param priorThis
+        New property is inserted just prior to this. Available only
+        in the first variant. There are two versions of this function
+        to allow this parameter to be either an id or name to
+        a property.
+
+        @param newproperty
+        Pointer to the inserted property. wxPropertyGrid will take
+        ownership of this object.
+
+        @param parent
+        New property is inserted under this category. Available only
+        in the second variant. There are two versions of this function
+        to allow this parameter to be either an id or name to
+        a property.
+
+        @param index
+        Index under category. Available only in the second variant.
+        If index is < 0, property is appended in category.
+
+        @return
+        Returns id for the property,
+
+        @remarks
+
+        - wxPropertyGrid takes the ownership of the property pointer.
+
+        - While Append may be faster way to add items, make note that when
+          both types of data storage (categoric and
+          non-categoric) are active, Insert becomes even more slow. This is
+          especially true if current mode is non-categoric.
+
+        Example of use:
+
+        @code
+
+            // append category
+            wxPGProperty* my_cat_id = propertygrid->Append(
+                new wxPropertyCategory("My Category") );
+
+            ...
+
+            // insert into category - using second variant
+            wxPGProperty* my_item_id_1 = propertygrid->Insert(
+                my_cat_id, 0, new wxStringProperty("My String 1") );
+
+            // insert before to first item - using first variant
+            wxPGProperty* my_item_id_2 = propertygrid->Insert(
+                my_item_id, new wxStringProperty("My String 2") );
+
+        @endcode
+
+    */
+    wxPGProperty* Insert( wxPGPropArg priorThis, wxPGProperty* newproperty );
+    wxPGProperty* Insert( wxPGPropArg parent,
+                          int index,
+                          wxPGProperty* newproperty );
+    //@}
+
+    /** Returns true if property is a category. */
+    bool IsPropertyCategory( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return p->IsCategory();
+    }
+
+    /** Returns true if property is enabled. */
+    bool IsPropertyEnabled( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return (!(p->GetFlags() & wxPG_PROP_DISABLED))?true:false;
+    }
+
+    /**
+        Returns true if given property is expanded.
+
+        Naturally, always returns false for properties that cannot be expanded.
+    */
+    bool IsPropertyExpanded( wxPGPropArg id ) const;
+
+    /**
+        Returns true if property has been modified after value set or modify
+        flag clear by software.
+    */
+    bool IsPropertyModified( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return ( (p->GetFlags() & wxPG_PROP_MODIFIED) ? true : false );
+    }
+
+    /**
+        Returns true if property is shown (ie hideproperty with true not
+        called for it).
+     */
+    bool IsPropertyShown( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return (!(p->GetFlags() & wxPG_PROP_HIDDEN))?true:false;
+    }
+
+    /** Returns true if property value is set to unspecified.
+    */
+    bool IsPropertyValueUnspecified( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(false)
+        return p->IsValueUnspecified();
+    }
+
+    /**
+        Disables (limit = true) or enables (limit = false) wxTextCtrl editor of
+        a property, if it is not the sole mean to edit the value.
+    */
+    void LimitPropertyEditing( wxPGPropArg id, bool limit = true );
+
+    /** If state is shown in it's grid, refresh it now.
+    */
+    virtual void RefreshGrid( wxPropertyGridPageState* state = NULL );
+
+#if wxPG_INCLUDE_ADVPROPS
+    /**
+        Initializes additional property editors (SpinCtrl etc.). Causes
+        references to most object files in the library, so calling this may
+        cause significant increase in executable size when linking with static
+        library.
+    */
+    static void RegisterAdditionalEditors();
+#else
+    static void RegisterAdditionalEditors() { }
+#endif
+
+    /** Replaces property with id with newly created property. For example,
+        this code replaces existing property named "Flags" with one that
+        will have different set of items:
+        @code
+            pg->ReplaceProperty("Flags",
+                wxFlagsProperty("Flags", wxPG_LABEL, newItems))
+        @endcode
+        For more info, see wxPropertyGrid::Insert.
+    */
+    wxPGProperty* ReplaceProperty( wxPGPropArg id, wxPGProperty* property );
+
+    /** @anchor propgridinterface_editablestate_flags
+
+        Flags for wxPropertyGridInterface::SaveEditableState() and
+        wxPropertyGridInterface::RestoreEditableState().
+    */
+    enum EditableStateFlags
+    {
+        /** Include selected property. */
+        SelectionState   = 0x01,
+        /** Include expanded/collapsed property information. */
+        ExpandedState    = 0x02,
+        /** Include scrolled position. */
+        ScrollPosState   = 0x04,
+        /** Include selected page information.
+            Only applies to wxPropertyGridManager. */
+        PageState        = 0x08,
+        /** Include splitter position. Stored for each page. */
+        SplitterPosState = 0x10,
+        /** Include description box size.
+            Only applies to wxPropertyGridManager. */
+        DescBoxState     = 0x20,
+
+        /**
+            Include all supported user editable state information.
+            This is usually the default value. */
+        AllStates        = SelectionState |
+                           ExpandedState |
+                           ScrollPosState |
+                           PageState |
+                           SplitterPosState |
+                           DescBoxState
+    };
+
+    /**
+        Restores user-editable state.
+
+        See also wxPropertyGridInterface::SaveEditableState().
+
+        @param src
+            String generated by SaveEditableState.
+
+        @param restoreStates
+            Which parts to restore from source string. See @ref
+            propgridinterface_editablestate_flags "list of editable state
+            flags".
+
+        @return
+            False if there was problem reading the string.
+
+        @remarks
+        If some parts of state (such as scrolled or splitter position) fail to
+        restore correctly, please make sure that you call this function after
+        wxPropertyGrid size has been set (this may sometimes be tricky when
+        sizers are used).
+    */
+    bool RestoreEditableState( const wxString& src,
+                               int restoreStates = AllStates );
+
+    /**
+        Used to acquire user-editable state (selected property, expanded
+        properties, scrolled position, splitter positions).
+
+        @param includedStates
+        Which parts of state to include. See @ref
+        propgridinterface_editablestate_flags "list of editable state flags".
+    */
+    wxString SaveEditableState( int includedStates = AllStates ) const;
+
+    /**
+        Lets user to set the strings listed in the choice dropdown of a
+        wxBoolProperty. Defaults are "True" and "False", so changing them to,
+        say, "Yes" and "No" may be useful in some less technical applications.
+    */
+    static void SetBoolChoices( const wxString& trueChoice,
+                                const wxString& falseChoice );
+
+    /** Sets an attribute for this property.
+        @param name
+            Text identifier of attribute. See @ref propgrid_property_attributes.
+        @param value
+            Value of attribute.
+        @param argFlags
+            Optional. Use wxPG_RECURSE to set the attribute to child properties
+            recursively.
+    */
+    void SetPropertyAttribute( wxPGPropArg id,
+                               const wxString& attrName,
+                               wxVariant value,
+                               long argFlags = 0 )
+    {
+        DoSetPropertyAttribute(id,attrName,value,argFlags);
+    }
+
+    /** Sets property attribute for all applicapple properties.
+        Be sure to use this method only after all properties have been
+        added to the grid.
+    */
+    void SetPropertyAttributeAll( const wxString& attrName, wxVariant value );
+
+    /**
+        Sets background colour of a property.
+
+        @param id
+            Property name or pointer.
+
+        @param colour
+            New background colour.
+
+        @param recursively
+            If True, child properties are affected recursively. Property
+            categories are skipped if this flag is used.
+    */
+    void SetPropertyBackgroundColour( wxPGPropArg id,
+                                      const wxColour& colour,
+                                      bool recursively = true );
+
+    /** Resets text and background colours of given property.
+    */
+    void SetPropertyColoursToDefault( wxPGPropArg id );
+
+    /**
+        Sets text colour of a property.
+
+        @param id
+            Property name or pointer.
+
+        @param colour
+            New background colour.
+
+        @param recursively
+            If True, child properties are affected recursively. Property
+            categories are skipped if this flag is used.
+    */
+    void SetPropertyTextColour( wxPGPropArg id,
+                                const wxColour& col,
+                                bool recursively = true );
+
+    /**
+        Returns background colour of first cell of a property.
+    */
+    wxColour GetPropertyBackgroundColour( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxColour())
+        return p->GetCell(0).GetBgCol();
+    }
+
+    /**
+        Returns text colour of first cell of a property.
+    */
+    wxColour GetPropertyTextColour( wxPGPropArg id ) const
+    {
+        wxPG_PROP_ARG_CALL_PROLOG_RETVAL(wxColour())
+        return p->GetCell(0).GetFgCol();
+    }
+
+    /** Sets text, bitmap, and colours for given column's cell.
+
+        @remarks
+        - You can set label cell by setting column to 0.
+        - You can use wxPG_LABEL as text to use default text for column.
+    */
+    void SetPropertyCell( wxPGPropArg id,
+                          int column,
+                          const wxString& text = wxEmptyString,
+                          const wxBitmap& bitmap = wxNullBitmap,
+                          const wxColour& fgCol = wxNullColour,
+                          const wxColour& bgCol = wxNullColour );
+
+#ifndef SWIG
+    /** Sets client data (void*) of a property.
+        @remarks
+        This untyped client data has to be deleted manually.
+    */
+    void SetPropertyClientData( wxPGPropArg id, void* clientData )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        p->SetClientData(clientData);
+    }
+
+    /** Sets editor for a property.
+
+        @param editor
+        For builtin editors, use wxPGEditor_X, where X is builtin editor's
+        name (TextCtrl, Choice, etc. see wxPGEditor documentation for full
+        list).
+
+        For custom editors, use pointer you received from
+        wxPropertyGrid::RegisterEditorClass().
+    */
+    void SetPropertyEditor( wxPGPropArg id, const wxPGEditor* editor )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        wxCHECK_RET( editor, wxT("unknown/NULL editor") );
+        p->SetEditor(editor);
+        RefreshProperty(p);
+    }
+#endif
+
+    /** Sets editor control of a property. As editor argument, use
+        editor name string, such as "TextCtrl" or "Choice".
+    */
+    void SetPropertyEditor( wxPGPropArg id, const wxString& editorName )
+    {
+        SetPropertyEditor(id,GetEditorByName(editorName));
+    }
+
+    /** Sets label of a property.
+    */
+    void SetPropertyLabel( wxPGPropArg id, const wxString& newproplabel );
+
+    /**
+        Sets name of a property.
+
+        @param id
+            Name or pointer of property which name to change.
+
+        @param newName
+            New name for property.
+    */
+    void SetPropertyName( wxPGPropArg id, const wxString& newName )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        m_pState->DoSetPropertyName( p, newName );
+    }
+
+    /**
+        Sets property (and, recursively, its children) to have read-only value.
+        In other words, user cannot change the value in the editor, but they
+        can still copy it.
+        @remarks
+        This is mainly for use with textctrl editor. Not all other editors fully
+        support it.
+        @param flags
+        By default changes are applied recursively. Set this paramter
+        wxPG_DONT_RECURSE to prevent this.
+    */
+    void SetPropertyReadOnly( wxPGPropArg id,
+                              bool set = true,
+                              int flags = wxPG_RECURSE )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        if ( flags & wxPG_RECURSE )
+            p->SetFlagRecursively(wxPG_PROP_READONLY, set);
+        else
+            p->SetFlag(wxPG_PROP_READONLY);
+    }
+
+    /** Sets property's value to unspecified.
+        If it has children (it may be category), then the same thing is done to
+        them.
+    */
+    void SetPropertyValueUnspecified( wxPGPropArg id )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        wxVariant nullVariant;
+        SetPropVal(p, nullVariant);
+    }
+
+#ifndef SWIG
+    /** Sets various property values from a list of wxVariants. If property with
+        name is missing from the grid, new property is created under given
+        default category (or root if omitted).
+    */
+    void SetPropertyValues( const wxVariantList& list,
+                            wxPGPropArg defaultCategory = wxNullProperty )
+    {
+        wxPGProperty *p;
+        if ( defaultCategory.HasName() ) p = defaultCategory.GetPtr(this);
+        else p = defaultCategory.GetPtr0();
+        m_pState->DoSetPropertyValues(list, p);
+    }
+
+    void SetPropertyValues( const wxVariant& list,
+                            wxPGPropArg defaultCategory = wxNullProperty )
+    {
+        SetPropertyValues(list.GetList(),defaultCategory);
+    }
+#endif
+
+    /** Associates the help string with property.
+        @remarks
+        By default, text is shown either in the manager's "description"
+        text box or in the status bar. If extra window style
+        wxPG_EX_HELP_AS_TOOLTIPS is used, then the text will appear as a
+        tooltip.
+    */
+    void SetPropertyHelpString( wxPGPropArg id, const wxString& helpString )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        p->SetHelpString(helpString);
+    }
+
+    /** Set wxBitmap in front of the value.
+        @remarks
+        - Bitmap will be scaled to a size returned by
+        wxPropertyGrid::GetImageSize();
+    */
+    void SetPropertyImage( wxPGPropArg id, wxBitmap& bmp )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        p->SetValueImage(bmp);
+        RefreshProperty(p);
+    }
+
+    /** Sets max length of property's text.
+    */
+    bool SetPropertyMaxLength( wxPGPropArg id, int maxLen );
+
+#if wxUSE_VALIDATORS
+    /** Sets validator of a property.
+    */
+    void SetPropertyValidator( wxPGPropArg id, const wxValidator& validator )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        p->SetValidator(validator);
+    }
+#endif
+
+#ifndef SWIG
+    /** Sets value (long integer) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, long value )
+    {
+        wxVariant v(value);
+        SetPropVal( id, v );
+    }
+
+    /** Sets value (integer) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, int value )
+    {
+        wxVariant v((long)value);
+        SetPropVal( id, v );
+    }
+    /** Sets value (floating point) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, double value )
+    {
+        wxVariant v(value);
+        SetPropVal( id, v );
+    }
+    /** Sets value (bool) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, bool value )
+    {
+        wxVariant v(value);
+        SetPropVal( id, v );
+    }
+#if wxUSE_WCHAR_T
+    void SetPropertyValue( wxPGPropArg id, const wchar_t* value )
+    {
+        SetPropertyValueString( id, wxString(value) );
+    }
+#endif
+    void SetPropertyValue( wxPGPropArg id, const char* value )
+    {
+        SetPropertyValueString( id, wxString(value) );
+    }
+    void SetPropertyValue( wxPGPropArg id, const wxString& value )
+    {
+        SetPropertyValueString( id, value );
+    }
+
+    /** Sets value (wxArrayString) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, const wxArrayString& value )
+    {
+        wxVariant v(value);
+        SetPropVal( id, v );
+    }
+
+#if wxUSE_DATETIME
+    void SetPropertyValue( wxPGPropArg id, const wxDateTime& value )
+    {
+        wxVariant v(value);
+        SetPropVal( id, v );
+    }
+#endif
+
+    /** Sets value (wxObject*) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, wxObject* value )
+    {
+        wxVariant v(value);
+        SetPropVal( id, v );
+    }
+
+    void SetPropertyValue( wxPGPropArg id, wxObject& value )
+    {
+        wxVariant v(&value);
+        SetPropVal( id, v );
+    }
+
+#if wxUSE_LONGLONG_NATIVE
+    /** Sets value (wxLongLong&) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, wxLongLong_t value )
+    {
+        wxVariant v = WXVARIANT(wxLongLong(value));
+        SetPropVal( id, v );
+    }
+    /** Sets value (wxULongLong&) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, wxULongLong_t value )
+    {
+        wxVariant v = WXVARIANT(wxULongLong(value));
+        SetPropVal( id, v );
+    }
+#endif
+
+    /** Sets value (wxArrayInt&) of a property.
+    */
+    void SetPropertyValue( wxPGPropArg id, const wxArrayInt& value )
+    {
+        wxVariant v = WXVARIANT(value);
+        SetPropVal( id, v );
+    }
+#endif  // !SWIG
+
+    /** Sets value (wxString) of a property.
+
+        @remarks
+        This method uses wxPGProperty::SetValueFromString, which all properties
+        should implement. This means that there should not be a type error,
+        and instead the string is converted to property's actual value type.
+    */
+    void SetPropertyValueString( wxPGPropArg id, const wxString& value );
+
+    /** Sets value (wxVariant&) of a property.
+
+        @remarks
+        Use wxPropertyGrid::ChangePropertyValue() instead if you need to run
+        through validation process and send property change event.
+    */
+    void SetPropertyValue( wxPGPropArg id, wxVariant value )
+    {
+        SetPropVal( id, value );
+    }
+
+#ifndef SWIG
+    /** Sets value (wxVariant&) of a property. Same as SetPropertyValue, but
+        accepts reference. */
+    void SetPropVal( wxPGPropArg id, wxVariant& value );
+#endif
+
+    /** Adjusts how wxPropertyGrid behaves when invalid value is entered
+        in a property.
+        @param vfbFlags
+        See @link vfbflags list of valid flags values@endlink
+    */
+    void SetValidationFailureBehavior( int vfbFlags );
+
+    /**
+        Sorts all properties recursively.
+
+        @param flags
+            This can contain any of the following options:
+              wxPG_SORT_TOP_LEVEL_ONLY: Only sort categories and their
+                immediate children. Sorting done by wxPG_AUTO_SORT option
+                uses this.
+
+        @see SortChildren, wxPropertyGrid::SetSortFunction
+    */
+    void Sort( int flags = 0 );
+
+    /**
+        Sorts children of a property.
+
+        @param id
+            Name or pointer to a property.
+
+        @param flags
+            This can contain any of the following options:
+              wxPG_RECURSE: Sorts recursively.
+
+        @see Sort, wxPropertyGrid::SetSortFunction
+    */
+    void SortChildren( wxPGPropArg id, int flags = 0 )
+    {
+        wxPG_PROP_ARG_CALL_PROLOG()
+        m_pState->DoSortChildren(p, flags);
+    }
+
+    // GetPropertyByName With nice assertion error message.
+    wxPGProperty* GetPropertyByNameA( const wxString& name ) const;
+
+    static wxPGEditor* GetEditorByName( const wxString& editorName );
+
+    virtual void RefreshProperty( wxPGProperty* p ) = 0;
+
+protected:
+    /**
+        In derived class, implement to set editable state component with
+        given name to given value.
+    */
+    virtual bool SetEditableStateItem( const wxString& name, wxVariant value )
+    {
+        wxUnusedVar(name);
+        wxUnusedVar(value);
+        return false;
+    }
+
+    /**
+        In derived class, implement to return editable state component with
+        given name.
+    */
+    virtual wxVariant GetEditableStateItem( const wxString& name ) const
+    {
+        wxUnusedVar(name);
+        return wxNullVariant;
+    }
+
+    // Returns page state data for given (sub) page (-1 means current page).
+    virtual wxPropertyGridPageState* GetPageState( int pageIndex ) const
+    {
+        if ( pageIndex <= 0 )
+            return m_pState;
+        return NULL;
+    }
+
+    virtual bool DoSelectPage( int WXUNUSED(index) ) { return true; }
+
+    // Default call's m_pState's BaseGetPropertyByName
+    virtual wxPGProperty* DoGetPropertyByName( const wxString& name ) const;
+
+#ifndef SWIG
+
+    // Deriving classes must set this (it must be only or current page).
+    wxPropertyGridPageState*         m_pState;
+
+    // Intermediate version needed due to wxVariant copying inefficiency
+    void DoSetPropertyAttribute( wxPGPropArg id,
+                                 const wxString& name,
+                                 wxVariant& value, long argFlags );
+
+    // Empty string object to return from member functions returning const
+    // wxString&.
+    wxString                    m_emptyString;
+
+private:
+    // Cannot be GetGrid() due to ambiguity issues.
+    wxPropertyGrid* GetPropertyGrid()
+    {
+        return m_pState->GetGrid();
+    }
+
+    // Cannot be GetGrid() due to ambiguity issues.
+    const wxPropertyGrid* GetPropertyGrid() const
+    {
+        return (const wxPropertyGrid*) m_pState->GetGrid();
+    }
+#endif // #ifndef SWIG
+
+    friend class wxPropertyGrid;
+    friend class wxPropertyGridManager;
+};
+
+#endif // wxUSE_PROPGRID
+
+#endif // __WX_PROPGRID_PROPGRIDIFACE_H__
Index: propgridpagestate.h
===================================================================
--- propgridpagestate.h	(revision 102)
+++ propgridpagestate.h	(working copy)
@@ -1,709 +1,709 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/propgridpagestate.h
-// Purpose:     wxPropertyGridPageState class
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2008-08-24
-// RCS-ID:      $Id: propgridpagestate.h 58884 2009-02-13 16:15:12Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_PROPGRIDPAGESTATE_H_
-#define _WX_PROPGRID_PROPGRIDPAGESTATE_H_
-
-#if wxUSE_PROPGRID
-
-#include "wx/propgrid/property.h"
-
-// -----------------------------------------------------------------------
-
-/** @section propgrid_hittestresult wxPropertyGridHitTestResult
-
-    A return value from wxPropertyGrid::HitTest(),
-    contains all you need to know about an arbitrary location on the grid.
-*/
-struct WXDLLIMPEXP_PROPGRID wxPropertyGridHitTestResult
-{
-    friend class wxPropertyGridPageState;
-public:
-
-    wxPGProperty* GetProperty() const { return property; }
-
-    /** Column. -1 for margin. */
-    int             column;
-
-    /** Index of splitter hit, -1 for none. */
-    int             splitter;
-
-    /** If splitter hit, offset to that */
-    int             splitterHitOffset;
-
-private:
-    /** Property. NULL if empty space below properties was hit */
-    wxPGProperty*   property;
-};
-
-// -----------------------------------------------------------------------
-
-#define wxPG_IT_CHILDREN(A)         ((A)<<16)
-
-/** @section propgrid_iterator_flags wxPropertyGridIterator Flags
-    @{
-
-    NOTES: At lower 16-bits, there are flags to check if item will be included.
-    At higher 16-bits, there are same flags, but to instead check if children
-    will be included.
-*/
-
-enum wxPG_ITERATOR_FLAGS
-{
-
-/**
-    Iterate through 'normal' property items (does not include children of
-    aggregate or hidden items by default).
-*/
-wxPG_ITERATE_PROPERTIES = wxPG_PROP_PROPERTY |
-                          wxPG_PROP_MISC_PARENT |
-                          wxPG_PROP_AGGREGATE |
-                          wxPG_PROP_COLLAPSED |
-                          wxPG_IT_CHILDREN(wxPG_PROP_MISC_PARENT) |
-                          wxPG_IT_CHILDREN(wxPG_PROP_CATEGORY),
-
-/** Iterate children of collapsed parents, and individual items that are hidden.
-*/
-wxPG_ITERATE_HIDDEN = wxPG_PROP_HIDDEN |
-                      wxPG_IT_CHILDREN(wxPG_PROP_COLLAPSED),
-
-/**
-    Iterate children of parent that is an aggregate property (ie has fixed
-    children).
-*/
-wxPG_ITERATE_FIXED_CHILDREN = wxPG_IT_CHILDREN(wxPG_PROP_AGGREGATE) |
-                              wxPG_ITERATE_PROPERTIES,
-
-/** Iterate categories.
-    Note that even without this flag, children of categories are still iterated
-    through.
-*/
-wxPG_ITERATE_CATEGORIES = wxPG_PROP_CATEGORY |
-                          wxPG_IT_CHILDREN(wxPG_PROP_CATEGORY) |
-                          wxPG_PROP_COLLAPSED,
-
-wxPG_ITERATE_ALL_PARENTS = wxPG_PROP_MISC_PARENT |
-                           wxPG_PROP_AGGREGATE |
-                           wxPG_PROP_CATEGORY,
-
-wxPG_ITERATE_ALL_PARENTS_RECURSIVELY = wxPG_ITERATE_ALL_PARENTS |
-                                       wxPG_IT_CHILDREN(
-                                                wxPG_ITERATE_ALL_PARENTS),
-
-wxPG_ITERATOR_FLAGS_ALL = wxPG_PROP_PROPERTY |
-                          wxPG_PROP_MISC_PARENT |
-                          wxPG_PROP_AGGREGATE |
-                          wxPG_PROP_HIDDEN |
-                          wxPG_PROP_CATEGORY |
-                          wxPG_PROP_COLLAPSED,
-
-wxPG_ITERATOR_MASK_OP_ITEM = wxPG_ITERATOR_FLAGS_ALL,
-
-// (wxPG_PROP_MISC_PARENT|wxPG_PROP_AGGREGATE|wxPG_PROP_CATEGORY)
-wxPG_ITERATOR_MASK_OP_PARENT = wxPG_ITERATOR_FLAGS_ALL,
-
-/** Combines all flags needed to iterate through visible properties
-    (ie hidden properties and children of collapsed parents are skipped).
-*/
-wxPG_ITERATE_VISIBLE = wxPG_ITERATE_PROPERTIES |
-                       wxPG_PROP_CATEGORY |
-                       wxPG_IT_CHILDREN(wxPG_PROP_AGGREGATE),
-
-/** Iterate all items.
-*/
-wxPG_ITERATE_ALL = wxPG_ITERATE_VISIBLE |
-                   wxPG_ITERATE_HIDDEN,
-
-/** Iterate through individual properties (ie categories and children of
-    aggregate properties are skipped).
-*/
-wxPG_ITERATE_NORMAL = wxPG_ITERATE_PROPERTIES |
-                      wxPG_ITERATE_HIDDEN,
-
-/** Default iterator flags.
-*/
-wxPG_ITERATE_DEFAULT = wxPG_ITERATE_NORMAL
-
-};
-
-/** @}
-*/
-
-
-#define wxPG_ITERATOR_CREATE_MASKS(FLAGS, A, B) \
-    A = (FLAGS ^ wxPG_ITERATOR_MASK_OP_ITEM) & \
-        wxPG_ITERATOR_MASK_OP_ITEM & 0xFFFF; \
-    B = ((FLAGS>>16) ^ wxPG_ITERATOR_MASK_OP_PARENT) & \
-        wxPG_ITERATOR_MASK_OP_PARENT & 0xFFFF;
-
-
-// Macro to test if children of PWC should be iterated through
-#define wxPG_ITERATOR_PARENTEXMASK_TEST(PWC, PARENTMASK) \
-        ( \
-        !(PWC->GetFlags() & PARENTMASK) && \
-        PWC->GetChildCount() \
-        )
-
-
-// Base for wxPropertyGridIterator classes.
-class WXDLLIMPEXP_PROPGRID wxPropertyGridIteratorBase
-{
-public:
-    wxPropertyGridIteratorBase()
-    {
-    }
-
-    void Assign( const wxPropertyGridIteratorBase& it );
-
-    bool AtEnd() const { return m_property == NULL; }
-
-    /** Get current property.
-    */
-    wxPGProperty* GetProperty() const { return m_property; }
-
-    void Init( wxPropertyGridPageState* state,
-               int flags,
-               wxPGProperty* property,
-               int dir = 1 );
-
-    void Init( wxPropertyGridPageState* state,
-               int flags,
-               int startPos = wxTOP,
-               int dir = 0 );
-
-    /** Iterate to the next property.
-    */
-    void Next( bool iterateChildren = true );
-
-    /** Iterate to the previous property.
-    */
-    void Prev();
-
-    /**
-        Set base parent, ie a property when, in which iteration returns, it
-        ends.
-
-        Default base parent is the root of the used wxPropertyGridPageState.
-    */
-    void SetBaseParent( wxPGProperty* baseParent )
-        { m_baseParent = baseParent; }
-
-protected:
-
-    wxPGProperty*               m_property;
-
-private:
-    wxPropertyGridPageState*        m_state;
-    wxPGProperty*               m_baseParent;
-
-    // Masks are used to quickly exclude items
-    int                         m_itemExMask;
-    int                         m_parentExMask;
-};
-
-
-#define wxPG_IMPLEMENT_ITERATOR(CLASS, PROPERTY, STATE) \
-    CLASS( STATE* state, int flags = wxPG_ITERATE_DEFAULT, \
-           PROPERTY* property = NULL, int dir = 1 ) \
-        : wxPropertyGridIteratorBase() \
-        { Init( (wxPropertyGridPageState*)state, flags, \
-                (wxPGProperty*)property, dir ); } \
-    CLASS( STATE* state, int flags, int startPos, int dir = 0 ) \
-        : wxPropertyGridIteratorBase() \
-        { Init( (wxPropertyGridPageState*)state, flags, startPos, dir ); } \
-    CLASS() \
-        : wxPropertyGridIteratorBase() \
-    { \
-        m_property = NULL; \
-    } \
-    CLASS( const CLASS& it ) \
-        : wxPropertyGridIteratorBase( ) \
-    { \
-        Assign(it); \
-    } \
-    ~CLASS() \
-    { \
-    } \
-    const CLASS& operator=( const CLASS& it ) \
-    { \
-        if (this != &it) \
-            Assign(it); \
-        return *this; \
-    } \
-    CLASS& operator++() { Next(); return *this; } \
-    CLASS operator++(int) { CLASS it=*this;Next();return it; } \
-    CLASS& operator--() { Prev(); return *this; } \
-    CLASS operator--(int) { CLASS it=*this;Prev();return it; } \
-    PROPERTY* operator *() const { return (PROPERTY*)m_property; } \
-    static PROPERTY* OneStep( STATE* state, \
-                              int flags = wxPG_ITERATE_DEFAULT, \
-                              PROPERTY* property = NULL, \
-                              int dir = 1 ) \
-    { \
-        CLASS it( state, flags, property, dir ); \
-        if ( property ) \
-        { \
-            if ( dir == 1 ) it.Next(); \
-            else it.Prev(); \
-        } \
-        return *it; \
-    }
-
-
-/** @class wxPropertyGridIterator
-
-    Preferable way to iterate through contents of wxPropertyGrid,
-    wxPropertyGridManager, and wxPropertyGridPage.
-
-    See wxPropertyGridInterface::GetIterator() for more information about usage.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID
-    wxPropertyGridIterator : public wxPropertyGridIteratorBase
-{
-public:
-
-    wxPG_IMPLEMENT_ITERATOR(wxPropertyGridIterator,
-                            wxPGProperty,
-                            wxPropertyGridPageState)
-
-protected:
-};
-
-
-// Const version of wxPropertyGridIterator.
-class WXDLLIMPEXP_PROPGRID
-    wxPropertyGridConstIterator : public wxPropertyGridIteratorBase
-{
-public:
-    wxPG_IMPLEMENT_ITERATOR(wxPropertyGridConstIterator,
-                            const wxPGProperty,
-                            const wxPropertyGridPageState)
-
-    /**
-        Additional copy constructor.
-    */
-    wxPropertyGridConstIterator( const wxPropertyGridIterator& other )
-    {
-        Assign(other);
-    }
-
-    /**
-        Additional assignment operator.
-    */
-    const wxPropertyGridConstIterator& operator=( const wxPropertyGridIterator& it )
-    {
-        Assign(it);
-        return *this;
-    }
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-/** Base class to derive new viterators.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGVIteratorBase
-{
-    friend class wxPGVIterator;
-public:
-    wxPGVIteratorBase() { m_refCount = 1; }
-    virtual void Next() = 0;
-    void IncRef()
-    {
-        m_refCount++;
-    }
-    void DecRef()
-    {
-        m_refCount--;
-        if ( m_refCount <= 0 )
-            delete this;
-    }
-protected:
-    virtual ~wxPGVIteratorBase() { }
-
-    wxPropertyGridIterator  m_it;
-private:
-    int     m_refCount;
-};
-
-/** @class wxPGVIterator
-
-    Abstract implementation of a simple iterator. Can only be used
-    to iterate in forward order, and only through the entire container.
-    Used to have functions dealing with all properties work with both
-    wxPropertyGrid and wxPropertyGridManager.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGVIterator
-{
-public:
-    wxPGVIterator() { m_pIt = NULL; }
-    wxPGVIterator( wxPGVIteratorBase* obj ) { m_pIt = obj; }
-    ~wxPGVIterator() { UnRef(); }
-    void UnRef() { if (m_pIt) m_pIt->DecRef(); }
-    wxPGVIterator( const wxPGVIterator& it )
-    {
-        m_pIt = it.m_pIt;
-        m_pIt->IncRef();
-    }
-#ifndef SWIG
-    const wxPGVIterator& operator=( const wxPGVIterator& it )
-    {
-        if (this != &it)
-        {
-            UnRef();
-            m_pIt = it.m_pIt;
-            m_pIt->IncRef();
-        }
-        return *this;
-    }
-#endif
-    void Next() { m_pIt->Next(); }
-    bool AtEnd() const { return m_pIt->m_it.AtEnd(); }
-    wxPGProperty* GetProperty() const { return m_pIt->m_it.GetProperty(); }
-protected:
-    wxPGVIteratorBase*  m_pIt;
-};
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-// We won't need this class from wxPython
-
-/** @class wxPropertyGridPageState
-
-    Contains low-level property page information (properties, column widths,
-    etc) of a single wxPropertyGrid or single wxPropertyGridPage. Generally you
-    should not use this class directly, but instead member functions in
-    wxPropertyGridInterface, wxPropertyGrid, wxPropertyGridPage, and
-    wxPropertyGridManager.
-
-    @remarks
-    - In separate wxPropertyGrid component this class was known as
-    wxPropertyGridState.
-    - Currently this class is not implemented in wxPython.
-
-    @library{wxpropgrid}
-    @category{propgrid}
-*/
-class WXDLLIMPEXP_PROPGRID wxPropertyGridPageState
-{
-    friend class wxPGProperty;
-    friend class wxPropertyGrid;
-    friend class wxPGCanvas;
-    friend class wxPropertyGridInterface;
-    friend class wxPropertyGridPage;
-    friend class wxPropertyGridManager;
-public:
-
-    /** Default constructor. */
-    wxPropertyGridPageState();
-
-    /** Destructor. */
-    virtual ~wxPropertyGridPageState();
-
-    /** Makes sure all columns have minimum width.
-    */
-    void CheckColumnWidths( int widthChange = 0 );
-
-    /**
-        Override this member function to add custom behavior on property
-        deletion.
-    */
-    virtual void DoDelete( wxPGProperty* item, bool doDelete = true );
-
-    wxSize DoFitColumns( bool allowGridResize = false );
-
-    wxPGProperty* DoGetItemAtY( int y ) const;
-
-    /**
-        Override this member function to add custom behavior on property
-        insertion.
-    */
-    virtual wxPGProperty* DoInsert( wxPGProperty* parent,
-                                    int index,
-                                    wxPGProperty* property );
-
-    /**
-        This needs to be overridden in grid used the manager so that splitter
-        changes can be propagated to other pages.
-    */
-    virtual void DoSetSplitterPosition( int pos,
-                                        int splitterColumn = 0,
-                                        bool allPages = false,
-                                        bool fromAutoCenter = false );
-
-    bool EnableCategories( bool enable );
-
-    /** Make sure virtual height is up-to-date.
-    */
-    void EnsureVirtualHeight()
-    {
-        if ( m_vhCalcPending )
-        {
-            RecalculateVirtualHeight();
-            m_vhCalcPending = 0;
-        }
-    }
-
-    /** Enables or disables given property and its subproperties. */
-    bool DoEnableProperty( wxPGProperty* p, bool enable );
-
-    /** Returns (precalculated) height of contained visible properties.
-    */
-    unsigned int GetVirtualHeight() const
-    {
-        wxASSERT( !m_vhCalcPending );
-        return m_virtualHeight;
-    }
-
-    /** Returns (precalculated) height of contained visible properties.
-    */
-    unsigned int GetVirtualHeight()
-    {
-        EnsureVirtualHeight();
-        return m_virtualHeight;
-    }
-
-    /** Returns actual height of contained visible properties.
-        @remarks
-        Mostly used for internal diagnostic purposes.
-    */
-    inline unsigned int GetActualVirtualHeight() const;
-
-    unsigned int GetColumnCount() const
-    {
-        return (unsigned int) m_colWidths.size();
-    }
-
-    wxPGProperty* GetSelection() const
-    {
-        return m_selected;
-    }
-
-    int GetColumnMinWidth( int column ) const;
-
-    int GetColumnWidth( unsigned int column ) const
-    {
-        return m_colWidths[column];
-    }
-
-    wxPropertyGrid* GetGrid() const { return m_pPropGrid; }
-
-    /** Returns last item which could be iterated using given flags.
-        @param flags
-        @link iteratorflags List of iterator flags@endlink
-    */
-    wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT );
-
-    const wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT ) const
-    {
-        return ((wxPropertyGridPageState*)this)->GetLastItem(flags);
-    }
-
-    wxPropertyCategory* GetPropertyCategory( const wxPGProperty* p ) const;
-
-    wxPGProperty* GetPropertyByLabel( const wxString& name,
-                                      wxPGProperty* parent = NULL ) const;
-
-    wxVariant DoGetPropertyValues( const wxString& listname,
-                                   wxPGProperty* baseparent,
-                                   long flags ) const;
-
-    wxPGProperty* DoGetRoot() const { return m_properties; }
-
-    void DoSetPropertyName( wxPGProperty* p, const wxString& newName );
-
-    // Returns combined width of margin and all the columns
-    int GetVirtualWidth() const
-    {
-        return m_width;
-    }
-
-    /**
-        Returns minimal width for given column so that all images and texts
-        will fit entirely.
-
-        Used by SetSplitterLeft() and DoFitColumns().
-    */
-    int GetColumnFitWidth(wxClientDC& dc,
-                          wxPGProperty* pwc,
-                          unsigned int col,
-                          bool subProps) const;
-
-    /**
-        Returns information about arbitrary position in the grid.
-
-        @param pt
-            Logical coordinates in the virtual grid space. Use
-            wxScrolledWindow::CalcUnscrolledPosition() if you need to
-            translate a scrolled position into a logical one.
-    */
-    wxPropertyGridHitTestResult HitTest( const wxPoint& pt ) const;
-
-    /** Returns true if page is visibly displayed.
-    */
-    inline bool IsDisplayed() const;
-
-    bool IsInNonCatMode() const { return (bool)(m_properties == m_abcArray); }
-
-    void DoLimitPropertyEditing( wxPGProperty* p, bool limit = true )
-    {
-        p->SetFlagRecursively(wxPG_PROP_NOEDITOR, limit);
-    }
-
-    bool DoSelectProperty( wxPGProperty* p, unsigned int flags = 0 );
-
-    /** widthChange is non-client.
-    */
-    void OnClientWidthChange( int newWidth,
-                              int widthChange,
-                              bool fromOnResize = false );
-
-    /** Recalculates m_virtualHeight.
-    */
-    void RecalculateVirtualHeight()
-    {
-        m_virtualHeight = GetActualVirtualHeight();
-    }
-
-    void SetColumnCount( int colCount );
-
-    void PropagateColSizeDec( int column, int decrease, int dir );
-
-    bool DoHideProperty( wxPGProperty* p, bool hide, int flags = wxPG_RECURSE );
-
-    bool DoSetPropertyValueString( wxPGProperty* p, const wxString& value );
-
-    bool DoSetPropertyValue( wxPGProperty* p, wxVariant& value );
-
-    bool DoSetPropertyValueWxObjectPtr( wxPGProperty* p, wxObject* value );
-    void DoSetPropertyValues( const wxVariantList& list,
-                              wxPGProperty* default_category );
-
-    void SetSplitterLeft( bool subProps = false );
-
-    /** Set virtual width for this particular page. */
-    void SetVirtualWidth( int width );
-
-    void DoSortChildren( wxPGProperty* p, int flags = 0 );
-    void DoSort( int flags = 0 );
-
-    bool PrepareAfterItemsAdded();
-
-    void SetSelection( wxPGProperty* p ) { m_selected = p; }
-
-    /** Called after virtual height needs to be recalculated.
-    */
-    void VirtualHeightChanged()
-    {
-        m_vhCalcPending = 1;
-    }
-
-    /** Base append. */
-    wxPGProperty* DoAppend( wxPGProperty* property );
-
-    /** Returns property by its name. */
-    wxPGProperty* BaseGetPropertyByName( const wxString& name ) const;
-
-    void DoClearSelection()
-    {
-        m_selected = NULL;
-    }
-
-    /** Called in, for example, wxPropertyGrid::Clear. */
-    void DoClear();
-
-    bool DoCollapse( wxPGProperty* p );
-
-    bool DoExpand( wxPGProperty* p );
-
-    void CalculateFontAndBitmapStuff( int vspacing );
-
-protected:
-
-    int DoGetSplitterPosition( int splitterIndex = 0 ) const;
-
-    /** Returns column at x coordinate (in GetGrid()->GetPanel()).
-        @param pSplitterHit
-        Give pointer to int that receives index to splitter that is at x.
-        @param pSplitterHitOffset
-        Distance from said splitter.
-    */
-    int HitTestH( int x, int* pSplitterHit, int* pSplitterHitOffset ) const;
-
-    bool PrepareToAddItem( wxPGProperty* property,
-                           wxPGProperty* scheduledParent );
-
-    /** If visible, then this is pointer to wxPropertyGrid.
-        This shall *never* be NULL to indicate that this state is not visible.
-    */
-    wxPropertyGrid*             m_pPropGrid;
-
-    /** Pointer to currently used array. */
-    wxPGProperty*               m_properties;
-
-    /** Array for categoric mode. */
-    wxPGRootProperty            m_regularArray;
-
-    /** Array for root of non-categoric mode. */
-    wxPGRootProperty*           m_abcArray;
-
-    /** Dictionary for name-based access. */
-    wxPGHashMapS2P              m_dictName;
-
-    /** List of column widths (first column does not include margin). */
-    wxArrayInt                  m_colWidths;
-
-    double                      m_fSplitterX;
-
-    /** Most recently added category. */
-    wxPropertyCategory*         m_currentCategory;
-
-    /** Pointer to selected property. */
-    wxPGProperty*               m_selected;
-
-    /** Virtual width. */
-    int                         m_width;
-
-    /** Indicates total virtual height of visible properties. */
-    unsigned int                m_virtualHeight;
-
-    /** 1 if m_lastCaption is also the bottommost caption. */
-    unsigned char               m_lastCaptionBottomnest;
-
-    /** 1 items appended/inserted, so stuff needs to be done before drawing;
-        If m_virtualHeight == 0, then calcylatey's must be done.
-        Otherwise just sort.
-    */
-    unsigned char               m_itemsAdded;
-
-    /** 1 if any value is modified. */
-    unsigned char               m_anyModified;
-
-    unsigned char               m_vhCalcPending;
-
-private:
-    /** Only inits arrays, doesn't migrate things or such. */
-    void InitNonCatMode();
-};
-
-#endif // #ifndef SWIG
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_PROPGRIDPAGESTATE_H_
-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/propgridpagestate.h
+// Purpose:     wxPropertyGridPageState class
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2008-08-24
+// RCS-ID:      $Id: propgridpagestate.h 58884 2009-02-13 16:15:12Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_PROPGRIDPAGESTATE_H_
+#define _WX_PROPGRID_PROPGRIDPAGESTATE_H_
+
+#if wxUSE_PROPGRID
+
+#include "wx/propgrid/property.h"
+
+// -----------------------------------------------------------------------
+
+/** @section propgrid_hittestresult wxPropertyGridHitTestResult
+
+    A return value from wxPropertyGrid::HitTest(),
+    contains all you need to know about an arbitrary location on the grid.
+*/
+struct WXDLLIMPEXP_PROPGRID wxPropertyGridHitTestResult
+{
+    friend class wxPropertyGridPageState;
+public:
+
+    wxPGProperty* GetProperty() const { return property; }
+
+    /** Column. -1 for margin. */
+    int             column;
+
+    /** Index of splitter hit, -1 for none. */
+    int             splitter;
+
+    /** If splitter hit, offset to that */
+    int             splitterHitOffset;
+
+private:
+    /** Property. NULL if empty space below properties was hit */
+    wxPGProperty*   property;
+};
+
+// -----------------------------------------------------------------------
+
+#define wxPG_IT_CHILDREN(A)         ((A)<<16)
+
+/** @section propgrid_iterator_flags wxPropertyGridIterator Flags
+    @{
+
+    NOTES: At lower 16-bits, there are flags to check if item will be included.
+    At higher 16-bits, there are same flags, but to instead check if children
+    will be included.
+*/
+
+enum wxPG_ITERATOR_FLAGS
+{
+
+/**
+    Iterate through 'normal' property items (does not include children of
+    aggregate or hidden items by default).
+*/
+wxPG_ITERATE_PROPERTIES = wxPG_PROP_PROPERTY |
+                          wxPG_PROP_MISC_PARENT |
+                          wxPG_PROP_AGGREGATE |
+                          wxPG_PROP_COLLAPSED |
+                          wxPG_IT_CHILDREN(wxPG_PROP_MISC_PARENT) |
+                          wxPG_IT_CHILDREN(wxPG_PROP_CATEGORY),
+
+/** Iterate children of collapsed parents, and individual items that are hidden.
+*/
+wxPG_ITERATE_HIDDEN = wxPG_PROP_HIDDEN |
+                      wxPG_IT_CHILDREN(wxPG_PROP_COLLAPSED),
+
+/**
+    Iterate children of parent that is an aggregate property (ie has fixed
+    children).
+*/
+wxPG_ITERATE_FIXED_CHILDREN = wxPG_IT_CHILDREN(wxPG_PROP_AGGREGATE) |
+                              wxPG_ITERATE_PROPERTIES,
+
+/** Iterate categories.
+    Note that even without this flag, children of categories are still iterated
+    through.
+*/
+wxPG_ITERATE_CATEGORIES = wxPG_PROP_CATEGORY |
+                          wxPG_IT_CHILDREN(wxPG_PROP_CATEGORY) |
+                          wxPG_PROP_COLLAPSED,
+
+wxPG_ITERATE_ALL_PARENTS = wxPG_PROP_MISC_PARENT |
+                           wxPG_PROP_AGGREGATE |
+                           wxPG_PROP_CATEGORY,
+
+wxPG_ITERATE_ALL_PARENTS_RECURSIVELY = wxPG_ITERATE_ALL_PARENTS |
+                                       wxPG_IT_CHILDREN(
+                                                wxPG_ITERATE_ALL_PARENTS),
+
+wxPG_ITERATOR_FLAGS_ALL = wxPG_PROP_PROPERTY |
+                          wxPG_PROP_MISC_PARENT |
+                          wxPG_PROP_AGGREGATE |
+                          wxPG_PROP_HIDDEN |
+                          wxPG_PROP_CATEGORY |
+                          wxPG_PROP_COLLAPSED,
+
+wxPG_ITERATOR_MASK_OP_ITEM = wxPG_ITERATOR_FLAGS_ALL,
+
+// (wxPG_PROP_MISC_PARENT|wxPG_PROP_AGGREGATE|wxPG_PROP_CATEGORY)
+wxPG_ITERATOR_MASK_OP_PARENT = wxPG_ITERATOR_FLAGS_ALL,
+
+/** Combines all flags needed to iterate through visible properties
+    (ie hidden properties and children of collapsed parents are skipped).
+*/
+wxPG_ITERATE_VISIBLE = wxPG_ITERATE_PROPERTIES |
+                       wxPG_PROP_CATEGORY |
+                       wxPG_IT_CHILDREN(wxPG_PROP_AGGREGATE),
+
+/** Iterate all items.
+*/
+wxPG_ITERATE_ALL = wxPG_ITERATE_VISIBLE |
+                   wxPG_ITERATE_HIDDEN,
+
+/** Iterate through individual properties (ie categories and children of
+    aggregate properties are skipped).
+*/
+wxPG_ITERATE_NORMAL = wxPG_ITERATE_PROPERTIES |
+                      wxPG_ITERATE_HIDDEN,
+
+/** Default iterator flags.
+*/
+wxPG_ITERATE_DEFAULT = wxPG_ITERATE_NORMAL
+
+};
+
+/** @}
+*/
+
+
+#define wxPG_ITERATOR_CREATE_MASKS(FLAGS, A, B) \
+    A = (FLAGS ^ wxPG_ITERATOR_MASK_OP_ITEM) & \
+        wxPG_ITERATOR_MASK_OP_ITEM & 0xFFFF; \
+    B = ((FLAGS>>16) ^ wxPG_ITERATOR_MASK_OP_PARENT) & \
+        wxPG_ITERATOR_MASK_OP_PARENT & 0xFFFF;
+
+
+// Macro to test if children of PWC should be iterated through
+#define wxPG_ITERATOR_PARENTEXMASK_TEST(PWC, PARENTMASK) \
+        ( \
+        !(PWC->GetFlags() & PARENTMASK) && \
+        PWC->GetChildCount() \
+        )
+
+
+// Base for wxPropertyGridIterator classes.
+class WXDLLIMPEXP_PROPGRID wxPropertyGridIteratorBase
+{
+public:
+    wxPropertyGridIteratorBase()
+    {
+    }
+
+    void Assign( const wxPropertyGridIteratorBase& it );
+
+    bool AtEnd() const { return m_property == NULL; }
+
+    /** Get current property.
+    */
+    wxPGProperty* GetProperty() const { return m_property; }
+
+    void Init( wxPropertyGridPageState* state,
+               int flags,
+               wxPGProperty* property,
+               int dir = 1 );
+
+    void Init( wxPropertyGridPageState* state,
+               int flags,
+               int startPos = wxTOP,
+               int dir = 0 );
+
+    /** Iterate to the next property.
+    */
+    void Next( bool iterateChildren = true );
+
+    /** Iterate to the previous property.
+    */
+    void Prev();
+
+    /**
+        Set base parent, ie a property when, in which iteration returns, it
+        ends.
+
+        Default base parent is the root of the used wxPropertyGridPageState.
+    */
+    void SetBaseParent( wxPGProperty* baseParent )
+        { m_baseParent = baseParent; }
+
+protected:
+
+    wxPGProperty*               m_property;
+
+private:
+    wxPropertyGridPageState*        m_state;
+    wxPGProperty*               m_baseParent;
+
+    // Masks are used to quickly exclude items
+    int                         m_itemExMask;
+    int                         m_parentExMask;
+};
+
+
+#define wxPG_IMPLEMENT_ITERATOR(CLASS, PROPERTY, STATE) \
+    CLASS( STATE* state, int flags = wxPG_ITERATE_DEFAULT, \
+           PROPERTY* property = NULL, int dir = 1 ) \
+        : wxPropertyGridIteratorBase() \
+        { Init( (wxPropertyGridPageState*)state, flags, \
+                (wxPGProperty*)property, dir ); } \
+    CLASS( STATE* state, int flags, int startPos, int dir = 0 ) \
+        : wxPropertyGridIteratorBase() \
+        { Init( (wxPropertyGridPageState*)state, flags, startPos, dir ); } \
+    CLASS() \
+        : wxPropertyGridIteratorBase() \
+    { \
+        m_property = NULL; \
+    } \
+    CLASS( const CLASS& it ) \
+        : wxPropertyGridIteratorBase( ) \
+    { \
+        Assign(it); \
+    } \
+    ~CLASS() \
+    { \
+    } \
+    const CLASS& operator=( const CLASS& it ) \
+    { \
+        if (this != &it) \
+            Assign(it); \
+        return *this; \
+    } \
+    CLASS& operator++() { Next(); return *this; } \
+    CLASS operator++(int) { CLASS it=*this;Next();return it; } \
+    CLASS& operator--() { Prev(); return *this; } \
+    CLASS operator--(int) { CLASS it=*this;Prev();return it; } \
+    PROPERTY* operator *() const { return (PROPERTY*)m_property; } \
+    static PROPERTY* OneStep( STATE* state, \
+                              int flags = wxPG_ITERATE_DEFAULT, \
+                              PROPERTY* property = NULL, \
+                              int dir = 1 ) \
+    { \
+        CLASS it( state, flags, property, dir ); \
+        if ( property ) \
+        { \
+            if ( dir == 1 ) it.Next(); \
+            else it.Prev(); \
+        } \
+        return *it; \
+    }
+
+
+/** @class wxPropertyGridIterator
+
+    Preferable way to iterate through contents of wxPropertyGrid,
+    wxPropertyGridManager, and wxPropertyGridPage.
+
+    See wxPropertyGridInterface::GetIterator() for more information about usage.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID
+    wxPropertyGridIterator : public wxPropertyGridIteratorBase
+{
+public:
+
+    wxPG_IMPLEMENT_ITERATOR(wxPropertyGridIterator,
+                            wxPGProperty,
+                            wxPropertyGridPageState)
+
+protected:
+};
+
+
+// Const version of wxPropertyGridIterator.
+class WXDLLIMPEXP_PROPGRID
+    wxPropertyGridConstIterator : public wxPropertyGridIteratorBase
+{
+public:
+    wxPG_IMPLEMENT_ITERATOR(wxPropertyGridConstIterator,
+                            const wxPGProperty,
+                            const wxPropertyGridPageState)
+
+    /**
+        Additional copy constructor.
+    */
+    wxPropertyGridConstIterator( const wxPropertyGridIterator& other )
+    {
+        Assign(other);
+    }
+
+    /**
+        Additional assignment operator.
+    */
+    const wxPropertyGridConstIterator& operator=( const wxPropertyGridIterator& it )
+    {
+        Assign(it);
+        return *this;
+    }
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+/** Base class to derive new viterators.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGVIteratorBase
+{
+    friend class wxPGVIterator;
+public:
+    wxPGVIteratorBase() { m_refCount = 1; }
+    virtual void Next() = 0;
+    void IncRef()
+    {
+        m_refCount++;
+    }
+    void DecRef()
+    {
+        m_refCount--;
+        if ( m_refCount <= 0 )
+            delete this;
+    }
+protected:
+    virtual ~wxPGVIteratorBase() { }
+
+    wxPropertyGridIterator  m_it;
+private:
+    int     m_refCount;
+};
+
+/** @class wxPGVIterator
+
+    Abstract implementation of a simple iterator. Can only be used
+    to iterate in forward order, and only through the entire container.
+    Used to have functions dealing with all properties work with both
+    wxPropertyGrid and wxPropertyGridManager.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGVIterator
+{
+public:
+    wxPGVIterator() { m_pIt = NULL; }
+    wxPGVIterator( wxPGVIteratorBase* obj ) { m_pIt = obj; }
+    ~wxPGVIterator() { UnRef(); }
+    void UnRef() { if (m_pIt) m_pIt->DecRef(); }
+    wxPGVIterator( const wxPGVIterator& it )
+    {
+        m_pIt = it.m_pIt;
+        m_pIt->IncRef();
+    }
+#ifndef SWIG
+    const wxPGVIterator& operator=( const wxPGVIterator& it )
+    {
+        if (this != &it)
+        {
+            UnRef();
+            m_pIt = it.m_pIt;
+            m_pIt->IncRef();
+        }
+        return *this;
+    }
+#endif
+    void Next() { m_pIt->Next(); }
+    bool AtEnd() const { return m_pIt->m_it.AtEnd(); }
+    wxPGProperty* GetProperty() const { return m_pIt->m_it.GetProperty(); }
+protected:
+    wxPGVIteratorBase*  m_pIt;
+};
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+// We won't need this class from wxPython
+
+/** @class wxPropertyGridPageState
+
+    Contains low-level property page information (properties, column widths,
+    etc) of a single wxPropertyGrid or single wxPropertyGridPage. Generally you
+    should not use this class directly, but instead member functions in
+    wxPropertyGridInterface, wxPropertyGrid, wxPropertyGridPage, and
+    wxPropertyGridManager.
+
+    @remarks
+    - In separate wxPropertyGrid component this class was known as
+    wxPropertyGridState.
+    - Currently this class is not implemented in wxPython.
+
+    @library{wxpropgrid}
+    @category{propgrid}
+*/
+class WXDLLIMPEXP_PROPGRID wxPropertyGridPageState
+{
+    friend class wxPGProperty;
+    friend class wxPropertyGrid;
+    friend class wxPGCanvas;
+    friend class wxPropertyGridInterface;
+    friend class wxPropertyGridPage;
+    friend class wxPropertyGridManager;
+public:
+
+    /** Default constructor. */
+    wxPropertyGridPageState();
+
+    /** Destructor. */
+    virtual ~wxPropertyGridPageState();
+
+    /** Makes sure all columns have minimum width.
+    */
+    void CheckColumnWidths( int widthChange = 0 );
+
+    /**
+        Override this member function to add custom behavior on property
+        deletion.
+    */
+    virtual void DoDelete( wxPGProperty* item, bool doDelete = true );
+
+    wxSize DoFitColumns( bool allowGridResize = false );
+
+    wxPGProperty* DoGetItemAtY( int y ) const;
+
+    /**
+        Override this member function to add custom behavior on property
+        insertion.
+    */
+    virtual wxPGProperty* DoInsert( wxPGProperty* parent,
+                                    int index,
+                                    wxPGProperty* property );
+
+    /**
+        This needs to be overridden in grid used the manager so that splitter
+        changes can be propagated to other pages.
+    */
+    virtual void DoSetSplitterPosition( int pos,
+                                        int splitterColumn = 0,
+                                        bool allPages = false,
+                                        bool fromAutoCenter = false );
+
+    bool EnableCategories( bool enable );
+
+    /** Make sure virtual height is up-to-date.
+    */
+    void EnsureVirtualHeight()
+    {
+        if ( m_vhCalcPending )
+        {
+            RecalculateVirtualHeight();
+            m_vhCalcPending = 0;
+        }
+    }
+
+    /** Enables or disables given property and its subproperties. */
+    bool DoEnableProperty( wxPGProperty* p, bool enable );
+
+    /** Returns (precalculated) height of contained visible properties.
+    */
+    unsigned int GetVirtualHeight() const
+    {
+        wxASSERT( !m_vhCalcPending );
+        return m_virtualHeight;
+    }
+
+    /** Returns (precalculated) height of contained visible properties.
+    */
+    unsigned int GetVirtualHeight()
+    {
+        EnsureVirtualHeight();
+        return m_virtualHeight;
+    }
+
+    /** Returns actual height of contained visible properties.
+        @remarks
+        Mostly used for internal diagnostic purposes.
+    */
+    inline unsigned int GetActualVirtualHeight() const;
+
+    unsigned int GetColumnCount() const
+    {
+        return (unsigned int) m_colWidths.size();
+    }
+
+    wxPGProperty* GetSelection() const
+    {
+        return m_selected;
+    }
+
+    int GetColumnMinWidth( int column ) const;
+
+    int GetColumnWidth( unsigned int column ) const
+    {
+        return m_colWidths[column];
+    }
+
+    wxPropertyGrid* GetGrid() const { return m_pPropGrid; }
+
+    /** Returns last item which could be iterated using given flags.
+        @param flags
+        @link iteratorflags List of iterator flags@endlink
+    */
+    wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT );
+
+    const wxPGProperty* GetLastItem( int flags = wxPG_ITERATE_DEFAULT ) const
+    {
+        return ((wxPropertyGridPageState*)this)->GetLastItem(flags);
+    }
+
+    wxPropertyCategory* GetPropertyCategory( const wxPGProperty* p ) const;
+
+    wxPGProperty* GetPropertyByLabel( const wxString& name,
+                                      wxPGProperty* parent = NULL ) const;
+
+    wxVariant DoGetPropertyValues( const wxString& listname,
+                                   wxPGProperty* baseparent,
+                                   long flags ) const;
+
+    wxPGProperty* DoGetRoot() const { return m_properties; }
+
+    void DoSetPropertyName( wxPGProperty* p, const wxString& newName );
+
+    // Returns combined width of margin and all the columns
+    int GetVirtualWidth() const
+    {
+        return m_width;
+    }
+
+    /**
+        Returns minimal width for given column so that all images and texts
+        will fit entirely.
+
+        Used by SetSplitterLeft() and DoFitColumns().
+    */
+    int GetColumnFitWidth(wxClientDC& dc,
+                          wxPGProperty* pwc,
+                          unsigned int col,
+                          bool subProps) const;
+
+    /**
+        Returns information about arbitrary position in the grid.
+
+        @param pt
+            Logical coordinates in the virtual grid space. Use
+            wxScrolledWindow::CalcUnscrolledPosition() if you need to
+            translate a scrolled position into a logical one.
+    */
+    wxPropertyGridHitTestResult HitTest( const wxPoint& pt ) const;
+
+    /** Returns true if page is visibly displayed.
+    */
+    inline bool IsDisplayed() const;
+
+    bool IsInNonCatMode() const { return (bool)(m_properties == m_abcArray); }
+
+    void DoLimitPropertyEditing( wxPGProperty* p, bool limit = true )
+    {
+        p->SetFlagRecursively(wxPG_PROP_NOEDITOR, limit);
+    }
+
+    bool DoSelectProperty( wxPGProperty* p, unsigned int flags = 0 );
+
+    /** widthChange is non-client.
+    */
+    void OnClientWidthChange( int newWidth,
+                              int widthChange,
+                              bool fromOnResize = false );
+
+    /** Recalculates m_virtualHeight.
+    */
+    void RecalculateVirtualHeight()
+    {
+        m_virtualHeight = GetActualVirtualHeight();
+    }
+
+    void SetColumnCount( int colCount );
+
+    void PropagateColSizeDec( int column, int decrease, int dir );
+
+    bool DoHideProperty( wxPGProperty* p, bool hide, int flags = wxPG_RECURSE );
+
+    bool DoSetPropertyValueString( wxPGProperty* p, const wxString& value );
+
+    bool DoSetPropertyValue( wxPGProperty* p, wxVariant& value );
+
+    bool DoSetPropertyValueWxObjectPtr( wxPGProperty* p, wxObject* value );
+    void DoSetPropertyValues( const wxVariantList& list,
+                              wxPGProperty* default_category );
+
+    void SetSplitterLeft( bool subProps = false );
+
+    /** Set virtual width for this particular page. */
+    void SetVirtualWidth( int width );
+
+    void DoSortChildren( wxPGProperty* p, int flags = 0 );
+    void DoSort( int flags = 0 );
+
+    bool PrepareAfterItemsAdded();
+
+    void SetSelection( wxPGProperty* p ) { m_selected = p; }
+
+    /** Called after virtual height needs to be recalculated.
+    */
+    void VirtualHeightChanged()
+    {
+        m_vhCalcPending = 1;
+    }
+
+    /** Base append. */
+    wxPGProperty* DoAppend( wxPGProperty* property );
+
+    /** Returns property by its name. */
+    wxPGProperty* BaseGetPropertyByName( const wxString& name ) const;
+
+    void DoClearSelection()
+    {
+        m_selected = NULL;
+    }
+
+    /** Called in, for example, wxPropertyGrid::Clear. */
+    void DoClear();
+
+    bool DoCollapse( wxPGProperty* p );
+
+    bool DoExpand( wxPGProperty* p );
+
+    void CalculateFontAndBitmapStuff( int vspacing );
+
+protected:
+
+    int DoGetSplitterPosition( int splitterIndex = 0 ) const;
+
+    /** Returns column at x coordinate (in GetGrid()->GetPanel()).
+        @param pSplitterHit
+        Give pointer to int that receives index to splitter that is at x.
+        @param pSplitterHitOffset
+        Distance from said splitter.
+    */
+    int HitTestH( int x, int* pSplitterHit, int* pSplitterHitOffset ) const;
+
+    bool PrepareToAddItem( wxPGProperty* property,
+                           wxPGProperty* scheduledParent );
+
+    /** If visible, then this is pointer to wxPropertyGrid.
+        This shall *never* be NULL to indicate that this state is not visible.
+    */
+    wxPropertyGrid*             m_pPropGrid;
+
+    /** Pointer to currently used array. */
+    wxPGProperty*               m_properties;
+
+    /** Array for categoric mode. */
+    wxPGRootProperty            m_regularArray;
+
+    /** Array for root of non-categoric mode. */
+    wxPGRootProperty*           m_abcArray;
+
+    /** Dictionary for name-based access. */
+    wxPGHashMapS2P              m_dictName;
+
+    /** List of column widths (first column does not include margin). */
+    wxArrayInt                  m_colWidths;
+
+    double                      m_fSplitterX;
+
+    /** Most recently added category. */
+    wxPropertyCategory*         m_currentCategory;
+
+    /** Pointer to selected property. */
+    wxPGProperty*               m_selected;
+
+    /** Virtual width. */
+    int                         m_width;
+
+    /** Indicates total virtual height of visible properties. */
+    unsigned int                m_virtualHeight;
+
+    /** 1 if m_lastCaption is also the bottommost caption. */
+    unsigned char               m_lastCaptionBottomnest;
+
+    /** 1 items appended/inserted, so stuff needs to be done before drawing;
+        If m_virtualHeight == 0, then calcylatey's must be done.
+        Otherwise just sort.
+    */
+    unsigned char               m_itemsAdded;
+
+    /** 1 if any value is modified. */
+    unsigned char               m_anyModified;
+
+    unsigned char               m_vhCalcPending;
+
+private:
+    /** Only inits arrays, doesn't migrate things or such. */
+    void InitNonCatMode();
+};
+
+#endif // #ifndef SWIG
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_PROPGRIDPAGESTATE_H_
+
Index: props.h
===================================================================
--- props.h	(revision 102)
+++ props.h	(working copy)
@@ -1,1010 +1,1010 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/propgrid/props.h
-// Purpose:     wxPropertyGrid Property Classes
-// Author:      Jaakko Salli
-// Modified by:
-// Created:     2007-03-28
-// RCS-ID:      $Id: props.h 60793 2009-05-29 16:04:22Z JMS $
-// Copyright:   (c) Jaakko Salli
-// Licence:     wxWindows license
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_PROPGRID_PROPS_H_
-#define _WX_PROPGRID_PROPS_H_
-
-#if wxUSE_PROPGRID
-
-// -----------------------------------------------------------------------
-
-class wxArrayEditorDialog;
-
-#include "wx/propgrid/editors.h"
-
-#include "wx/filename.h"
-#include "wx/dialog.h"
-#include "wx/textctrl.h"
-#include "wx/button.h"
-#include "wx/listbox.h"
-
-// -----------------------------------------------------------------------
-
-//
-// Property class implementation helper macros.
-//
-
-#define WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME, UPCLASS, T, T_AS_ARG, EDITOR) \
-IMPLEMENT_DYNAMIC_CLASS(NAME, UPCLASS) \
-WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(NAME, T, EDITOR)
-
-// -----------------------------------------------------------------------
-
-//
-// These macros help creating DoGetValidator
-#define WX_PG_DOGETVALIDATOR_ENTRY() \
-    static wxValidator* s_ptr = NULL; \
-    if ( s_ptr ) return s_ptr;
-
-// Common function exit
-#define WX_PG_DOGETVALIDATOR_EXIT(VALIDATOR) \
-    s_ptr = VALIDATOR; \
-    wxPGGlobalVars->m_arrValidators.push_back( VALIDATOR ); \
-    return VALIDATOR;
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-
-/** @class wxPGInDialogValidator
-    @ingroup classes
-    Creates and manages a temporary wxTextCtrl for validation purposes.
-    Uses wxPropertyGrid's current editor, if available.
-*/
-class WXDLLIMPEXP_PROPGRID wxPGInDialogValidator
-{
-public:
-    wxPGInDialogValidator()
-    {
-        m_textCtrl = NULL;
-    }
-
-    ~wxPGInDialogValidator()
-    {
-        if ( m_textCtrl )
-            m_textCtrl->Destroy();
-    }
-
-    bool DoValidate( wxPropertyGrid* propGrid,
-                     wxValidator* validator,
-                     const wxString& value );
-
-private:
-    wxTextCtrl*         m_textCtrl;
-};
-
-#endif  // SWIG
-
-
-// -----------------------------------------------------------------------
-// Property classes
-// -----------------------------------------------------------------------
-
-#define wxPG_PROP_PASSWORD  wxPG_PROP_CLASS_SPECIFIC_2
-
-/** @class wxStringProperty
-    @ingroup classes
-    Basic property with string value.
-
-    <b>Supported special attributes:</b>
-    - "Password": set to 1 inorder to enable wxTE_PASSWORD on the editor.
-
-    @remarks
-    - If value "<composed>" is set, then actual value is formed (or composed)
-      from values of child properties.
-*/
-class WXDLLIMPEXP_PROPGRID wxStringProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxStringProperty)
-public:
-    wxStringProperty( const wxString& label = wxPG_LABEL,
-                      const wxString& name = wxPG_LABEL,
-                      const wxString& value = wxEmptyString );
-    virtual ~wxStringProperty();
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-
-    /** This is updated so "<composed>" special value can be handled.
-    */
-    virtual void OnSetValue();
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-#ifndef SWIG
-/** Constants used with DoValidation() methods.
-*/
-enum
-{
-    /** Instead of modifying the value, show an error message.
-    */
-    wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE      = 0,
-
-    /** Modify value, but stick with the limitations.
-    */
-    wxPG_PROPERTY_VALIDATION_SATURATE           = 1,
-
-    /** Modify value, wrap around on overflow.
-    */
-    wxPG_PROPERTY_VALIDATION_WRAP               = 2
-};
-#endif
-
-// -----------------------------------------------------------------------
-
-/** @class wxIntProperty
-    @ingroup classes
-    Basic property with integer value.
-
-    Seamlessly supports 64-bit integer (wxLongLong) on overflow.
-
-    <b>Example how to use seamless 64-bit integer support</b>
-
-      Getting value:
-
-      @code
-          wxLongLong_t value = pg->GetPropertyValueAsLongLong();
-      @endcode
-
-         or
-
-      @code
-          wxLongLong_t value;
-          wxVariant variant = property->GetValue();
-          if ( variant.GetType() == "wxLongLong" )
-              value = wxLongLongFromVariant(variant);
-          else
-              value = variant.GetLong();
-      @endcode
-
-      Setting value:
-
-       @code
-          pg->SetPropertyValue(longLongVal);
-      @endcode
-
-         or
-
-      @code
-          property->SetValue(WXVARIANT(longLongVal));
-      @endcode
-
-
-    <b>Supported special attributes:</b>
-    - "Min", "Max": Specify acceptable value range.
-*/
-class WXDLLIMPEXP_PROPGRID wxIntProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxIntProperty)
-public:
-    wxIntProperty( const wxString& label = wxPG_LABEL,
-                   const wxString& name = wxPG_LABEL,
-                   long value = 0 );
-    virtual ~wxIntProperty();
-
-    wxIntProperty( const wxString& label,
-                   const wxString& name,
-                   const wxLongLong& value );
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool ValidateValue( wxVariant& value,
-                                wxPGValidationInfo& validationInfo ) const;
-    virtual bool IntToValue( wxVariant& variant,
-                             int number,
-                             int argFlags = 0 ) const;
-    static wxValidator* GetClassValidator();
-    virtual wxValidator* DoGetValidator() const;
-
-    /** Validation helper.
-    */
-    static bool DoValidation( const wxPGProperty* property,
-                              wxLongLong_t& value,
-                              wxPGValidationInfo* pValidationInfo,
-                              int mode =
-                                wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE );
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxUIntProperty
-    @ingroup classes
-    Basic property with unsigned integer value.
-    Seamlessly supports 64-bit integer (wxULongLong) on overflow.
-
-    <b>Supported special attributes:</b>
-    - "Min", "Max": Specify acceptable value range.
-    - "Base": Define base. Valid constants are wxPG_BASE_OCT, wxPG_BASE_DEC,
-    wxPG_BASE_HEX and wxPG_BASE_HEXL (lowercase characters). Arbitrary bases
-    are <b>not</b> supported.
-    - "Prefix": Possible values are wxPG_PREFIX_NONE, wxPG_PREFIX_0x, and
-    wxPG_PREFIX_DOLLAR_SIGN. Only wxPG_PREFIX_NONE works with Decimal and Octal
-    numbers.
-
-    @remarks
-    - For example how to use seamless 64-bit integer support, see wxIntProperty
-    documentation (just use wxULongLong instead of wxLongLong).
-*/
-class WXDLLIMPEXP_PROPGRID wxUIntProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxUIntProperty)
-public:
-    wxUIntProperty( const wxString& label = wxPG_LABEL,
-                    const wxString& name = wxPG_LABEL,
-                    unsigned long value = 0 );
-    virtual ~wxUIntProperty();
-    wxUIntProperty( const wxString& label,
-                    const wxString& name,
-                    const wxULongLong& value );
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-    virtual bool ValidateValue( wxVariant& value,
-                                wxPGValidationInfo& validationInfo ) const;
-    virtual bool IntToValue( wxVariant& variant,
-                             int number,
-                             int argFlags = 0 ) const;
-protected:
-    wxByte      m_base;
-    wxByte      m_realBase; // translated to 8,16,etc.
-    wxByte      m_prefix;
-private:
-    void Init();
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxFloatProperty
-    @ingroup classes
-    Basic property with double-precision floating point value.
-
-    <b>Supported special attributes:</b>
-    - "Precision": Sets the (max) precision used when floating point value is
-    rendered as text. The default -1 means infinite precision.
-*/
-class WXDLLIMPEXP_PROPGRID wxFloatProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxFloatProperty)
-public:
-    wxFloatProperty( const wxString& label = wxPG_LABEL,
-                     const wxString& name = wxPG_LABEL,
-                     double value = 0.0 );
-    virtual ~wxFloatProperty();
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-    virtual bool ValidateValue( wxVariant& value,
-                                wxPGValidationInfo& validationInfo ) const;
-
-    /** Validation helper.
-    */
-    static bool DoValidation( const wxPGProperty* property,
-                              double& value,
-                              wxPGValidationInfo* pValidationInfo,
-                              int mode =
-                                 wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE );
-    virtual wxValidator* DoGetValidator () const;
-
-protected:
-    int m_precision;
-};
-
-// -----------------------------------------------------------------------
-
-// Exclude class from wxPython bindings
-#ifndef SWIG
-
-/** @class wxBoolProperty
-    @ingroup classes
-    Basic property with boolean value.
-
-    <b>Supported special attributes:</b>
-    - "UseCheckbox": Set to 1 to use check box editor instead of combo box.
-    - "UseDClickCycling": Set to 1 to cycle combo box instead showing the list.
-*/
-class WXDLLIMPEXP_PROPGRID wxBoolProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxBoolProperty)
-public:
-    wxBoolProperty( const wxString& label = wxPG_LABEL,
-                    const wxString& name = wxPG_LABEL,
-                    bool value = false );
-    virtual ~wxBoolProperty();
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool IntToValue( wxVariant& variant,
-                             int number, int argFlags = 0 ) const;
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-};
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-// If set, then selection of choices is static and should not be
-// changed (i.e. returns NULL in GetPropertyChoices).
-#define wxPG_PROP_STATIC_CHOICES    wxPG_PROP_CLASS_SPECIFIC_1
-
-/** @class wxEnumProperty
-    @ingroup classes
-    You can derive custom properties with choices from this class. See
-    wxBaseEnumProperty for remarks.
-
-    @remarks
-    - Updating private index is important. You can do this either by calling
-    SetIndex() in IntToValue, and then letting wxBaseEnumProperty::OnSetValue
-    be called (by not implementing it, or by calling super class function in
-    it) -OR- you can just call SetIndex in OnSetValue.
-*/
-class WXDLLIMPEXP_PROPGRID wxEnumProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxEnumProperty)
-public:
-
-#ifndef SWIG
-    wxEnumProperty( const wxString& label = wxPG_LABEL,
-                    const wxString& name = wxPG_LABEL,
-                    const wxChar** labels = NULL,
-                    const long* values = NULL,
-                    int value = 0 );
-    wxEnumProperty( const wxString& label,
-                    const wxString& name,
-                    wxPGChoices& choices,
-                    int value = 0 );
-
-    // Special constructor for caching choices (used by derived class)
-    wxEnumProperty( const wxString& label,
-                    const wxString& name,
-                    const wxChar** labels,
-                    const long* values,
-                    wxPGChoices* choicesCache,
-                    int value = 0 );
-
-    wxEnumProperty( const wxString& label,
-                    const wxString& name,
-                    const wxArrayString& labels,
-                    const wxArrayInt& values = wxArrayInt(),
-                    int value = 0 );
-#else
-    wxEnumProperty( const wxString& label = wxPG_LABEL,
-                    const wxString& name = wxPG_LABEL,
-                    const wxArrayString& labels = wxArrayString(),
-                    const wxArrayInt& values = wxArrayInt(),
-                    int value = 0 );
-#endif
-
-    virtual ~wxEnumProperty();
-
-    size_t GetItemCount() const { return m_choices.GetCount(); }
-
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool ValidateValue( wxVariant& value,
-                                wxPGValidationInfo& validationInfo ) const;
-
-    // If wxPG_FULL_VALUE is not set in flags, then the value is interpreted
-    // as index to choices list. Otherwise, it is actual value.
-    virtual bool IntToValue( wxVariant& variant,
-                             int number,
-                             int argFlags = 0 ) const;
-
-    //
-    // Additional virtuals
-
-    // This must be overridden to have non-index based value
-    virtual int GetIndexForValue( int value ) const;
-
-    // GetChoiceSelection needs to overridden since m_index is
-    // the true index, and various property classes derived from
-    // this take advantage of it.
-    virtual int GetChoiceSelection() const { return m_index; }
-
-    virtual void OnValidationFailure( wxVariant& pendingValue );
-
-protected:
-
-    int GetIndex() const;
-    void SetIndex( int index );
-
-    bool ValueFromString_( wxVariant& value,
-                           const wxString& text,
-                           int argFlags ) const;
-    bool ValueFromInt_( wxVariant& value, int intVal, int argFlags ) const;
-
-    static void ResetNextIndex() { ms_nextIndex = -2; }
-
-private:
-    // This is private so that classes are guaranteed to use GetIndex
-    // for up-to-date index value.
-    int                     m_index;
-
-    // Relies on ValidateValue being called always before OnSetValue
-    static int              ms_nextIndex;
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxEditEnumProperty
-    @ingroup classes
-    wxEnumProperty with wxString value and writable combo box editor.
-
-    @remarks
-    Uses int value, similar to wxEnumProperty, unless text entered by user is
-    is not in choices (in which case string value is used).
-*/
-class WXDLLIMPEXP_PROPGRID wxEditEnumProperty : public wxEnumProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxEditEnumProperty)
-public:
-
-    wxEditEnumProperty( const wxString& label,
-                        const wxString& name,
-                        const wxChar** labels,
-                        const long* values,
-                        const wxString& value );
-    wxEditEnumProperty( const wxString& label = wxPG_LABEL,
-                        const wxString& name = wxPG_LABEL,
-                        const wxArrayString& labels = wxArrayString(),
-                        const wxArrayInt& values = wxArrayInt(),
-                        const wxString& value = wxEmptyString );
-    wxEditEnumProperty( const wxString& label,
-                        const wxString& name,
-                        wxPGChoices& choices,
-                        const wxString& value = wxEmptyString );
-
-    // Special constructor for caching choices (used by derived class)
-    wxEditEnumProperty( const wxString& label,
-                        const wxString& name,
-                        const wxChar** labels,
-                        const long* values,
-                        wxPGChoices* choicesCache,
-                        const wxString& value );
-
-    virtual ~wxEditEnumProperty();
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxFlagsProperty
-    @ingroup classes
-    Represents a bit set that fits in a long integer. wxBoolProperty
-    sub-properties are created for editing individual bits. Textctrl is created
-    to manually edit the flags as a text; a continous sequence of spaces,
-    commas and semicolons is considered as a flag id separator.
-    <b>Note:</b> When changing "choices" (ie. flag labels) of wxFlagsProperty,
-    you will need to use SetPropertyChoices - otherwise they will not get
-    updated properly.
-*/
-class WXDLLIMPEXP_PROPGRID wxFlagsProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxFlagsProperty)
-public:
-
-#ifndef SWIG
-    wxFlagsProperty( const wxString& label,
-                     const wxString& name,
-                     const wxChar** labels,
-                     const long* values = NULL,
-                     long value = 0 );
-    wxFlagsProperty( const wxString& label,
-                     const wxString& name,
-                     wxPGChoices& choices,
-                     long value = 0 );
-#endif
-    wxFlagsProperty( const wxString& label = wxPG_LABEL,
-                     const wxString& name = wxPG_LABEL,
-                     const wxArrayString& labels = wxArrayString(),
-                     const wxArrayInt& values = wxArrayInt(),
-                     int value = 0 );
-    virtual ~wxFlagsProperty ();
-
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int flags ) const;
-    virtual void ChildChanged( wxVariant& thisValue,
-                               int childIndex,
-                               wxVariant& childValue ) const;
-    virtual void RefreshChildren();
-
-    // GetChoiceSelection needs to overridden since m_choices is
-    // used and value is integer, but it is not index.
-    virtual int GetChoiceSelection() const { return wxNOT_FOUND; }
-
-    // helpers
-    size_t GetItemCount() const { return m_choices.GetCount(); }
-    const wxString& GetLabel( size_t ind ) const
-        { return m_choices.GetLabel(ind); }
-
-protected:
-    // Used to detect if choices have been changed
-    wxPGChoicesData*        m_oldChoicesData;
-
-    // Needed to properly mark changed sub-properties
-    long                    m_oldValue;
-
-    // Converts string id to a relevant bit.
-    long IdToBit( const wxString& id ) const;
-
-    // Creates children and sets value.
-    void Init();
-};
-
-// -----------------------------------------------------------------------
-
-/** @class wxPGFileDialogAdapter
-    @ingroup classes
-*/
-class WXDLLIMPEXP_PROPGRID
-    wxPGFileDialogAdapter : public wxPGEditorDialogAdapter
-{
-public:
-    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
-                               wxPGProperty* property );
-};
-
-// -----------------------------------------------------------------------
-
-// Indicates first bit useable by derived properties.
-#define wxPG_PROP_SHOW_FULL_FILENAME  wxPG_PROP_CLASS_SPECIFIC_1
-
-/** @class wxFileProperty
-    @ingroup classes
-    Like wxLongStringProperty, but the button triggers file selector instead.
-
-    <b>Supported special attributes:</b>
-    - "Wildcard": Sets wildcard (see wxFileDialog for format details), "All
-    files..." is default.
-    - "ShowFullPath": Default 1. When 0, only the file name is shown (i.e. drive
-      and directory are hidden).
-    - "ShowRelativePath": If set, then the filename is shown relative to the
-    given path string.
-    - "InitialPath": Sets the initial path of where to look for files.
-    - "DialogTitle": Sets a specific title for the dir dialog.
-*/
-class WXDLLIMPEXP_PROPGRID wxFileProperty : public wxPGProperty
-{
-    friend class wxPGFileDialogAdapter;
-    WX_PG_DECLARE_PROPERTY_CLASS(wxFileProperty)
-public:
-
-    wxFileProperty( const wxString& label = wxPG_LABEL,
-                    const wxString& name = wxPG_LABEL,
-                    const wxString& value = wxEmptyString );
-    virtual ~wxFileProperty ();
-
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-
-    static wxValidator* GetClassValidator();
-    virtual wxValidator* DoGetValidator() const;
-
-    /**
-        Returns filename to file represented by current value.
-    */
-    wxFileName GetFileName() const;
-
-protected:
-    wxString    m_wildcard;
-    wxString    m_basePath; // If set, then show path relative to it
-    wxString    m_initialPath; // If set, start the file dialog here
-    wxString    m_dlgTitle; // If set, used as title for file dialog
-    int         m_indFilter; // index to the selected filter
-};
-
-// -----------------------------------------------------------------------
-
-#define wxPG_PROP_NO_ESCAPE     wxPG_PROP_CLASS_SPECIFIC_1
-
-
-/** @class wxPGLongStringDialogAdapter
-    @ingroup classes
-*/
-class WXDLLIMPEXP_PROPGRID
-    wxPGLongStringDialogAdapter : public wxPGEditorDialogAdapter
-{
-public:
-    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
-                               wxPGProperty* property );
-};
-
-
-/** @class wxLongStringProperty
-    @ingroup classes
-    Like wxStringProperty, but has a button that triggers a small text
-    editor dialog.
-*/
-class WXDLLIMPEXP_PROPGRID wxLongStringProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxLongStringProperty)
-public:
-
-    wxLongStringProperty( const wxString& label = wxPG_LABEL,
-                          const wxString& name = wxPG_LABEL,
-                          const wxString& value = wxEmptyString );
-    virtual ~wxLongStringProperty();
-
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxWindow* primary, wxEvent& event );
-
-    // Shows string editor dialog. Value to be edited should be read from
-    // value, and if dialog is not cancelled, it should be stored back and true
-    // should be returned if that was the case.
-    virtual bool OnButtonClick( wxPropertyGrid* propgrid, wxString& value );
-
-    static bool DisplayEditorDialog( wxPGProperty* prop,
-                                     wxPropertyGrid* propGrid,
-                                     wxString& value );
-
-protected:
-};
-
-// -----------------------------------------------------------------------
-
-
-// Exclude class from wxPython bindings
-#ifndef SWIG
-
-/** @class wxDirProperty
-    @ingroup classes
-    Like wxLongStringProperty, but the button triggers dir selector instead.
-
-    <b>Supported special attributes:</b>
-    - "DialogMessage": Sets specific message in the dir selector.
-*/
-class WXDLLIMPEXP_PROPGRID wxDirProperty : public wxLongStringProperty
-{
-    DECLARE_DYNAMIC_CLASS(wxDirProperty)
-public:
-    wxDirProperty( const wxString& name = wxPG_LABEL,
-                   const wxString& label = wxPG_LABEL,
-                   const wxString& value = wxEmptyString );
-    virtual ~wxDirProperty();
-
-    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
-    virtual wxValidator* DoGetValidator() const;
-
-    virtual bool OnButtonClick ( wxPropertyGrid* propGrid, wxString& value );
-
-protected:
-    wxString    m_dlgMessage;
-};
-
-#endif  // !SWIG
-
-// -----------------------------------------------------------------------
-
-// wxBoolProperty specific flags
-#define wxPG_PROP_USE_CHECKBOX      wxPG_PROP_CLASS_SPECIFIC_1
-// DCC = Double Click Cycles
-#define wxPG_PROP_USE_DCC           wxPG_PROP_CLASS_SPECIFIC_2
-
-
-// -----------------------------------------------------------------------
-
-/** @class wxArrayStringProperty
-    @ingroup classes
-    Property that manages a list of strings.
-*/
-class WXDLLIMPEXP_PROPGRID wxArrayStringProperty : public wxPGProperty
-{
-    WX_PG_DECLARE_PROPERTY_CLASS(wxArrayStringProperty)
-public:
-
-    wxArrayStringProperty( const wxString& label = wxPG_LABEL,
-                           const wxString& name = wxPG_LABEL,
-                           const wxArrayString& value = wxArrayString() );
-    virtual ~wxArrayStringProperty();
-
-    virtual void OnSetValue();
-    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
-    virtual bool StringToValue( wxVariant& variant,
-                                const wxString& text,
-                                int argFlags = 0 ) const;
-    virtual bool OnEvent( wxPropertyGrid* propgrid,
-                          wxWindow* primary, wxEvent& event );
-
-    virtual void GenerateValueAsString();
-
-    // Shows string editor dialog. Value to be edited should be read from
-    // value, and if dialog is not cancelled, it should be stored back and true
-    // should be returned if that was the case.
-    virtual bool OnCustomStringEdit( wxWindow* parent, wxString& value );
-
-    // Helper.
-    virtual bool OnButtonClick( wxPropertyGrid* propgrid,
-                                wxWindow* primary,
-                                const wxChar* cbt );
-
-#ifndef SWIG
-    // Creates wxArrayEditorDialog for string editing. Called in OnButtonClick.
-    virtual wxArrayEditorDialog* CreateEditorDialog();
-#endif
-
-protected:
-    wxString        m_display; // Cache for displayed text.
-};
-
-// -----------------------------------------------------------------------
-
-#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR_WITH_DECL(PROPNAME, \
-                                                                    DECL) \
-DECL PROPNAME : public wxArrayStringProperty \
-{ \
-    WX_PG_DECLARE_PROPERTY_CLASS(PROPNAME) \
-public: \
-    PROPNAME( const wxString& label = wxPG_LABEL, \
-              const wxString& name = wxPG_LABEL, \
-              const wxArrayString& value = wxArrayString() ); \
-    ~PROPNAME(); \
-    virtual void GenerateValueAsString(); \
-    virtual bool StringToValue( wxVariant& value, \
-                                const wxString& text, int = 0 ) const; \
-    virtual bool OnEvent( wxPropertyGrid* propgrid, \
-                          wxWindow* primary, wxEvent& event ); \
-    virtual bool OnCustomStringEdit( wxWindow* parent, wxString& value ); \
-    virtual wxValidator* DoGetValidator() const; \
-};
-
-#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAM) \
-WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAM, class)
-
-#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAME, \
-                                                            DELIMCHAR, \
-                                                            CUSTBUTTXT) \
-WX_PG_IMPLEMENT_PROPERTY_CLASS(PROPNAME, wxArrayStringProperty, \
-                               wxArrayString, const wxArrayString&, \
-                               TextCtrlAndButton) \
-PROPNAME::PROPNAME( const wxString& label, \
-                    const wxString& name, \
-                    const wxArrayString& value ) \
-    : wxArrayStringProperty(label,name,value) \
-{ \
-    PROPNAME::GenerateValueAsString(); \
-} \
-PROPNAME::~PROPNAME() { } \
-void PROPNAME::GenerateValueAsString() \
-{ \
-    wxChar delimChar = DELIMCHAR; \
-    if ( delimChar == wxS('"') ) \
-        wxArrayStringProperty::GenerateValueAsString(); \
-    else \
-        wxPropertyGrid::ArrayStringToString(m_display, \
-                                            m_value.GetArrayString(), \
-                                            0,DELIMCHAR,0); \
-} \
-bool PROPNAME::StringToValue( wxVariant& variant, \
-                              const wxString& text, int ) const \
-{ \
-    wxChar delimChar = DELIMCHAR; \
-    if ( delimChar == wxS('"') ) \
-        return wxArrayStringProperty::StringToValue(variant, text, 0); \
-    \
-    wxArrayString arr; \
-    WX_PG_TOKENIZER1_BEGIN(text,DELIMCHAR) \
-        arr.Add( token ); \
-    WX_PG_TOKENIZER1_END() \
-    variant = arr; \
-    return true; \
-} \
-bool PROPNAME::OnEvent( wxPropertyGrid* propgrid, \
-                        wxWindow* primary, wxEvent& event ) \
-{ \
-    if ( event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED ) \
-        return OnButtonClick(propgrid,primary,(const wxChar*) CUSTBUTTXT); \
-    return false; \
-}
-
-#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY(PROPNAME) \
-WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAME)
-
-#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_DECL(PROPNAME, DECL) \
-WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR_WITH_DECL(PROPNAME, DECL)
-
-#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(PROPNAME,DELIMCHAR,CUSTBUTTXT) \
-WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAME, \
-                                                    DELIMCHAR, \
-                                                    CUSTBUTTXT) \
-wxValidator* PROPNAME::DoGetValidator () const \
-{ return NULL; }
-
-
-// -----------------------------------------------------------------------
-// wxArrayEditorDialog
-// -----------------------------------------------------------------------
-
-#define wxAEDIALOG_STYLE \
-    (wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER | wxOK | wxCANCEL | wxCENTRE)
-
-class WXDLLIMPEXP_PROPGRID wxArrayEditorDialog : public wxDialog
-{
-public:
-    wxArrayEditorDialog();
-    virtual ~wxArrayEditorDialog() { }
-
-    void Init();
-
-    wxArrayEditorDialog( wxWindow *parent,
-                         const wxString& message,
-                         const wxString& caption,
-                         long style = wxAEDIALOG_STYLE,
-                         const wxPoint& pos = wxDefaultPosition,
-                         const wxSize& sz = wxDefaultSize );
-
-    bool Create( wxWindow *parent,
-                 const wxString& message,
-                 const wxString& caption,
-                 long style = wxAEDIALOG_STYLE,
-                 const wxPoint& pos = wxDefaultPosition,
-                 const wxSize& sz = wxDefaultSize );
-
-    /** Set value modified by dialog.
-    */
-    virtual void SetDialogValue( const wxVariant& WXUNUSED(value) )
-    {
-        wxFAIL_MSG(wxT("re-implement this member function in derived class"));
-    }
-
-    /** Return value modified by dialog.
-    */
-    virtual wxVariant GetDialogValue() const
-    {
-        wxFAIL_MSG(wxT("re-implement this member function in derived class"));
-        return wxVariant();
-    }
-
-    /** Override to return wxValidator to be used with the wxTextCtrl
-        in dialog. Note that the validator is used in the standard
-        wx way, ie. it immediately prevents user from entering invalid
-        input.
-
-        @remarks
-        Dialog frees the validator.
-    */
-    virtual wxValidator* GetTextCtrlValidator() const
-    {
-        return NULL;
-    }
-
-    // Returns true if array was actually modified
-    bool IsModified() const { return m_modified; }
-
-    //const wxArrayString& GetStrings() const { return m_array; }
-
-    // implementation from now on
-    void OnUpdateClick(wxCommandEvent& event);
-    void OnAddClick(wxCommandEvent& event);
-    void OnDeleteClick(wxCommandEvent& event);
-    void OnListBoxClick(wxCommandEvent& event);
-    void OnUpClick(wxCommandEvent& event);
-    void OnDownClick(wxCommandEvent& event);
-    //void OnCustomEditClick(wxCommandEvent& event);
-    void OnIdle(wxIdleEvent& event);
-
-protected:
-    wxTextCtrl*     m_edValue;
-    wxListBox*      m_lbStrings;
-
-    wxButton*       m_butAdd;       // Button pointers
-    wxButton*       m_butCustom;    // required for disabling/enabling changing.
-    wxButton*       m_butUpdate;
-    wxButton*       m_butRemove;
-    wxButton*       m_butUp;
-    wxButton*       m_butDown;
-
-    //wxArrayString   m_array;
-
-    const wxChar*   m_custBtText;
-    //wxArrayStringPropertyClass*     m_pCallingClass;
-
-    bool            m_modified;
-
-    unsigned char   m_curFocus;
-
-    // These must be overridden - must return true on success.
-    virtual wxString ArrayGet( size_t index ) = 0;
-    virtual size_t ArrayGetCount() = 0;
-    virtual bool ArrayInsert( const wxString& str, int index ) = 0;
-    virtual bool ArraySet( size_t index, const wxString& str ) = 0;
-    virtual void ArrayRemoveAt( int index ) = 0;
-    virtual void ArraySwap( size_t first, size_t second ) = 0;
-
-private:
-    DECLARE_DYNAMIC_CLASS_NO_COPY(wxArrayEditorDialog)
-    DECLARE_EVENT_TABLE()
-};
-
-// -----------------------------------------------------------------------
-// wxPGArrayStringEditorDialog
-// -----------------------------------------------------------------------
-
-class WXDLLIMPEXP_PROPGRID
-    wxPGArrayStringEditorDialog : public wxArrayEditorDialog
-{
-public:
-    wxPGArrayStringEditorDialog();
-    virtual ~wxPGArrayStringEditorDialog() { }
-
-    void Init();
-
-    virtual void SetDialogValue( const wxVariant& value )
-    {
-        m_array = value.GetArrayString();
-    }
-
-    virtual wxVariant GetDialogValue() const
-    {
-        return m_array;
-    }
-
-    void SetCustomButton( const wxChar* custBtText, wxArrayStringProperty* pcc )
-    {
-        m_custBtText = custBtText;
-        m_pCallingClass = pcc;
-    }
-
-    void OnCustomEditClick(wxCommandEvent& event);
-
-protected:
-    wxArrayString   m_array;
-
-    wxArrayStringProperty*     m_pCallingClass;
-
-    virtual wxString ArrayGet( size_t index );
-    virtual size_t ArrayGetCount();
-    virtual bool ArrayInsert( const wxString& str, int index );
-    virtual bool ArraySet( size_t index, const wxString& str );
-    virtual void ArrayRemoveAt( int index );
-    virtual void ArraySwap( size_t first, size_t second );
-
-private:
-    DECLARE_DYNAMIC_CLASS_NO_COPY(wxPGArrayStringEditorDialog)
-    DECLARE_EVENT_TABLE()
-};
-
-// -----------------------------------------------------------------------
-
-#endif // wxUSE_PROPGRID
-
-#endif // _WX_PROPGRID_PROPS_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/propgrid/props.h
+// Purpose:     wxPropertyGrid Property Classes
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     2007-03-28
+// RCS-ID:      $Id: props.h 60793 2009-05-29 16:04:22Z JMS $
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PROPGRID_PROPS_H_
+#define _WX_PROPGRID_PROPS_H_
+
+#if wxUSE_PROPGRID
+
+// -----------------------------------------------------------------------
+
+class wxArrayEditorDialog;
+
+#include "wx/propgrid/editors.h"
+
+#include "wx/filename.h"
+#include "wx/dialog.h"
+#include "wx/textctrl.h"
+#include "wx/button.h"
+#include "wx/listbox.h"
+
+// -----------------------------------------------------------------------
+
+//
+// Property class implementation helper macros.
+//
+
+#define WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME, UPCLASS, T, T_AS_ARG, EDITOR) \
+IMPLEMENT_DYNAMIC_CLASS(NAME, UPCLASS) \
+WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(NAME, T, EDITOR)
+
+// -----------------------------------------------------------------------
+
+//
+// These macros help creating DoGetValidator
+#define WX_PG_DOGETVALIDATOR_ENTRY() \
+    static wxValidator* s_ptr = NULL; \
+    if ( s_ptr ) return s_ptr;
+
+// Common function exit
+#define WX_PG_DOGETVALIDATOR_EXIT(VALIDATOR) \
+    s_ptr = VALIDATOR; \
+    wxPGGlobalVars->m_arrValidators.push_back( VALIDATOR ); \
+    return VALIDATOR;
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+
+/** @class wxPGInDialogValidator
+    @ingroup classes
+    Creates and manages a temporary wxTextCtrl for validation purposes.
+    Uses wxPropertyGrid's current editor, if available.
+*/
+class WXDLLIMPEXP_PROPGRID wxPGInDialogValidator
+{
+public:
+    wxPGInDialogValidator()
+    {
+        m_textCtrl = NULL;
+    }
+
+    ~wxPGInDialogValidator()
+    {
+        if ( m_textCtrl )
+            m_textCtrl->Destroy();
+    }
+
+    bool DoValidate( wxPropertyGrid* propGrid,
+                     wxValidator* validator,
+                     const wxString& value );
+
+private:
+    wxTextCtrl*         m_textCtrl;
+};
+
+#endif  // SWIG
+
+
+// -----------------------------------------------------------------------
+// Property classes
+// -----------------------------------------------------------------------
+
+#define wxPG_PROP_PASSWORD  wxPG_PROP_CLASS_SPECIFIC_2
+
+/** @class wxStringProperty
+    @ingroup classes
+    Basic property with string value.
+
+    <b>Supported special attributes:</b>
+    - "Password": set to 1 inorder to enable wxTE_PASSWORD on the editor.
+
+    @remarks
+    - If value "<composed>" is set, then actual value is formed (or composed)
+      from values of child properties.
+*/
+class WXDLLIMPEXP_PROPGRID wxStringProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxStringProperty)
+public:
+    wxStringProperty( const wxString& label = wxPG_LABEL,
+                      const wxString& name = wxPG_LABEL,
+                      const wxString& value = wxEmptyString );
+    virtual ~wxStringProperty();
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+
+    /** This is updated so "<composed>" special value can be handled.
+    */
+    virtual void OnSetValue();
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+#ifndef SWIG
+/** Constants used with DoValidation() methods.
+*/
+enum
+{
+    /** Instead of modifying the value, show an error message.
+    */
+    wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE      = 0,
+
+    /** Modify value, but stick with the limitations.
+    */
+    wxPG_PROPERTY_VALIDATION_SATURATE           = 1,
+
+    /** Modify value, wrap around on overflow.
+    */
+    wxPG_PROPERTY_VALIDATION_WRAP               = 2
+};
+#endif
+
+// -----------------------------------------------------------------------
+
+/** @class wxIntProperty
+    @ingroup classes
+    Basic property with integer value.
+
+    Seamlessly supports 64-bit integer (wxLongLong) on overflow.
+
+    <b>Example how to use seamless 64-bit integer support</b>
+
+      Getting value:
+
+      @code
+          wxLongLong_t value = pg->GetPropertyValueAsLongLong();
+      @endcode
+
+         or
+
+      @code
+          wxLongLong_t value;
+          wxVariant variant = property->GetValue();
+          if ( variant.GetType() == "wxLongLong" )
+              value = wxLongLongFromVariant(variant);
+          else
+              value = variant.GetLong();
+      @endcode
+
+      Setting value:
+
+       @code
+          pg->SetPropertyValue(longLongVal);
+      @endcode
+
+         or
+
+      @code
+          property->SetValue(WXVARIANT(longLongVal));
+      @endcode
+
+
+    <b>Supported special attributes:</b>
+    - "Min", "Max": Specify acceptable value range.
+*/
+class WXDLLIMPEXP_PROPGRID wxIntProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxIntProperty)
+public:
+    wxIntProperty( const wxString& label = wxPG_LABEL,
+                   const wxString& name = wxPG_LABEL,
+                   long value = 0 );
+    virtual ~wxIntProperty();
+
+    wxIntProperty( const wxString& label,
+                   const wxString& name,
+                   const wxLongLong& value );
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool ValidateValue( wxVariant& value,
+                                wxPGValidationInfo& validationInfo ) const;
+    virtual bool IntToValue( wxVariant& variant,
+                             int number,
+                             int argFlags = 0 ) const;
+    static wxValidator* GetClassValidator();
+    virtual wxValidator* DoGetValidator() const;
+
+    /** Validation helper.
+    */
+    static bool DoValidation( const wxPGProperty* property,
+                              wxLongLong_t& value,
+                              wxPGValidationInfo* pValidationInfo,
+                              int mode =
+                                wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE );
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxUIntProperty
+    @ingroup classes
+    Basic property with unsigned integer value.
+    Seamlessly supports 64-bit integer (wxULongLong) on overflow.
+
+    <b>Supported special attributes:</b>
+    - "Min", "Max": Specify acceptable value range.
+    - "Base": Define base. Valid constants are wxPG_BASE_OCT, wxPG_BASE_DEC,
+    wxPG_BASE_HEX and wxPG_BASE_HEXL (lowercase characters). Arbitrary bases
+    are <b>not</b> supported.
+    - "Prefix": Possible values are wxPG_PREFIX_NONE, wxPG_PREFIX_0x, and
+    wxPG_PREFIX_DOLLAR_SIGN. Only wxPG_PREFIX_NONE works with Decimal and Octal
+    numbers.
+
+    @remarks
+    - For example how to use seamless 64-bit integer support, see wxIntProperty
+    documentation (just use wxULongLong instead of wxLongLong).
+*/
+class WXDLLIMPEXP_PROPGRID wxUIntProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxUIntProperty)
+public:
+    wxUIntProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL,
+                    unsigned long value = 0 );
+    virtual ~wxUIntProperty();
+    wxUIntProperty( const wxString& label,
+                    const wxString& name,
+                    const wxULongLong& value );
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+    virtual bool ValidateValue( wxVariant& value,
+                                wxPGValidationInfo& validationInfo ) const;
+    virtual bool IntToValue( wxVariant& variant,
+                             int number,
+                             int argFlags = 0 ) const;
+protected:
+    wxByte      m_base;
+    wxByte      m_realBase; // translated to 8,16,etc.
+    wxByte      m_prefix;
+private:
+    void Init();
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxFloatProperty
+    @ingroup classes
+    Basic property with double-precision floating point value.
+
+    <b>Supported special attributes:</b>
+    - "Precision": Sets the (max) precision used when floating point value is
+    rendered as text. The default -1 means infinite precision.
+*/
+class WXDLLIMPEXP_PROPGRID wxFloatProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxFloatProperty)
+public:
+    wxFloatProperty( const wxString& label = wxPG_LABEL,
+                     const wxString& name = wxPG_LABEL,
+                     double value = 0.0 );
+    virtual ~wxFloatProperty();
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+    virtual bool ValidateValue( wxVariant& value,
+                                wxPGValidationInfo& validationInfo ) const;
+
+    /** Validation helper.
+    */
+    static bool DoValidation( const wxPGProperty* property,
+                              double& value,
+                              wxPGValidationInfo* pValidationInfo,
+                              int mode =
+                                 wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE );
+    virtual wxValidator* DoGetValidator () const;
+
+protected:
+    int m_precision;
+};
+
+// -----------------------------------------------------------------------
+
+// Exclude class from wxPython bindings
+#ifndef SWIG
+
+/** @class wxBoolProperty
+    @ingroup classes
+    Basic property with boolean value.
+
+    <b>Supported special attributes:</b>
+    - "UseCheckbox": Set to 1 to use check box editor instead of combo box.
+    - "UseDClickCycling": Set to 1 to cycle combo box instead showing the list.
+*/
+class WXDLLIMPEXP_PROPGRID wxBoolProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxBoolProperty)
+public:
+    wxBoolProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL,
+                    bool value = false );
+    virtual ~wxBoolProperty();
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool IntToValue( wxVariant& variant,
+                             int number, int argFlags = 0 ) const;
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+};
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+// If set, then selection of choices is static and should not be
+// changed (i.e. returns NULL in GetPropertyChoices).
+#define wxPG_PROP_STATIC_CHOICES    wxPG_PROP_CLASS_SPECIFIC_1
+
+/** @class wxEnumProperty
+    @ingroup classes
+    You can derive custom properties with choices from this class. See
+    wxBaseEnumProperty for remarks.
+
+    @remarks
+    - Updating private index is important. You can do this either by calling
+    SetIndex() in IntToValue, and then letting wxBaseEnumProperty::OnSetValue
+    be called (by not implementing it, or by calling super class function in
+    it) -OR- you can just call SetIndex in OnSetValue.
+*/
+class WXDLLIMPEXP_PROPGRID wxEnumProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxEnumProperty)
+public:
+
+#ifndef SWIG
+    wxEnumProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL,
+                    const wxChar** labels = NULL,
+                    const long* values = NULL,
+                    int value = 0 );
+    wxEnumProperty( const wxString& label,
+                    const wxString& name,
+                    wxPGChoices& choices,
+                    int value = 0 );
+
+    // Special constructor for caching choices (used by derived class)
+    wxEnumProperty( const wxString& label,
+                    const wxString& name,
+                    const wxChar** labels,
+                    const long* values,
+                    wxPGChoices* choicesCache,
+                    int value = 0 );
+
+    wxEnumProperty( const wxString& label,
+                    const wxString& name,
+                    const wxArrayString& labels,
+                    const wxArrayInt& values = wxArrayInt(),
+                    int value = 0 );
+#else
+    wxEnumProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL,
+                    const wxArrayString& labels = wxArrayString(),
+                    const wxArrayInt& values = wxArrayInt(),
+                    int value = 0 );
+#endif
+
+    virtual ~wxEnumProperty();
+
+    size_t GetItemCount() const { return m_choices.GetCount(); }
+
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool ValidateValue( wxVariant& value,
+                                wxPGValidationInfo& validationInfo ) const;
+
+    // If wxPG_FULL_VALUE is not set in flags, then the value is interpreted
+    // as index to choices list. Otherwise, it is actual value.
+    virtual bool IntToValue( wxVariant& variant,
+                             int number,
+                             int argFlags = 0 ) const;
+
+    //
+    // Additional virtuals
+
+    // This must be overridden to have non-index based value
+    virtual int GetIndexForValue( int value ) const;
+
+    // GetChoiceSelection needs to overridden since m_index is
+    // the true index, and various property classes derived from
+    // this take advantage of it.
+    virtual int GetChoiceSelection() const { return m_index; }
+
+    virtual void OnValidationFailure( wxVariant& pendingValue );
+
+protected:
+
+    int GetIndex() const;
+    void SetIndex( int index );
+
+    bool ValueFromString_( wxVariant& value,
+                           const wxString& text,
+                           int argFlags ) const;
+    bool ValueFromInt_( wxVariant& value, int intVal, int argFlags ) const;
+
+    static void ResetNextIndex() { ms_nextIndex = -2; }
+
+private:
+    // This is private so that classes are guaranteed to use GetIndex
+    // for up-to-date index value.
+    int                     m_index;
+
+    // Relies on ValidateValue being called always before OnSetValue
+    static int              ms_nextIndex;
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxEditEnumProperty
+    @ingroup classes
+    wxEnumProperty with wxString value and writable combo box editor.
+
+    @remarks
+    Uses int value, similar to wxEnumProperty, unless text entered by user is
+    is not in choices (in which case string value is used).
+*/
+class WXDLLIMPEXP_PROPGRID wxEditEnumProperty : public wxEnumProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxEditEnumProperty)
+public:
+
+    wxEditEnumProperty( const wxString& label,
+                        const wxString& name,
+                        const wxChar** labels,
+                        const long* values,
+                        const wxString& value );
+    wxEditEnumProperty( const wxString& label = wxPG_LABEL,
+                        const wxString& name = wxPG_LABEL,
+                        const wxArrayString& labels = wxArrayString(),
+                        const wxArrayInt& values = wxArrayInt(),
+                        const wxString& value = wxEmptyString );
+    wxEditEnumProperty( const wxString& label,
+                        const wxString& name,
+                        wxPGChoices& choices,
+                        const wxString& value = wxEmptyString );
+
+    // Special constructor for caching choices (used by derived class)
+    wxEditEnumProperty( const wxString& label,
+                        const wxString& name,
+                        const wxChar** labels,
+                        const long* values,
+                        wxPGChoices* choicesCache,
+                        const wxString& value );
+
+    virtual ~wxEditEnumProperty();
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxFlagsProperty
+    @ingroup classes
+    Represents a bit set that fits in a long integer. wxBoolProperty
+    sub-properties are created for editing individual bits. Textctrl is created
+    to manually edit the flags as a text; a continous sequence of spaces,
+    commas and semicolons is considered as a flag id separator.
+    <b>Note:</b> When changing "choices" (ie. flag labels) of wxFlagsProperty,
+    you will need to use SetPropertyChoices - otherwise they will not get
+    updated properly.
+*/
+class WXDLLIMPEXP_PROPGRID wxFlagsProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxFlagsProperty)
+public:
+
+#ifndef SWIG
+    wxFlagsProperty( const wxString& label,
+                     const wxString& name,
+                     const wxChar** labels,
+                     const long* values = NULL,
+                     long value = 0 );
+    wxFlagsProperty( const wxString& label,
+                     const wxString& name,
+                     wxPGChoices& choices,
+                     long value = 0 );
+#endif
+    wxFlagsProperty( const wxString& label = wxPG_LABEL,
+                     const wxString& name = wxPG_LABEL,
+                     const wxArrayString& labels = wxArrayString(),
+                     const wxArrayInt& values = wxArrayInt(),
+                     int value = 0 );
+    virtual ~wxFlagsProperty ();
+
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int flags ) const;
+    virtual void ChildChanged( wxVariant& thisValue,
+                               int childIndex,
+                               wxVariant& childValue ) const;
+    virtual void RefreshChildren();
+
+    // GetChoiceSelection needs to overridden since m_choices is
+    // used and value is integer, but it is not index.
+    virtual int GetChoiceSelection() const { return wxNOT_FOUND; }
+
+    // helpers
+    size_t GetItemCount() const { return m_choices.GetCount(); }
+    const wxString& GetLabel( size_t ind ) const
+        { return m_choices.GetLabel(ind); }
+
+protected:
+    // Used to detect if choices have been changed
+    wxPGChoicesData*        m_oldChoicesData;
+
+    // Needed to properly mark changed sub-properties
+    long                    m_oldValue;
+
+    // Converts string id to a relevant bit.
+    long IdToBit( const wxString& id ) const;
+
+    // Creates children and sets value.
+    void Init();
+};
+
+// -----------------------------------------------------------------------
+
+/** @class wxPGFileDialogAdapter
+    @ingroup classes
+*/
+class WXDLLIMPEXP_PROPGRID
+    wxPGFileDialogAdapter : public wxPGEditorDialogAdapter
+{
+public:
+    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
+                               wxPGProperty* property );
+};
+
+// -----------------------------------------------------------------------
+
+// Indicates first bit useable by derived properties.
+#define wxPG_PROP_SHOW_FULL_FILENAME  wxPG_PROP_CLASS_SPECIFIC_1
+
+/** @class wxFileProperty
+    @ingroup classes
+    Like wxLongStringProperty, but the button triggers file selector instead.
+
+    <b>Supported special attributes:</b>
+    - "Wildcard": Sets wildcard (see wxFileDialog for format details), "All
+    files..." is default.
+    - "ShowFullPath": Default 1. When 0, only the file name is shown (i.e. drive
+      and directory are hidden).
+    - "ShowRelativePath": If set, then the filename is shown relative to the
+    given path string.
+    - "InitialPath": Sets the initial path of where to look for files.
+    - "DialogTitle": Sets a specific title for the dir dialog.
+*/
+class WXDLLIMPEXP_PROPGRID wxFileProperty : public wxPGProperty
+{
+    friend class wxPGFileDialogAdapter;
+    WX_PG_DECLARE_PROPERTY_CLASS(wxFileProperty)
+public:
+
+    wxFileProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL,
+                    const wxString& value = wxEmptyString );
+    virtual ~wxFileProperty ();
+
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+
+    static wxValidator* GetClassValidator();
+    virtual wxValidator* DoGetValidator() const;
+
+    /**
+        Returns filename to file represented by current value.
+    */
+    wxFileName GetFileName() const;
+
+protected:
+    wxString    m_wildcard;
+    wxString    m_basePath; // If set, then show path relative to it
+    wxString    m_initialPath; // If set, start the file dialog here
+    wxString    m_dlgTitle; // If set, used as title for file dialog
+    int         m_indFilter; // index to the selected filter
+};
+
+// -----------------------------------------------------------------------
+
+#define wxPG_PROP_NO_ESCAPE     wxPG_PROP_CLASS_SPECIFIC_1
+
+
+/** @class wxPGLongStringDialogAdapter
+    @ingroup classes
+*/
+class WXDLLIMPEXP_PROPGRID
+    wxPGLongStringDialogAdapter : public wxPGEditorDialogAdapter
+{
+public:
+    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
+                               wxPGProperty* property );
+};
+
+
+/** @class wxLongStringProperty
+    @ingroup classes
+    Like wxStringProperty, but has a button that triggers a small text
+    editor dialog.
+*/
+class WXDLLIMPEXP_PROPGRID wxLongStringProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxLongStringProperty)
+public:
+
+    wxLongStringProperty( const wxString& label = wxPG_LABEL,
+                          const wxString& name = wxPG_LABEL,
+                          const wxString& value = wxEmptyString );
+    virtual ~wxLongStringProperty();
+
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxWindow* primary, wxEvent& event );
+
+    // Shows string editor dialog. Value to be edited should be read from
+    // value, and if dialog is not cancelled, it should be stored back and true
+    // should be returned if that was the case.
+    virtual bool OnButtonClick( wxPropertyGrid* propgrid, wxString& value );
+
+    static bool DisplayEditorDialog( wxPGProperty* prop,
+                                     wxPropertyGrid* propGrid,
+                                     wxString& value );
+
+protected:
+};
+
+// -----------------------------------------------------------------------
+
+
+// Exclude class from wxPython bindings
+#ifndef SWIG
+
+/** @class wxDirProperty
+    @ingroup classes
+    Like wxLongStringProperty, but the button triggers dir selector instead.
+
+    <b>Supported special attributes:</b>
+    - "DialogMessage": Sets specific message in the dir selector.
+*/
+class WXDLLIMPEXP_PROPGRID wxDirProperty : public wxLongStringProperty
+{
+    DECLARE_DYNAMIC_CLASS(wxDirProperty)
+public:
+    wxDirProperty( const wxString& name = wxPG_LABEL,
+                   const wxString& label = wxPG_LABEL,
+                   const wxString& value = wxEmptyString );
+    virtual ~wxDirProperty();
+
+    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
+    virtual wxValidator* DoGetValidator() const;
+
+    virtual bool OnButtonClick ( wxPropertyGrid* propGrid, wxString& value );
+
+protected:
+    wxString    m_dlgMessage;
+};
+
+#endif  // !SWIG
+
+// -----------------------------------------------------------------------
+
+// wxBoolProperty specific flags
+#define wxPG_PROP_USE_CHECKBOX      wxPG_PROP_CLASS_SPECIFIC_1
+// DCC = Double Click Cycles
+#define wxPG_PROP_USE_DCC           wxPG_PROP_CLASS_SPECIFIC_2
+
+
+// -----------------------------------------------------------------------
+
+/** @class wxArrayStringProperty
+    @ingroup classes
+    Property that manages a list of strings.
+*/
+class WXDLLIMPEXP_PROPGRID wxArrayStringProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxArrayStringProperty)
+public:
+
+    wxArrayStringProperty( const wxString& label = wxPG_LABEL,
+                           const wxString& name = wxPG_LABEL,
+                           const wxArrayString& value = wxArrayString() );
+    virtual ~wxArrayStringProperty();
+
+    virtual void OnSetValue();
+    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
+    virtual bool StringToValue( wxVariant& variant,
+                                const wxString& text,
+                                int argFlags = 0 ) const;
+    virtual bool OnEvent( wxPropertyGrid* propgrid,
+                          wxWindow* primary, wxEvent& event );
+
+    virtual void GenerateValueAsString();
+
+    // Shows string editor dialog. Value to be edited should be read from
+    // value, and if dialog is not cancelled, it should be stored back and true
+    // should be returned if that was the case.
+    virtual bool OnCustomStringEdit( wxWindow* parent, wxString& value );
+
+    // Helper.
+    virtual bool OnButtonClick( wxPropertyGrid* propgrid,
+                                wxWindow* primary,
+                                const wxChar* cbt );
+
+#ifndef SWIG
+    // Creates wxArrayEditorDialog for string editing. Called in OnButtonClick.
+    virtual wxArrayEditorDialog* CreateEditorDialog();
+#endif
+
+protected:
+    wxString        m_display; // Cache for displayed text.
+};
+
+// -----------------------------------------------------------------------
+
+#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR_WITH_DECL(PROPNAME, \
+                                                                    DECL) \
+DECL PROPNAME : public wxArrayStringProperty \
+{ \
+    WX_PG_DECLARE_PROPERTY_CLASS(PROPNAME) \
+public: \
+    PROPNAME( const wxString& label = wxPG_LABEL, \
+              const wxString& name = wxPG_LABEL, \
+              const wxArrayString& value = wxArrayString() ); \
+    ~PROPNAME(); \
+    virtual void GenerateValueAsString(); \
+    virtual bool StringToValue( wxVariant& value, \
+                                const wxString& text, int = 0 ) const; \
+    virtual bool OnEvent( wxPropertyGrid* propgrid, \
+                          wxWindow* primary, wxEvent& event ); \
+    virtual bool OnCustomStringEdit( wxWindow* parent, wxString& value ); \
+    virtual wxValidator* DoGetValidator() const; \
+};
+
+#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAM) \
+WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAM, class)
+
+#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAME, \
+                                                            DELIMCHAR, \
+                                                            CUSTBUTTXT) \
+WX_PG_IMPLEMENT_PROPERTY_CLASS(PROPNAME, wxArrayStringProperty, \
+                               wxArrayString, const wxArrayString&, \
+                               TextCtrlAndButton) \
+PROPNAME::PROPNAME( const wxString& label, \
+                    const wxString& name, \
+                    const wxArrayString& value ) \
+    : wxArrayStringProperty(label,name,value) \
+{ \
+    PROPNAME::GenerateValueAsString(); \
+} \
+PROPNAME::~PROPNAME() { } \
+void PROPNAME::GenerateValueAsString() \
+{ \
+    wxChar delimChar = DELIMCHAR; \
+    if ( delimChar == wxS('"') ) \
+        wxArrayStringProperty::GenerateValueAsString(); \
+    else \
+        wxPropertyGrid::ArrayStringToString(m_display, \
+                                            m_value.GetArrayString(), \
+                                            0,DELIMCHAR,0); \
+} \
+bool PROPNAME::StringToValue( wxVariant& variant, \
+                              const wxString& text, int ) const \
+{ \
+    wxChar delimChar = DELIMCHAR; \
+    if ( delimChar == wxS('"') ) \
+        return wxArrayStringProperty::StringToValue(variant, text, 0); \
+    \
+    wxArrayString arr; \
+    WX_PG_TOKENIZER1_BEGIN(text,DELIMCHAR) \
+        arr.Add( token ); \
+    WX_PG_TOKENIZER1_END() \
+    variant = arr; \
+    return true; \
+} \
+bool PROPNAME::OnEvent( wxPropertyGrid* propgrid, \
+                        wxWindow* primary, wxEvent& event ) \
+{ \
+    if ( event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED ) \
+        return OnButtonClick(propgrid,primary,(const wxChar*) CUSTBUTTXT); \
+    return false; \
+}
+
+#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY(PROPNAME) \
+WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAME)
+
+#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_DECL(PROPNAME, DECL) \
+WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_VALIDATOR_WITH_DECL(PROPNAME, DECL)
+
+#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(PROPNAME,DELIMCHAR,CUSTBUTTXT) \
+WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY_WITH_VALIDATOR(PROPNAME, \
+                                                    DELIMCHAR, \
+                                                    CUSTBUTTXT) \
+wxValidator* PROPNAME::DoGetValidator () const \
+{ return NULL; }
+
+
+// -----------------------------------------------------------------------
+// wxArrayEditorDialog
+// -----------------------------------------------------------------------
+
+#define wxAEDIALOG_STYLE \
+    (wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER | wxOK | wxCANCEL | wxCENTRE)
+
+class WXDLLIMPEXP_PROPGRID wxArrayEditorDialog : public wxDialog
+{
+public:
+    wxArrayEditorDialog();
+    virtual ~wxArrayEditorDialog() { }
+
+    void Init();
+
+    wxArrayEditorDialog( wxWindow *parent,
+                         const wxString& message,
+                         const wxString& caption,
+                         long style = wxAEDIALOG_STYLE,
+                         const wxPoint& pos = wxDefaultPosition,
+                         const wxSize& sz = wxDefaultSize );
+
+    bool Create( wxWindow *parent,
+                 const wxString& message,
+                 const wxString& caption,
+                 long style = wxAEDIALOG_STYLE,
+                 const wxPoint& pos = wxDefaultPosition,
+                 const wxSize& sz = wxDefaultSize );
+
+    /** Set value modified by dialog.
+    */
+    virtual void SetDialogValue( const wxVariant& WXUNUSED(value) )
+    {
+        wxFAIL_MSG(wxT("re-implement this member function in derived class"));
+    }
+
+    /** Return value modified by dialog.
+    */
+    virtual wxVariant GetDialogValue() const
+    {
+        wxFAIL_MSG(wxT("re-implement this member function in derived class"));
+        return wxVariant();
+    }
+
+    /** Override to return wxValidator to be used with the wxTextCtrl
+        in dialog. Note that the validator is used in the standard
+        wx way, ie. it immediately prevents user from entering invalid
+        input.
+
+        @remarks
+        Dialog frees the validator.
+    */
+    virtual wxValidator* GetTextCtrlValidator() const
+    {
+        return NULL;
+    }
+
+    // Returns true if array was actually modified
+    bool IsModified() const { return m_modified; }
+
+    //const wxArrayString& GetStrings() const { return m_array; }
+
+    // implementation from now on
+    void OnUpdateClick(wxCommandEvent& event);
+    void OnAddClick(wxCommandEvent& event);
+    void OnDeleteClick(wxCommandEvent& event);
+    void OnListBoxClick(wxCommandEvent& event);
+    void OnUpClick(wxCommandEvent& event);
+    void OnDownClick(wxCommandEvent& event);
+    //void OnCustomEditClick(wxCommandEvent& event);
+    void OnIdle(wxIdleEvent& event);
+
+protected:
+    wxTextCtrl*     m_edValue;
+    wxListBox*      m_lbStrings;
+
+    wxButton*       m_butAdd;       // Button pointers
+    wxButton*       m_butCustom;    // required for disabling/enabling changing.
+    wxButton*       m_butUpdate;
+    wxButton*       m_butRemove;
+    wxButton*       m_butUp;
+    wxButton*       m_butDown;
+
+    //wxArrayString   m_array;
+
+    const wxChar*   m_custBtText;
+    //wxArrayStringPropertyClass*     m_pCallingClass;
+
+    bool            m_modified;
+
+    unsigned char   m_curFocus;
+
+    // These must be overridden - must return true on success.
+    virtual wxString ArrayGet( size_t index ) = 0;
+    virtual size_t ArrayGetCount() = 0;
+    virtual bool ArrayInsert( const wxString& str, int index ) = 0;
+    virtual bool ArraySet( size_t index, const wxString& str ) = 0;
+    virtual void ArrayRemoveAt( int index ) = 0;
+    virtual void ArraySwap( size_t first, size_t second ) = 0;
+
+private:
+    DECLARE_DYNAMIC_CLASS_NO_COPY(wxArrayEditorDialog)
+    DECLARE_EVENT_TABLE()
+};
+
+// -----------------------------------------------------------------------
+// wxPGArrayStringEditorDialog
+// -----------------------------------------------------------------------
+
+class WXDLLIMPEXP_PROPGRID
+    wxPGArrayStringEditorDialog : public wxArrayEditorDialog
+{
+public:
+    wxPGArrayStringEditorDialog();
+    virtual ~wxPGArrayStringEditorDialog() { }
+
+    void Init();
+
+    virtual void SetDialogValue( const wxVariant& value )
+    {
+        m_array = value.GetArrayString();
+    }
+
+    virtual wxVariant GetDialogValue() const
+    {
+        return m_array;
+    }
+
+    void SetCustomButton( const wxChar* custBtText, wxArrayStringProperty* pcc )
+    {
+        m_custBtText = custBtText;
+        m_pCallingClass = pcc;
+    }
+
+    void OnCustomEditClick(wxCommandEvent& event);
+
+protected:
+    wxArrayString   m_array;
+
+    wxArrayStringProperty*     m_pCallingClass;
+
+    virtual wxString ArrayGet( size_t index );
+    virtual size_t ArrayGetCount();
+    virtual bool ArrayInsert( const wxString& str, int index );
+    virtual bool ArraySet( size_t index, const wxString& str );
+    virtual void ArrayRemoveAt( int index );
+    virtual void ArraySwap( size_t first, size_t second );
+
+private:
+    DECLARE_DYNAMIC_CLASS_NO_COPY(wxPGArrayStringEditorDialog)
+    DECLARE_EVENT_TABLE()
+};
+
+// -----------------------------------------------------------------------
+
+#endif // wxUSE_PROPGRID
+
+#endif // _WX_PROPGRID_PROPS_H_
